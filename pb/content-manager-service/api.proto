syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "common.proto";
import "commi.proto";
import "movideo.proto";

option go_package = "github.com/ClareAI/ai-platform-protocol/api/content-manager-service";
package wati.ai_platform.protocol.content_manager_service;

// clang-format off
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Content Manager Service";
        version: "1.0.0";
    };
};

// 内容管理服务. 用于管理AI视频音频模版以及生成AI视频/音频的素材。
// [EN] Content Manager. Used to manage AI video/audio templates,
// clips for generating AI video/audio and generated AI video/audio.
service ContentManagerService {
    // 罗列所有的视频模版.
    // [EN] List all video templates.
    rpc CommiTemplateList(CommiTemplateListRequest) returns (CommiTemplateListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/video/templates"
        };
    }

    // 获取指定视频模版.
    // [EN] Get the specified template by template ID.
    rpc CommiTemplateGet(CommiTemplateGetRequest) returns (CommiTemplateGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/video/templates/{id}"
        };
    }

    // [INTERNAL] 创建新的视频模版.
    // [INTERNAL] [EN] Create new template.
    rpc CommiTemplateNew(CommiTemplateNewRequest) returns (CommiTemplateNewResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/video/templates"
            body: "*"
        };
    }

    // [INTERNAL] 更新指定模版.
    // [INTERNAL] [EN] Update the specified template by template ID.
    rpc CommiTemplateUpdate(CommiTemplateUpdateRequest) returns (CommiTemplateUpdateResponse) {
        option (google.api.http) = {
            patch: "/commi/v1/users/{user_id}/video/templates/{id}"
            body: "*"
        };
    }

    // [INTERNAL] 删除指定模版.
    // [INTERNAL] [EN] Delete the specified template by template ID.
    rpc CommiTemplateDelete(CommiTemplateDeleteRequest) returns (CommiTemplateDeleteResponse) {
        option (google.api.http) = {
            delete: "/commi/v1/users/{user_id}/video/templates/{id}"
        };
    }

    // [INTERNAL] 罗列所有的脚本模版.
    // [INTERNAL] [EN] List all script templates.
    rpc CommiTemplateScriptList(CommiTemplateScriptListRequest) returns (CommiTemplateScriptListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/video/templates/{template_id}/scripts"
        };
    }

    // [INTERNAL] 获取指定脚本模版.
    // [INTERNAL] [EN] Get the specified script template by ID.
    rpc CommiTemplateScriptGet(CommiTemplateScriptGetRequest) returns (CommiTemplateScriptGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/video/templates/{template_id}/scripts/{id}"
        };
    }

    // [INTERNAL] 创建新的脚本模版.
    // [INTERNAL] [EN] Create a new script template.
    rpc CommiTemplateScriptNew(CommiTemplateScriptNewRequest) returns (CommiTemplateScriptNewResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/video/templates/{template_id}/scripts"
            body: "*"
        };
    }

    // [INTERNAL] 更新指定脚本模版.
    // [INTERNAL] [EN] Update the specified script template by ID.
    rpc CommiTemplateScriptUpdate(CommiTemplateScriptUpdateRequest) returns (CommiTemplateScriptUpdateResponse) {
        option (google.api.http) = {
            put: "/commi/v1/users/{user_id}/video/templates/{template_id}/scripts/{id}"
            body: "*"
        };
    }

    // [INTERNAL] 删除指定脚本模版.
    // [INTERNAL] [EN] Delete the specified script template by ID.
    rpc CommiTemplateScriptDelete(CommiTemplateScriptDeleteRequest) returns (CommiTemplateScriptDeleteResponse) {
        option (google.api.http) = {
            delete: "/commi/v1/users/{user_id}/video/templates/{template_id}/scripts/{id}"
        };
    }

    // 罗列所有的speaker.
    // [EN] List all speakers.
    rpc CommiSpeakerList(CommiSpeakerListRequest) returns (CommiSpeakerListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/speakers"
        };
    }

    // 获取指定speaker.
    // [INTERNAL] [EN] Get the specified speaker by ID.
    rpc CommiSpeakerGet(CommiSpeakerGetRequest) returns (CommiSpeakerGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/speakers/{id}"
        };
    }

    // 创建新的speaker.
    // [INTERNAL] [EN] Create new speaker.
    rpc CommiSpeakerNew(CommiSpeakerNewRequest) returns (CommiSpeakerNewResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/speakers"
            body: "*"
        };
    }

    // 更新指定的speaker.
    // [INTERNAL] [EN] Update the specified speaker by ID.
    rpc CommiSpeakerUpdate(CommiSpeakerUpdateRequest) returns (CommiSpeakerUpdateResponse) {
        option (google.api.http) = {
            patch: "/commi/v1/users/{user_id}/speakers/{id}"
            body: "*"
        };
    }
    // 删除指定的speaker.
    // [INTERNAL] [EN] Delete the specified speaker by ID.
    rpc CommiSpeakerDelete(CommiSpeakerDeleteRequest) returns (CommiSpeakerDeleteResponse) {
        option (google.api.http) = {
            delete: "/commi/v1/users/{user_id}/speakers/{id}"
        };
    }

    // 获取示例视频
    // [INTERNAL] [EN] Get sample video by template id and speaker id.
    rpc CommiSpeakerSampleVideoGet(CommiSpeakerSampleVideoGetRequest) returns (CommiSpeakerSampleVideoGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/speakers/{id}/sample_video"
        };
    }

    // 罗列用户的全部生成视频.
    // [EN] List all videos generated by the specified user.
    rpc CommiUserVideoList(CommiUserVideoListRequest) returns (CommiUserVideoListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/videos"
        };
    }

    // 获取用户的指定视频
    // [EN] Get the specified video by video ID.
    rpc CommiUserVideoGet(CommiUserVideoGetRequest) returns (CommiUserVideoGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/videos/{video_id}"
        };
    }

    // 用户创建生成视频的任务
    // [EN] Create a video generation task.
    rpc CommiUserVideoTaskNew(CommiUserVideoNewTaskRequest) returns (CommiUserVideoNewTaskResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/videos"
            body: "*"
        };
    }

    // 用户查询指定视频的状态
    // [EN] Check a video generation task status by video ID.
    rpc CommiUserVideoTaskStatusGet(CommiUserVideoTaskStatusGetRequest) returns (CommiUserVideoTaskStatusGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/videos/{video_id}/status"
        };
    }

    // 用户更新指定视频
    // [EN] Update the specified video by ID.
    rpc CommiUserVideoUpdate(CommiUserVideoUpdateRequest) returns (CommiUserVideoUpdateResponse) {
        option (google.api.http) = {
            patch: "/commi/v1/users/{user_id}/videos/{video_id}"
            body: "*"
        };
    }

    // 用户删除指定视频
    // [EN] Delete the specified video by ID.
    rpc CommiUserVideoDelete(CommiUserVideoDeleteRequest) returns (CommiUserVideoDeleteResponse) {
        option (google.api.http) = {
            delete: "/commi/v1/users/{user_id}/videos/{video_id}"
        };
    }

    // 用户视频生成记录
    // [EN] List user video generation usage.
    rpc CommiUserVideoGetShareUrl(CommiUserVideoGetShareUrlRequest) returns (CommiUserVideoGetShareUrlResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/videos/{video_id}/share"
        };
    }

    // 用户视频生成记录
    // [EN] List user video generation usage.
    rpc CommiUserVideoGenerationUsageList(CommiUserVideoGenerationUsageListRequest) returns (CommiUserVideoGenerationUsageListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/videos/usages"
        };
    }

    // 批量发送wati消息.
    // [EN] Batch send wati message.
    rpc CommiUserSendWATIMessage(CommiSendWATIMessageRequest) returns (CommiSendWATIMessageResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/send/wati"
            body: "*"
        };
    }


    rpc MovideoVoiceList(MovideoVoiceListRequest) returns (MovideoVoiceListResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/voices"
        };
    }

    rpc MovideoVoiceGet(MovideoVoiceGetRequest) returns (MovideoVoiceGetResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/voices/{name}"
        };
    }

    rpc MovideoUserListVideo(MovideoUserListVideoRequest) returns (MovideoUserListVideoResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/videos"
        };
    }

    rpc MovideoUserNewVideoTask(MovideoUserNewVideoTaskRequest) returns (MovideoUserNewVideoTaskResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/users/{user_id}/videos"
            body: "*"
        };
    }

    rpc MovideoUserTaskStatusGet(MovideoUserTaskStatusGetRequest) returns (MovideoUserTaskStatusGetResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/videos/{video_id}/status"
        };
    }

    rpc MovideoUserGetVideo(MovideoUserGetVideoRequest) returns (MovideoUserGetVideoResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/videos/{video_id}"
        };
    }

    rpc MovideoUserVideoExportTaskNew(MovideoUserVideoExportTaskNewRequest) returns (MovideoUserVideoExportTaskNewResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/users/{user_id}/videos/export"
            body: "*"
        };
    }

    rpc MovideoUserVideoExportTaskGet(MovideoUserVideoExportTaskGetRequest) returns (MovideoUserVideoExportTaskGetResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/videos/export/{task_id}"
        };
    }

    rpc MovideoUserUpdateVideo(MovideoUserUpdateVideoRequest) returns (MovideoUserUpdateVideoResponse) {
        option (google.api.http) = {
            patch: "/movideo/v1/users/{user_id}/videos/{video_id}"
            body: "*"
        };
    }

    rpc MovideoUserDeleteVideo(MovideoUserDeleteVideoRequest) returns (MovideoUserDeleteVideoResponse) {
        option (google.api.http) = {
            delete: "/movideo/v1/users/{user_id}/videos/{video_id}"
        };
    }

    rpc MovideoSendFeedBack(MovideoSendFeedBackRequest) returns (MovideoSendFeedBackResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/feedback"
            body: "*"
        };
    }

    // rpc MovideoUserVideoShare(MovideoUserVideoShareRequest) returns (MovideoUserVideoShareResponse) {
    //     option (google.api.http) = {
    //         post: "/v1/users/{user_id}/movideo/videos/{video_id}/share"
    //         body: "*"
    //     };
    // }

}

// clang-format on

message CommiTemplateListRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 分页信息.
    // [EN] Paging.
    common.RequestPaging paging = 2;
    // [OPTIONAL] 指定模版类型.
    // [OPTIONAL] [EN] specific category .
    commi.CATEGORY category = 3;
    // [OPTIONAL] 查询名称过滤方式.
    // [OPTIONAL] [EN] Query name filter.
    common.NameQuery name = 4;
    // [OPTIONAL] 当前用户是否喜欢
    // [OPTIONAL] [EN] User favourite or not.
    common.USERFAVOURITE favourite = 5;
}

message CommiTemplateListResponse {
    // 模版对象.
    // [EN] CommiTemplate objects.
    repeated commi.Template templates = 1;
    // 分页信息.
    // [EN] Paging.
    common.ResponsePaging paging = 2;
}

message CommiTemplateGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string id = 2;
}

message CommiTemplateGetResponse {
    // 模版对象.
    // [EN] CommiTemplate object.
    commi.Template template = 1;
}

message CommiTemplateNewRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版名称.
    // [EN] CommiTemplate objects.
    string name = 2;
    // [可选] 模版描述.
    // [EN] [Optional] CommiTemplate description.
    string description = 3;
    // 模版类别.
    // The Category of template.
    commi.CATEGORY category = 4;
    // [可选] 标签
    // [EN] [Optional] Tags of template.
    repeated string tags = 5;
    // 模版预览图名字，需要预先上传.
    // [EN] Thumbnail path. Supports web address and local path
    string thumbnail = 6;
}

message CommiTemplateNewResponse {
    // 模版.
    // [EN] CommiTemplate object.
    commi.Template template = 1;
}

message CommiTemplateUpdateRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 要更新的模版id.
    // [EN] The template uuid to be updated.
    string id = 2;
    // [Optional] 更新的名称. 若为空则不变.
    // [Optional] [EN] New name. Unchanged if empty.
    string name = 3;
    // [Optional] 更新的描述. 若为空则不变.
    // [Optional] [EN] New description. Unchanged if empty.
    string description = 4;
    // [Optional] 更新的tags. 全量. 若为空则不变.
    // [Optional] [EN] All new tags. Unchanged if empty.
    repeated string tags = 5;
    // [Optional] 更新的图片的地址. 若为空则不变.
    // [Optional] [EN] New thumbnail. Supports web address and local path.
    // Unchanged if empty.
    string thumbnail = 6;
    // [Optional] 设置是否喜欢. 为空不变. 1不喜欢, 2喜欢
    // [Optional] [EN] Set user favourite optional.
    common.USERFAVOURITE favourite = 7;
}

message CommiTemplateUpdateResponse {
    // 更新后的template
    // [EN] New template object.
    commi.Template template = 1;
}

message CommiTemplateDeleteRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 要删除的模版id.
    // [EN] The template id needs to be deleted.
    string id = 2;
}

message CommiTemplateDeleteResponse {
}

message CommiTemplateScriptListRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string template_id = 2;
    // 分页.
    // [EN] Paging.
    common.RequestPaging paging = 3;
}

message CommiTemplateScriptListResponse {
    // 脚本模版.
    // [EN] Script template objects.
    repeated commi.TemplateScript scripts = 1;
    // 分页.
    // [EN] Paging.
    common.ResponsePaging paging = 2;
}

message CommiTemplateScriptGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string template_id = 2;
    // 要获取的脚本模版id.
    // [EN] UUID of script template.
    string id = 3;
}

message CommiTemplateScriptGetResponse {
    // 脚本模版.
    // [EN] Script template object.
    commi.TemplateScript script = 1;
}

message CommiTemplateScriptNewRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string template_id = 2;
    // 脚本模版的内容. 使用{{`key`}}来标识模版中的变量.
    // key的值需要和`CommiTemplateScriptParameter`中的key一致.
    // [EN] The content of script template. Use {{`key`}} to mark variables in
    // the template. [EN] The content of key needs to be the same as the key
    // name in the `CommiTemplateScriptParameter,
    string content = 3;
    // 脚本模版参数，需要与脚本模版内容中的变量标识的数量保持一致.
    // 如果脚本模版内容里面没有变量标识，可不写.
    // [EN] The parameter of script template.
    // [EN] The number of parameters should be the same as the number of
    // variable marks in the script template content. [EN] Omit it if no marks
    // in the script template content.
    repeated commi.TemplateScriptParameter parameters = 4;
}

message CommiTemplateScriptNewResponse {
    // 脚本模版.
    // [EN] Script template objects.
    commi.TemplateScript script = 1;
}

message CommiTemplateScriptUpdateRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string template_id = 2;
    // 要更新的脚本模版id.
    // [EN] UUID of the script template need to update.
    string id = 3;
    // [OPTIONAL] 脚本模版内容. 若为空则不变.
    // [OPTIONAL] New content.
    string content = 4;
    // [OPTIONAL] 脚本模版参数, content为空时无效.
    // [OPTIONAL] 需要与脚本模版内容中的变量标识的数量保持一致.
    // [OPTIONAL] 如果脚本模版内容里面没有变量标识，可不写.
    // [OPTIONAL] [EN] The parameter of new content. Invalid if content is
    // empty. [OPTIONAL] [EN] The number of parameters should be the same as the
    // number of variable marks in the script template content. [OPTIONAL] [EN]
    // Omit it if no marks in the script template content.
    repeated commi.TemplateScriptParameter parameters = 5;
}

message CommiTemplateScriptUpdateResponse {
    // 新的脚本模版.
    // [EN] New script template.
    commi.TemplateScript script = 1;
}

message CommiTemplateScriptDeleteRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 模版的唯一id.
    // [EN] UUID of template.
    string template_id = 2;
    // 要删除的脚本模版id.
    // [EN] The script template id needs to be deleted.
    string id = 3;
}

message CommiTemplateScriptDeleteResponse {
}

message CommiSpeakerListRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 分页.
    // [EN] Paging.
    common.RequestPaging paging = 2;
    // [OPTIONAL] 查询名称过滤方式.
    // [OPTIONAL] [EN] Query name filter.
    common.NameQuery name = 3;
    // [OPTIONAL] 语言.
    // [OPTIONAL] [EN] Language.
    commi.LANGUAGE language = 4;
    // [OPTIONAL] 当前用户是否喜欢
    // [OPTIONAL] [EN] User favourite or not.
    common.USERFAVOURITE favourite = 5;
}

message CommiSpeakerListResponse {
    // speakers.
    // [EN] CommiSpeaker objects.
    repeated commi.Speaker speakers = 1;
    // 分页.
    // [EN] Paging.
    common.ResponsePaging paging = 2;
}

message CommiSpeakerGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // CommiSpeaker id.
    // [EN] CommiSpeaker id.
    string id = 2;
}

message CommiSpeakerGetResponse {
    // CommiSpeaker.
    // [EN] CommiSpeaker object.
    commi.Speaker speaker = 1;
}

message Avatar {
    // 头像文件名字.
    // [EN] Thumbnail name.
    string thumbnail_name = 1;
    // 用于生成AI speaker的名字.
    // [OPTIONAL][EN] Sample video name for generating AI speaker.
    string sample_video_name = 2;
}

message CommiSpeakerNewRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 名字.
    // [EN] Name.
    string name = 2;
    // 语言.
    // [EN] Spoken language.
    commi.LANGUAGE language = 3;
    // 性别.
    // [EN] CommiSpeaker gender.
    common.GENDER gender = 4;
    // 音频示例文件名称.
    // [EN] audio sample address for generating AI speaker audio.
    string sample_audio_name = 5;
    // 默认头像信息.
    // [EN] Default avatar infomation.
    Avatar default_avatar = 6;
    // 默认语气.
    // [EN] Default tone.
    common.TONE default_tone = 7;
}

message CommiSpeakerNewResponse {
    // CommiSpeaker
    // [EN] CommiSpeaker object.
    commi.Speaker speaker = 1;
}

message CommiSpeakerUpdateRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 需要更新的speaker id.
    // [EN] UUID of the speaker need to update.
    string id = 2;
    // [OPTIONAL] 要更新的默认语气
    // [OPTIONAL] [EN] Default tone need to update.
    common.TONE default_tone = 3;
    // [OPTIONAL] 当前用户是否喜欢
    // [OPTIONAL] [EN] User favourite or not.
    common.USERFAVOURITE favourite = 4;
}

message CommiSpeakerUpdateResponse {
    // CommiSpeaker.
    // [EN] CommiSpeaker object.
    commi.Speaker speaker = 1;
}

message CommiSpeakerDeleteRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 要删除的 CommiSpeaker id.
    // [EN] The speaker id needs to be deleted.
    string id = 2;
}

message CommiSpeakerDeleteResponse {
}

message CommiUserVideoListRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // [OPTIONAL] 任务状态.
    // [OPTIONAL] [EN] task status
    common.TASKSTATUS status = 2;
    // [OPTIONAL] 是否时间升序. 默认降序结果.
    // [OPTIONAL] [EN] is asc(查单词)
    bool is_ascending = 3;
    // [OPTIONAL] 类型.
    // [OPTIONAL] [EN] category.
    commi.CATEGORY category = 4;
    // [OPTIONAL] 查询名称过滤方式.
    // [OPTIONAL] [EN] Query name filter.
    common.NameQuery name = 5;
    // 分页信息.
    // [EN] Paging.
    common.RequestPaging paging = 20;
}

message CommiUserVideoListResponse {
    // 生成的视频.
    // [EN] Videos.
    repeated commi.Video videos = 1;
    // 分页信息.
    // [EN] Paging.
    common.ResponsePaging paging = 2;
}

message CommiUserVideoNewTaskRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // [OPTIONAL] 视频名称，如果没写的话会根据template名称和时间戳自动生成.
    // [OPTIONAL] [EN] Video name.
    // [OPTIONAL] [EN] If not specified, it will be generated based on the
    // template name + current timestamp.
    string name = 2;
    // [OPTIONAL] 视频描述.
    // [OPTIONAL] [EN] The description of video.
    string description = 3;
    // 生成视频使用的模版的id.
    // [EN] The template id to use when generating the video.
    string template_id = 4;
    // 脚本模版的id.
    // [EN] script template id.
    string script_id = 5;
    // 使用的脚本模版的参数键值对，如果脚本模版没有变量则为空.
    // [EN] The key-value pairs of the using script template. Keep null if the
    // script template has no variables.
    map<string, string> script_parameter = 6;
    // speaker的id.
    // [EN] speaker id.
    string speaker_id = 7;
    // [OPTIONAL] 额外指定语气, 不写使用speaker的默认值.
    // [OPTIONAL] [EN] Additional tone.
    // [OPTIONAL] [EN] Use speaker's default tone if null.
    common.TONE tone = 8;
    // [OPTIONAL] 视频生成结果的回调地址,
    // 如果为空可通过VideoGet接口获取生成后的视频. [OPTIONAL] [EN] The callback
    // URL for the video generation result. [OPTIONAL] [EN] Can also use the
    // VideoGet API to get the generated video.
    string result_callback_url = 9;
    // [INTERNAL] 视频调用方, 如果为空则是WEBUI.
    // [INTERNAL] [EN] The caller of this api, defaut is WEBUI if null.
    common.TASKSOURCE source = 10;
}

message CommiUserVideoNewTaskResponse {
    // 唯一id
    // [EN] UUID
    string id = 1;
    // 状态
    // [EN] Status
    common.TASKSTATUS status = 2;
}

message CommiUserVideoTaskStatusGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 视频的id.
    // [EN] Video id
    string video_id = 2;
}

message CommiUserVideoTaskStatusGetResponse {
    // 视频生成任务的当前状态.
    // [EN] Task status.
    common.TASKSTATUS status = 1;
    // 状态信息
    // [EN] Task status message.
    string message = 2;
    // 生成的剩余时间. 单位:分钟
    // [EN] estimated time of video generation end.
    int64 estimated_time = 3;
}

message CommiUserVideoGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 视频的id.
    // [EN] Video id
    string video_id = 2;
}

message CommiUserVideoGetResponse {
    // 指定的视频
    // [EN] Video object.
    commi.Video video = 1;
}

message CommiUserVideoUpdateRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 要更新的视频id.
    // [EN] UUID of the video need to update.
    string video_id = 2;
    // [OPTIONAL] 更新的视频名称. 若为空则不更新.
    // [OPTIONAL] [EN] New name. Unchanged if empty.
    string name = 3;
    // [OPTIONAL] 更新的视频描述. 若为空则不更新.
    // [OPTIONAL] [EN] New description. Unchanged if empty.
    string description = 4;
}

message CommiUserVideoUpdateResponse {
    // 视频.
    // [EN] Video object.
    commi.Video video = 1;
}

message CommiUserVideoDeleteRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 要删除的视频 id.
    // [EN] The video id needs to be deleted.
    string video_id = 2;
}

message CommiUserVideoDeleteResponse {
}

message CommiUserVideoGenerationUsageListRequest {
    string            user_id    = 1;
    common.TASKSOURCE source     = 2;
    common.TimeRange  time_range = 3;
}

message CommiUserVideoGenerationUsageListResponse {
    repeated commi.VideoGenerationUsage usages = 1;
}

message CommiSendWATIMessageRequest {
    string user_id = 1;
    // WATI API Endpoint
    string endpoint = 2;
    // WATI Access Token
    string access_token = 3;
    // WATI broadcast name
    string broadcast_name = 4;
    // WATI template name
    string template_name = 5;
    // 在 WATI 模板中定义的用于放置视频地址的变量名称
    // The variable name defined in the WATI template for placing share video
    // address.
    string variable_name = 6;

    // receiver message
    repeated common.WatiReceiver receivers = 7;
}

message CommiSendWATIMessageResponse {
    repeated common.Result rets = 1;
}

message CommiSpeakerSampleVideoGetRequest {
    // user_id.
    string user_id = 1;
    // speaker_id.
    string id = 2;
    // template id.
    string template_id = 3;
}

message CommiSpeakerSampleVideoGetResponse {
    string sample_video_address = 1;
}

message CommiUserVideoGetShareUrlRequest {
    string user_id  = 1;
    string video_id = 2;
}

message CommiUserVideoGetShareUrlResponse {
    string share_url = 1;
}

message MovideoVoiceListRequest {
    string               user_id  = 1;
    common.GENDER        gender   = 2;
    movideo.LANGUAGE     language = 3;
    common.RequestPaging paging   = 4;
}

message MovideoVoiceListResponse {
    repeated movideo.Voice voices = 1;
    common.ResponsePaging  paging = 2;
}

message MovideoVoiceGetRequest {
    string user_id = 1;
    string name    = 2;
}

message MovideoVoiceGetResponse {
    movideo.Voice voice = 1;
}

message MovideoUserListVideoRequest {
    string               user_id = 1;
    common.RequestPaging paging  = 2;
}

message MovideoUserListVideoResponse {
    repeated movideo.Video videos = 1;
    common.ResponsePaging  paging = 2;
}

message MovideoUserNewVideoTaskRequest {
    string              user_id      = 1;
    movideo.ORIENTATION orientation  = 2;
    movideo.CATEGORY    category     = 3;
    string              outline      = 4;
    string              voice        = 5;
    int32               duration     = 6;  // 10~60
    bool                add_subtitle = 7;
}

message MovideoUserNewVideoTaskResponse {
    // 唯一id
    // [EN] UUID
    string id = 1;
    // 状态
    // [EN] Status
    common.TASKSTATUS status = 2;
}

message MovideoUserTaskStatusGetRequest {
    // 用户id
    // [EN] user id
    string user_id = 1;
    // 视频的id.
    // [EN] Video id
    string video_id = 2;
}

message MovideoUserTaskStatusGetResponse {
    // 视频生成任务的当前状态.
    // [EN] Task status.
    common.TASKSTATUS status = 1;
    // 状态信息
    // [EN] Task status message.
    string message = 2;
    // 生成的剩余时间. 单位:分钟
    // [EN] estimated time of video generation end.
    int64 estimated_time = 3;
}

message MovideoUserGetVideoRequest {
    string user_id  = 1;
    string video_id = 2;
}

message MovideoUserGetVideoResponse {
    movideo.Video video = 1;
}

message MovideoUserVideoExportTaskNewRequest {
    string           user_id   = 1;
    string           video_id  = 2;
    common.QUALITY   quality   = 3;
    common.WATERMARK watermark = 4;
}

message MovideoUserVideoExportTaskNewResponse {
    string task_id = 1;
}

message MovideoUserVideoExportTaskGetRequest {
    string user_id = 1;
    string task_id = 2;
}

message MovideoUserVideoExportTaskGetResponse {
    common.TASKSTATUS ret           = 1;
    string            message       = 2;
    string            video_address = 3;
}

message MovideoUserUpdateVideoRequest {
    string               user_id   = 1;
    string               video_id  = 2;
    string               title     = 3;
    common.USERFAVOURITE favourite = 4;
}

message MovideoUserUpdateVideoResponse {
    movideo.Video video = 1;
}

message MovideoUserDeleteVideoRequest {
    string user_id  = 1;
    string video_id = 2;
}

message MovideoUserDeleteVideoResponse {
}

message MovideoSendFeedBackRequest {
    string               user_email    = 1;
    string               video_id      = 2;
    string               comment       = 3;
    string               feedback_type = 4;
    common.USERFAVOURITE is_favourite  = 5;
}

message MovideoSendFeedBackResponse {
}