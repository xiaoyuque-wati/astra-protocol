syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";

import "common.proto";
import "commi.proto";

option go_package = "github.com/ClareAI/ai-platform-protocol/api/api-proxy-service";
package wati.ai_platform.protocol.api_proxy_service;

// clang-format off
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "API Proxy Service";
        version: "1.0.0";
    };
};

service APIProxyService {
    // List video templates.
    rpc VideoTemplateList(VideoTemplateListRequest) returns (VideoTemplateListResponse) {
        option (google.api.http) = {
            get: "/v1/video/templates"
        };
    }

    // Get the specified template by ID.
    rpc VideoTemplateGet(VideoTemplateGetRequest) returns (VideoTemplateGetResponse) {
        option (google.api.http) = {
            get: "/v1/video/templates/{template_id}"
        };
    }

    // // 罗列所有的脚本模版.
    // // List all script templates.
    // rpc VideoTemplateScriptList(VideoTemplateScriptListRequest) returns (VideoTemplateScriptListResponse) {
    //     option (google.api.http) = {
    //         get: "/v1/video/templates/{template_id}/scripts"
    //     };
    // }

    // // 获取指定脚本模版.
    // // Get the specified script template by ID.
    // rpc VideoTemplateScriptGet(VideoTemplateScriptGetRequest) returns (VideoTemplateScriptGetResponse) {
    //     option (google.api.http) = {
    //         get: "/v1/video/templates/{template_id}/scripts/{script_id}"
    //     };
    // }

    // List all speakers.
    rpc SpeakerList(SpeakerListRequest) returns (SpeakerListResponse) {
        option (google.api.http) = {
            get: "/v1/speakers"
        };
    }

    // Get the specified speaker by ID.
    rpc SpeakerGet(SpeakerGetRequest) returns (SpeakerGetResponse) {
        option (google.api.http) = {
            get: "/v1/speakers/{id}"
        };
    }

    // List all videos generated by the specified user.
    rpc VideoList(VideoListRequest) returns (VideoListResponse) {
        option (google.api.http) = {
            get: "/v1/videos"
        };
    }

    // Get the specified video by video ID.
    rpc VideoGet(VideoGetRequest) returns (VideoGetResponse) {
        option (google.api.http) = {
            get: "/v1/videos/{video_id}"
        };
    }

    // Create a video generation task.
    rpc VideoTaskNew(VideoNewTaskRequest) returns (VideoNewTaskResponse) {
        option (google.api.http) = {
            post: "/v1/videos"
            body: "*"
        };
    }

    // Check a video generation task status by video ID.
    rpc VideoTaskStatusGet(VideoTaskStatusGetRequest) returns (VideoTaskStatusGetResponse) {
        option (google.api.http) = {
            get: "/v1/videos/{video_id}/status"
        };
    }

    rpc VideoUpdate(VideoUpdateRequest) returns (VideoUpdateResponse) {
        option (google.api.http) = {
            patch: "/v1/videos/{video_id}"
            body: "*"
        };
    }

    rpc VideoDelete(VideoDeleteRequest) returns (VideoDeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/videos/{video_id}"
        };
    }

    rpc SendWATIMessage(SendWATIMessageRequest) returns (SendWATIMessageResponse) {
        option (google.api.http) = {
            post: "/v1/send/wati"
            body: "*"
        };
    }
}

// clang-format on

message VideoTemplateListRequest {
    // Paging.
    common.RequestPaging paging = 1;
    // [OPTIONAL] specific category .
    commi.CATEGORY category = 2;
    // [OPTIONAL] Query name filter.
    common.NameQuery name = 3;
    // [OPTIONAL] User favourite or not.
    common.USERFAVOURITE favourite = 4;
}

message Script {
    // The content of script. The {{`key`}} means variables in the template.
    string content = 1;
    // Details of parameters defined in the script content.
    repeated commi.TemplateScriptParameter parameters = 2;
}

message Template {
    // UUID of template.
    string id = 1;
    // Template name.
    string name = 2;
    // Template description.
    string description = 3;
    // Template category.
    commi.CATEGORY category = 4;
    // Template tags.
    repeated string tags = 6;
    // User favourite or not.
    common.USERFAVOURITE favourite = 7;
    // script of this template
    Script script = 8;

    reserved 9, 30;
    // Create time.
    google.protobuf.Timestamp create_at = 31;
    // Update time.
    google.protobuf.Timestamp update_at = 32;
}

message VideoTemplateListResponse {
    // Template objects.
    repeated Template templates = 1;
    // Paging.
    common.ResponsePaging paging = 2;
}

message VideoTemplateGetRequest {
    // UUID of template.
    string template_id = 1;
}

message VideoTemplateGetResponse {
    // Template object.
    Template template = 1;
}

message VideoTemplateScriptListRequest {
    // UUID of template.
    string template_id = 1;
    // Paging.
    common.RequestPaging paging = 2;
}

message VideoTemplateScriptListResponse {
    // Script template objects.
    repeated commi.TemplateScript scripts = 1;
    // Paging.
    common.ResponsePaging paging = 2;
}

message VideoTemplateScriptGetRequest {
    // UUID of template.
    string template_id = 1;
    // UUID of script template.
    string script_id = 2;
}

message VideoTemplateScriptGetResponse {
    // Script template object.
    commi.TemplateScript script = 1;
}

message SpeakerListRequest {
    // Paging.
    common.RequestPaging paging = 1;
    // [OPTIONAL] Query name filter.
    common.NameQuery name = 2;
    // [OPTIONAL] Language.
    commi.LANGUAGE language = 3;
    // [OPTIONAL] User favourite or not.
    common.USERFAVOURITE favourite = 4;
}

// Speaker represents a speaker's profile used in video templates.
message Speaker {
    // ID of the speaker.
    string id = 1;
    // Name of the speaker.
    string name = 2;
    // Language spoken by the speaker.
    commi.LANGUAGE language = 3;
    // Gender of the speaker.
    common.GENDER gender = 4;
    // Name of an audio sample file for the speaker.
    string audio_sample_name = 5;
    // Default tone used by the speaker.
    common.TONE tone = 6;
    // Indicates whether the speaker is marked as a favourite by the user.
    common.USERFAVOURITE favourite = 7;
    reserved 8, 30;
    // Timestamp when the speaker profile was created.
    google.protobuf.Timestamp create_at = 31;
    // Timestamp when the speaker profile was last updated.
    google.protobuf.Timestamp update_at = 32;
}

message SpeakerListResponse {
    // Speaker objects.
    repeated Speaker speakers = 1;
    // Paging.
    common.ResponsePaging paging = 2;
}

message SpeakerGetRequest {
    // Speaker id.
    string id = 1;
}

message SpeakerGetResponse {
    // Speaker object.
    Speaker speaker = 1;
}

message Video {
    // UUID.
    string id = 1;
    // Name.
    string name = 2;
    // Description.
    string description = 3;
    // Video address. This address is valid for 30 days.
    string video_url = 4;
    // Video duration. Unit: Seconds.
    int32 duration = 5;
    // Video category. Same as template.
    commi.CATEGORY category = 6;
    // The template id that video use.
    string template_id = 7;
    // The speaker id that video use.
    string speaker_id = 8;

    // TODO：后期功能
    reserved 9, 10;
    reserved "script_id";
    // The script template id that video use.
    // string script_id = 10;
    // Script parameter key-value pairs. The key is the name of the parameter
    // defined by the script template. The value is the value of the parameter
    // to be filled into the template.
    map<string, string> script_parameter = 11;
    // Video speaker tone. Use same tone as speaker if not specified.
    common.TONE tone = 12;
    // task status.
    common.TASKSTATUS status = 13;

    reserved 14, 30;
    // Create time.
    google.protobuf.Timestamp create_at = 31;
    // Update time.
    google.protobuf.Timestamp update_at = 32;
}

message VideoListRequest {
    // [OPTIONAL] task status
    common.TASKSTATUS status = 1;
    // [OPTIONAL] is asc(查单词)
    bool is_ascending = 2;
    // [OPTIONAL] category.
    commi.CATEGORY category = 3;
    // [OPTIONAL] Query name filter.
    common.NameQuery name = 4;

    reserved 5, 20;
    // Paging.
    common.RequestPaging paging = 21;
}

message VideoListResponse {
    // Videos.
    repeated Video videos = 1;
    // Paging.
    common.ResponsePaging paging = 2;
}

message VideoNewTaskRequest {
    // [OPTIONAL] Video name.
    // [OPTIONAL] If not specified, it will be generated based on the template
    // name + current timestamp.
    string name = 1;
    // [OPTIONAL] The description of commi.
    string description = 2;
    // The template id to use when generating the commi.
    string template_id = 3;

    reserved 4;
    reserved "script_id";
    // TODO: 后期功能
    // 脚本模版的id.
    // script template id.
    // string script_id = 4;

    // The key-value pairs of the using script template. Keep null if the script
    // template has no variables.
    map<string, string> script_parameter = 5;
    // Additional speaker id.
    // Use template's default speaker id if null.
    string speaker_id = 6;
    // [OPTIONAL] Additional tone.
    // [OPTIONAL] Use speaker's default tone if null.
    common.TONE tone = 7;
    // [OPTIONAL] The callback URL for the video generation result.
    // [OPTIONAL] Can also use the VideoGet API to get the generated commi.
    string result_callback_url = 8;
}

message VideoNewTaskResponse {
    // UUID
    string id = 1;
    // Status
    common.TASKSTATUS status = 2;
}

message VideoTaskStatusGetRequest {
    // Video id
    string video_id = 1;
}

message VideoTaskStatusGetResponse {
    // Task status.
    common.TASKSTATUS status = 1;
    // Task status message.
    string message = 2;
    // estimated time of video generation end.
    int64 estimated_time = 3;
}

message VideoGetRequest {
    // Video id
    string video_id = 1;
}

message VideoGetResponse {
    // Video object.
    Video video = 1;
}

message VideoUpdateRequest {
    // UUID of the video need to update.
    string video_id = 1;
    // [OPTIONAL] New name. Unchanged if empty.
    string name = 2;
    // [OPTIONAL] New description. Unchanged if empty.
    string description = 3;
}

message VideoUpdateResponse {
    // Video object.
    Video video = 1;
}

message VideoDeleteRequest {
    // The video id needs to be deleted.
    string video_id = 1;
}

message VideoDeleteResponse {
}

message WatiCustomParam {
    // variable name.
    string name = 1;
    // variable value.
    string value = 2;
}

message SendWATIMessageRequest {
    // WATI API Endpoint
    string endpoint = 1;
    // WATI Access Token
    string access_token = 2;
    // WATI broadcast name
    string broadcast_name = 3;
    // WATI template name
    string template_name = 4;
    // The variable name defined in the WATI template for placing share video
    // address.
    string variable_name = 5;
    // receiver message
    repeated common.WatiReceiver receivers = 6;
}

message SendWATIMessageResponse {
    repeated common.Result rets = 1;
}