syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "google/protobuf/timestamp.proto";
import "common.proto";
import "commi.proto";
import "movideo.proto";

option go_package = "github.com/ClareAI/ai-platform-protocol/api/user-manager-service";
package wati.ai_platform.protocol.user_manager_service;

// clang-format off
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "User Manager Service";
        version: "1.0.0";
    };
};

// 用户管理服务
service UserManagerService {
    // Login and register
    rpc CommiLoginAndRegister(CommiLoginAndRegisterRequest) returns (CommiLoginAndRegisterResponse) {
        option (google.api.http) = {
            post: "/commi/v1/login"
            body: "*"
        };
    }

    rpc CommiResetPassword(CommiResetPasswordRequest) returns (CommiResetPasswordResponse) {
        option (google.api.http) = {
            post: "/commi/v1/reset_password"
            body: "*"
        };
    }

    rpc CommiUserActive(CommiUserActiveRequest) returns (CommiUserActiveResponse) {
        option (google.api.http) = {
            post: "/commi/v1/active"
            body: "*"
        };
    }

    // Logouts
    rpc CommiLogout(CommiLogoutRequest) returns (CommiLogoutResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/logout"
            body: "*"
        };
    }

    // header的cookies里面带
    rpc CommiUserGet(CommiUserGetRequest) returns (CommiUserGetResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}"
        };
    }

    rpc CommiUserUpdate(CommiUserUpdateRequest) returns (CommiUserUpdateResponse) {
        option (google.api.http) = {
            patch: "/commi/v1/users/{user_id}"
            body: "*"
        };
    }

    rpc CommiUserAPIKeyAction(CommiUserAPIKeyActionRequest) returns (CommiUserAPIKeyActionResponse) {
        option (google.api.http) = {
            post: "/commi/v1/users/{user_id}/api_keys"
            body: "*"
        };
    }

    rpc CommiUserAPIKeyList(CommiUserAPIKeyListRequest) returns (CommiUserAPIKeyListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/api_keys"
        };
    }

    rpc CommiUserCreditUsageList(CommiUserCreditUsageListRequest) returns (CommiUserCreditUsageListResponse) {
        option (google.api.http) = {
            get: "/commi/v1/users/{user_id}/credits/usages"
        };
    }

    rpc CommiBatchUsersAddCredits(CommiBatchUsersAddCreditsRequest) returns (CommiBatchUsersAddCreditsResponse) {
        option (google.api.http) = {
            post: "/commi/v1/credits"
            body: "*"
        };
    }

    rpc CommiUserTaskCreditCost(CommiUserTaskCreditCostRequest) returns (CommiUserTaskCreditCostResponse);

    rpc MovideoUserVerifyToken(MovideoUserVerifyTokenRequest) returns (MovideoUserVerifyTokenResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/users/verify-token"
            body: "*"
        };
    }

    rpc MovideoUserLogout(MovideoUserLogoutRequest) returns (MovideoUserLogoutResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/users/{user_id}/logout"
            body: "*"
        };
    }

    rpc MovideoUserGet(MovideoUserGetRequest) returns (MovideoUserGetResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}"
        };
    }

    rpc MovideoUserUpgrade(MovideoUserUpgradeRequest) returns (MovideoUserUpgradeResponse) {
        option (google.api.http) = {
            patch: "/movideo/v1/users/{user_id}"
        };
    }

    rpc MovideoUserDelete(MovideoUserDeleteRequest) returns (MovideoUserDeleteResponse) {
        option (google.api.http) = {
            delete: "/movideo/v1/users/{user_id}"
        };
    }

    rpc MovideoUserGetUsage(MovideoUserGetUsageRequest) returns (MovideoUserGetUsageResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/balance"
        };
    }

    rpc MovideoUserNewSubscription(MovideoUserNewSubscriptionRequest) returns (MovideoUserNewSubscriptionResponse) {
        option (google.api.http) = {
            post: "/movideo/v1/users/{user_id}/subscribes"
            body: "*"
        };
    }

    rpc MovideoUserListSubscriptions(MovideoUserListSubscriptionsRequest) returns (MovideoUserListSubscriptionsResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/subscribes"
        };
    }

    rpc MovideoUserGetSubscription(MovideoUserGetSubscriptionRequest) returns (MovideoUserGetSubscriptionResponse) {
        option (google.api.http) = {
            get: "/movideo/v1/users/{user_id}/subscribes/{subscription_id}"
        };
    }

    rpc MovideoUserBalanceCost(MovideoUserBalanceCostRequest) returns (MovideoUserBalanceCostResponse);

    rpc MovideoSubscriptionEvent(MovideoSubscriptionEventRequest) returns (MovideoSubscriptionEventResponse);

    rpc UserAuth(UserAuthRequest) returns (UserAuthResponse);
}

// clang-format on

message CommiLoginAndRegisterRequest {
    // 用户来源
    common.USERSOURCE source = 1;
    // logintype
    enum LOGINTYPE {
        UNKNOWN = 0;
        // 密码登录
        PASSWORD = 1;
        // 自注册
        REGISTER = 2;
        // 自注册用户忘记密码
        FORGET_PASSWORD = 3;
    }
    LOGINTYPE login_type = 2;
    // 邮箱
    string email = 3;
    // 密码, 前端明文，后端md5(salt + passwd)
    // 如果是type FORGET_PASSWORD 则是新的密码.
    string password = 4;
    // [optional] 一些额外信息，比如wati的tentetid
    string extra_info = 5;
}

message CommiLoginAndRegisterResponse {
    // 用户id
    string user_id = 1;
    // auth信息
    string auth = 2;
    // [optional] 登录成功的跳转链接
    // 如果是第一次用wati登录和忘记密码，那么redirect
    // url会返回更改密码的页面，如果是已经注册过就会返回mainpage页面
    // 如果是自注册，那么redirect url会返回重新登录页面
    string redirect_url = 3;
}

message CommiResetPasswordRequest {
    string email = 1;
}

message CommiResetPasswordResponse {
}

message CommiUserActiveRequest {
    string email = 1;
}

message CommiUserActiveResponse {
}

message CommiLogoutRequest {
    // 用户id
    string user_id = 1;
}

message CommiLogoutResponse {
}

message CommiUserGetRequest {
    // 用户id
    string user_id = 1;
}

message CommiUserGetResponse {
    // 用户信息
    commi.UserInfo user = 1;
}

message CommiUserUpdateRequest {
    // 用户id
    string user_id = 1;
    // 用户名
    // optional
    string name = 2;
    // 前端明文密码
    // optional
    string password = 3;
    // 电话
    // optional
    string phone = 4;
    // 地址
    // optional
    string location = 5;
    // 语言
    // optional
    string langeuage = 6;
    // 基本信息
    // optional
    string information = 7;
}

message CommiUserUpdateResponse {
    commi.UserInfo user = 1;
}

message UserAuthRequest {
    common.AUTHTYPE type = 1;
    string          auth = 2;
}

message UserAuthResponse {
    // 用户id
    string user_id = 1;
    // 用户类型
    common.USERTYPE type    = 2;
    common.PRODUCT  product = 3;
}

message CommiUserAPIKeyActionRequest {
    string user_id = 1;

    common.APIKEYACTION action = 2;
    // create的时候填api key的名称
    string name = 3;
    // delete和get的时候必填api keyid
    string id = 4;
}

message CommiUserAPIKeyActionResponse {
    // action为delete 的时候返回nil
    commi.APIKeyInfo api_key = 1;
}

message CommiUserAPIKeyListRequest {
    // 创建时间倒序排
    string user_id = 1;
}

message CommiUserAPIKeyListResponse {
    repeated commi.APIKeyInfo keys = 1;
}

message CommiUserCreditUsageListRequest {
    string            user_id = 1;
    common.TASKSOURCE source  = 2;
    // 包括当天
    common.TimeRange range = 3;
}

message CommiUserCreditUsageListResponse {
    repeated commi.CreditUsage usages = 1;
}

message CommiBatchUsersAddCreditsRequest {
    repeated string           user_emails = 1;
    int32                     credits     = 2;
    google.protobuf.Timestamp expire_at   = 3;
}

message CommiBatchUsersAddCreditsResponse {
    repeated common.Result rets = 1;
}

message CommiUserTaskCreditCostRequest {
    string            user_id = 1;
    string            item_id = 2;
    int32             cost    = 3;
    int32             eta     = 4;
    common.TASKSTATUS status  = 5;
    common.TASKSOURCE source  = 6;
}

message CommiUserTaskCreditCostResponse {
}

message MovideoUserVerifyTokenRequest {
    string id_token = 1;
}

message MovideoUserVerifyTokenResponse {
    string user_id     = 1;
    string token       = 2;
    bool   is_new_user = 3;
}

message MovideoUserLogoutRequest {
    string user_id = 1;
}

message MovideoUserLogoutResponse {
}

message MovideoUserGetRequest {
    string user_id = 1;
}

message MovideoUserGetResponse {
    movideo.UserInfo user_info = 1;
}

message MovideoUserUpgradeRequest {
    // not implemented yet.
    string user_id = 1;
}

message MovideoUserUpgradeResponse {
}

message MovideoUserGetUsageRequest {
    string user_id = 1;
}

message MovideoUserGetUsageResponse {
    // current usage this month, unit seconds.
    int64 usage = 1;
    // total usage this month, unit seconds.
    int64 total = 2;
}

message MovideoUserBalanceCostRequest {
    string            user_id = 1;
    string            item_id = 2;
    int64             cost    = 3;
    common.TASKSTATUS status  = 4;
}

message MovideoUserBalanceCostResponse {
}

message MovideoUserDeleteRequest {
    string user_id = 1;
}

message MovideoUserDeleteResponse {
}

message MovideoUserNewSubscriptionRequest {
    // user id.
    string user_id = 1;
    // revenuecat customer id, example: $RCAnonymousID:qwer123scv
    string rc_customer_id = 2;
    // the latestPurchaseDate that revenuecat return.
    google.protobuf.Timestamp purchase_at = 3;
    // user event type.
    common.SUBSCRIPTION_EVENT event = 4;
    // user selected plan.
    common.USERTYPE plan = 5;
}

message MovideoUserNewSubscriptionResponse {
}

message MovideoUserListSubscriptionsRequest {
    string user_id = 1;
}

message MovideoUserListSubscriptionsResponse {
    repeated movideo.SubscriptionInfo subscriptions = 1;
}

message MovideoUserGetSubscriptionRequest {
    string user_id         = 1;
    string subscription_id = 2;
}

message MovideoUserGetSubscriptionResponse {
    movideo.SubscriptionInfo subscription = 1;
}

message MovideoSubscriptionEventRequest {
    string event_message = 1;
}

message MovideoSubscriptionEventResponse {
}