package main

import (
	"fmt"
	"net/http"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

// The entry point of the plugin
func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, file := range plugin.Files {
			if !file.Generate {
				continue
			}
			generateFile(plugin, file)
		}
		return nil
	})
}

// generateFile processes each .proto file and generates the Go file with path constants
func generateFile(plugin *protogen.Plugin, file *protogen.File) {
	// Create a new file to output the generated Go code
	filename := file.GeneratedFilenamePrefix + "_http_paths.pb.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)

	// Write package declaration
	g.P("// Code generated by protoc-gen-api-paths. DO NOT EDIT.")
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("const (")

	// Process each service in the .proto file
	for _, service := range file.Services {
		for _, method := range service.Methods {
			// Check for HTTP annotations
			if opts := method.Desc.Options(); opts != nil {
				ext := proto.GetExtension(opts, annotations.E_Http)
				httpRule := ext.(*annotations.HttpRule)
				// Ignore method without http rule
				if httpRule != nil {
					generatePathConstants(g, service, method, httpRule)
				}

			}
		}
	}

	g.P(")")
}

// generatePathConstants generates Go constants for each HTTP path
func generatePathConstants(g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method, httpRule *annotations.HttpRule) {
	// Get the HTTP path and method
	var httpMethod, httpPath string
	switch httpRule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		httpMethod = http.MethodGet
		httpPath = httpRule.GetGet()
	case *annotations.HttpRule_Post:
		httpMethod = http.MethodPost
		httpPath = httpRule.GetPost()
	case *annotations.HttpRule_Put:
		httpMethod = http.MethodPut
		httpPath = httpRule.GetPut()
	case *annotations.HttpRule_Delete:
		httpMethod = http.MethodDelete
		httpPath = httpRule.GetDelete()
	case *annotations.HttpRule_Patch:
		httpMethod = http.MethodPatch
		httpPath = httpRule.GetPatch()
	}

	// Format the constant name: Service_Method_HTTPMethod
	constName := fmt.Sprintf("%s_%s", method.GoName, strings.ToUpper(httpMethod))

	// Write the constant to the generated file
	g.P(fmt.Sprintf(`    %s = "%s"`, constName, httpPath))
}
