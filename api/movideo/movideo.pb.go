// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: movideo.proto

package movideo

import (
	common "github.com/ClareAI/ai-platform-protocol/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CATEGORY int32

const (
	CATEGORY_UNDEFINED     CATEGORY = 0
	CATEGORY_ADVERTISING   CATEGORY = 1
	CATEGORY_STORY_TELLING CATEGORY = 2
	CATEGORY_INFORMATIVE   CATEGORY = 3
	CATEGORY_ENTERTAINING  CATEGORY = 4
	CATEGORY_PROFESSIONAL  CATEGORY = 5
	CATEGORY_INSPIRING     CATEGORY = 6
)

// Enum value maps for CATEGORY.
var (
	CATEGORY_name = map[int32]string{
		0: "UNDEFINED",
		1: "ADVERTISING",
		2: "STORY_TELLING",
		3: "INFORMATIVE",
		4: "ENTERTAINING",
		5: "PROFESSIONAL",
		6: "INSPIRING",
	}
	CATEGORY_value = map[string]int32{
		"UNDEFINED":     0,
		"ADVERTISING":   1,
		"STORY_TELLING": 2,
		"INFORMATIVE":   3,
		"ENTERTAINING":  4,
		"PROFESSIONAL":  5,
		"INSPIRING":     6,
	}
)

func (x CATEGORY) Enum() *CATEGORY {
	p := new(CATEGORY)
	*p = x
	return p
}

func (x CATEGORY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CATEGORY) Descriptor() protoreflect.EnumDescriptor {
	return file_movideo_proto_enumTypes[0].Descriptor()
}

func (CATEGORY) Type() protoreflect.EnumType {
	return &file_movideo_proto_enumTypes[0]
}

func (x CATEGORY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CATEGORY.Descriptor instead.
func (CATEGORY) EnumDescriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{0}
}

type LANGUAGE int32

const (
	LANGUAGE_UNKNOWN    LANGUAGE = 0
	LANGUAGE_ENGLISH    LANGUAGE = 1
	LANGUAGE_PORTUGUESE LANGUAGE = 2
)

// Enum value maps for LANGUAGE.
var (
	LANGUAGE_name = map[int32]string{
		0: "UNKNOWN",
		1: "ENGLISH",
		2: "PORTUGUESE",
	}
	LANGUAGE_value = map[string]int32{
		"UNKNOWN":    0,
		"ENGLISH":    1,
		"PORTUGUESE": 2,
	}
)

func (x LANGUAGE) Enum() *LANGUAGE {
	p := new(LANGUAGE)
	*p = x
	return p
}

func (x LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_movideo_proto_enumTypes[1].Descriptor()
}

func (LANGUAGE) Type() protoreflect.EnumType {
	return &file_movideo_proto_enumTypes[1]
}

func (x LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LANGUAGE.Descriptor instead.
func (LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{1}
}

type ORIENTATION int32

const (
	ORIENTATION_NOT_SET   ORIENTATION = 0
	ORIENTATION_PORTRAIT  ORIENTATION = 1
	ORIENTATION_LANDSCAPE ORIENTATION = 2
)

// Enum value maps for ORIENTATION.
var (
	ORIENTATION_name = map[int32]string{
		0: "NOT_SET",
		1: "PORTRAIT",
		2: "LANDSCAPE",
	}
	ORIENTATION_value = map[string]int32{
		"NOT_SET":   0,
		"PORTRAIT":  1,
		"LANDSCAPE": 2,
	}
)

func (x ORIENTATION) Enum() *ORIENTATION {
	p := new(ORIENTATION)
	*p = x
	return p
}

func (x ORIENTATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORIENTATION) Descriptor() protoreflect.EnumDescriptor {
	return file_movideo_proto_enumTypes[2].Descriptor()
}

func (ORIENTATION) Type() protoreflect.EnumType {
	return &file_movideo_proto_enumTypes[2]
}

func (x ORIENTATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORIENTATION.Descriptor instead.
func (ORIENTATION) EnumDescriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{2}
}

type Voice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Language    LANGUAGE      `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.movideo.LANGUAGE" json:"language,omitempty"`
	Gender      common.GENDER `protobuf:"varint,4,opt,name=gender,proto3,enum=wati.ai_platform.protocol.common.GENDER" json:"gender,omitempty"`
	Tags        []string      `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	AudioDemo   string        `protobuf:"bytes,6,opt,name=audio_demo,json=audioDemo,proto3" json:"audio_demo,omitempty"`
}

func (x *Voice) Reset() {
	*x = Voice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voice) ProtoMessage() {}

func (x *Voice) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voice.ProtoReflect.Descriptor instead.
func (*Voice) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{0}
}

func (x *Voice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Voice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Voice) GetLanguage() LANGUAGE {
	if x != nil {
		return x.Language
	}
	return LANGUAGE_UNKNOWN
}

func (x *Voice) GetGender() common.GENDER {
	if x != nil {
		return x.Gender
	}
	return common.GENDER(0)
}

func (x *Voice) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Voice) GetAudioDemo() string {
	if x != nil {
		return x.AudioDemo
	}
	return ""
}

type VideoClip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Sentence         string `protobuf:"bytes,2,opt,name=sentence,proto3" json:"sentence,omitempty"`
	ClipUrl          string `protobuf:"bytes,3,opt,name=clip_url,json=clipUrl,proto3" json:"clip_url,omitempty"`
	AudioSegmentUrl  string `protobuf:"bytes,4,opt,name=audio_segment_url,json=audioSegmentUrl,proto3" json:"audio_segment_url,omitempty"`
	VideoDescription string `protobuf:"bytes,5,opt,name=video_description,json=videoDescription,proto3" json:"video_description,omitempty"`
}

func (x *VideoClip) Reset() {
	*x = VideoClip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoClip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoClip) ProtoMessage() {}

func (x *VideoClip) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoClip.ProtoReflect.Descriptor instead.
func (*VideoClip) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{1}
}

func (x *VideoClip) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VideoClip) GetSentence() string {
	if x != nil {
		return x.Sentence
	}
	return ""
}

func (x *VideoClip) GetClipUrl() string {
	if x != nil {
		return x.ClipUrl
	}
	return ""
}

func (x *VideoClip) GetAudioSegmentUrl() string {
	if x != nil {
		return x.AudioSegmentUrl
	}
	return ""
}

func (x *VideoClip) GetVideoDescription() string {
	if x != nil {
		return x.VideoDescription
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status             common.TASKSTATUS      `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	Title              string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"` // generated by llm
	Category           CATEGORY               `protobuf:"varint,4,opt,name=category,proto3,enum=wati.ai_platform.protocol.movideo.CATEGORY" json:"category,omitempty"`
	SourceContent      string                 `protobuf:"bytes,5,opt,name=source_content,json=sourceContent,proto3" json:"source_content,omitempty"`
	VoiceName          string                 `protobuf:"bytes,6,opt,name=voice_name,json=voiceName,proto3" json:"voice_name,omitempty"`
	PreviewVideoUrl    string                 `protobuf:"bytes,7,opt,name=preview_video_url,json=previewVideoUrl,proto3" json:"preview_video_url,omitempty"`
	ThumbnailUrl       string                 `protobuf:"bytes,8,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Duration           int32                  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"` // real video duration.
	VoiceoverWordCount int32                  `protobuf:"varint,10,opt,name=voiceover_word_count,json=voiceoverWordCount,proto3" json:"voiceover_word_count,omitempty"`
	Clips              []*VideoClip           `protobuf:"bytes,11,rep,name=clips,proto3" json:"clips,omitempty"`
	Favourite          common.USERFAVOURITE   `protobuf:"varint,12,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
	CreateAt           *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt           *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{2}
}

func (x *Video) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Video) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *Video) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Video) GetCategory() CATEGORY {
	if x != nil {
		return x.Category
	}
	return CATEGORY_UNDEFINED
}

func (x *Video) GetSourceContent() string {
	if x != nil {
		return x.SourceContent
	}
	return ""
}

func (x *Video) GetVoiceName() string {
	if x != nil {
		return x.VoiceName
	}
	return ""
}

func (x *Video) GetPreviewVideoUrl() string {
	if x != nil {
		return x.PreviewVideoUrl
	}
	return ""
}

func (x *Video) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Video) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Video) GetVoiceoverWordCount() int32 {
	if x != nil {
		return x.VoiceoverWordCount
	}
	return 0
}

func (x *Video) GetClips() []*VideoClip {
	if x != nil {
		return x.Clips
	}
	return nil
}

func (x *Video) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

func (x *Video) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Video) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type VideoGenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// video id.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// content category.
	Category CATEGORY `protobuf:"varint,2,opt,name=category,proto3,enum=wati.ai_platform.protocol.movideo.CATEGORY" json:"category,omitempty"`
	// content outline.
	Outline string `protobuf:"bytes,3,opt,name=outline,proto3" json:"outline,omitempty"`
	// orientation of the video.
	Orientation ORIENTATION `protobuf:"varint,4,opt,name=orientation,proto3,enum=wati.ai_platform.protocol.movideo.ORIENTATION" json:"orientation,omitempty"`
	// elevenlabs voice id
	VoiceId string `protobuf:"bytes,5,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	// voice using language. same string with LANGUAGE type.
	Language LANGUAGE `protobuf:"varint,6,opt,name=language,proto3,enum=wati.ai_platform.protocol.movideo.LANGUAGE" json:"language,omitempty"`
	// video duration which user want to generate.
	Duration int32 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// add subtitle or not.
	AddSubtitle bool `protobuf:"varint,8,opt,name=add_subtitle,json=addSubtitle,proto3" json:"add_subtitle,omitempty"`
}

func (x *VideoGenerateRequest) Reset() {
	*x = VideoGenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGenerateRequest) ProtoMessage() {}

func (x *VideoGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGenerateRequest.ProtoReflect.Descriptor instead.
func (*VideoGenerateRequest) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{3}
}

func (x *VideoGenerateRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoGenerateRequest) GetCategory() CATEGORY {
	if x != nil {
		return x.Category
	}
	return CATEGORY_UNDEFINED
}

func (x *VideoGenerateRequest) GetOutline() string {
	if x != nil {
		return x.Outline
	}
	return ""
}

func (x *VideoGenerateRequest) GetOrientation() ORIENTATION {
	if x != nil {
		return x.Orientation
	}
	return ORIENTATION_NOT_SET
}

func (x *VideoGenerateRequest) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *VideoGenerateRequest) GetLanguage() LANGUAGE {
	if x != nil {
		return x.Language
	}
	return LANGUAGE_UNKNOWN
}

func (x *VideoGenerateRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoGenerateRequest) GetAddSubtitle() bool {
	if x != nil {
		return x.AddSubtitle
	}
	return false
}

type VideoGenerateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video ID.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// task status.
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// error_info
	ErrorInfo string `protobuf:"bytes,3,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	// video title generated by llm.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// preview video object name in a low quality.
	PreviewVideo string `protobuf:"bytes,5,opt,name=preview_video,json=previewVideo,proto3" json:"preview_video,omitempty"`
	// video thumbnail object name.
	Thumbnail string `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// video real duration.
	Duration int32 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// voiceover word count.
	VoiceoverWordCount int32 `protobuf:"varint,8,opt,name=voiceover_word_count,json=voiceoverWordCount,proto3" json:"voiceover_word_count,omitempty"`
}

func (x *VideoGenerateResult) Reset() {
	*x = VideoGenerateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGenerateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGenerateResult) ProtoMessage() {}

func (x *VideoGenerateResult) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGenerateResult.ProtoReflect.Descriptor instead.
func (*VideoGenerateResult) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{4}
}

func (x *VideoGenerateResult) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoGenerateResult) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *VideoGenerateResult) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *VideoGenerateResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VideoGenerateResult) GetPreviewVideo() string {
	if x != nil {
		return x.PreviewVideo
	}
	return ""
}

func (x *VideoGenerateResult) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *VideoGenerateResult) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoGenerateResult) GetVoiceoverWordCount() int32 {
	if x != nil {
		return x.VoiceoverWordCount
	}
	return 0
}

type VideoExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// video quality.
	Quality common.QUALITY `protobuf:"varint,2,opt,name=quality,proto3,enum=wati.ai_platform.protocol.common.QUALITY" json:"quality,omitempty"`
	// video watermark.
	Watermark common.WATERMARK `protobuf:"varint,3,opt,name=watermark,proto3,enum=wati.ai_platform.protocol.common.WATERMARK" json:"watermark,omitempty"`
	// add subtitle or not.
	AddSubtitle bool `protobuf:"varint,4,opt,name=add_subtitle,json=addSubtitle,proto3" json:"add_subtitle,omitempty"`
}

func (x *VideoExportRequest) Reset() {
	*x = VideoExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoExportRequest) ProtoMessage() {}

func (x *VideoExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoExportRequest.ProtoReflect.Descriptor instead.
func (*VideoExportRequest) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{5}
}

func (x *VideoExportRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoExportRequest) GetQuality() common.QUALITY {
	if x != nil {
		return x.Quality
	}
	return common.QUALITY(0)
}

func (x *VideoExportRequest) GetWatermark() common.WATERMARK {
	if x != nil {
		return x.Watermark
	}
	return common.WATERMARK(0)
}

func (x *VideoExportRequest) GetAddSubtitle() bool {
	if x != nil {
		return x.AddSubtitle
	}
	return false
}

type VideoExportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// task status.
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// error_info
	ErrorInfo string `protobuf:"bytes,3,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	// video title generated by llm.
	VideoObject string `protobuf:"bytes,4,opt,name=video_object,json=videoObject,proto3" json:"video_object,omitempty"`
}

func (x *VideoExportResult) Reset() {
	*x = VideoExportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoExportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoExportResult) ProtoMessage() {}

func (x *VideoExportResult) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoExportResult.ProtoReflect.Descriptor instead.
func (*VideoExportResult) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{6}
}

func (x *VideoExportResult) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoExportResult) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *VideoExportResult) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *VideoExportResult) GetVideoObject() string {
	if x != nil {
		return x.VideoObject
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户email
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// 用户类型
	Type common.USERTYPE `protobuf:"varint,3,opt,name=type,proto3,enum=wati.ai_platform.protocol.common.USERTYPE" json:"type,omitempty"`
	// 用户订阅信息
	// 这个接口返回的时候，不带subscription id
	SubscribeInfo *SubscriptionInfo `protobuf:"bytes,4,opt,name=subscribe_info,json=subscribeInfo,proto3" json:"subscribe_info,omitempty"`
	// 创建时间
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 更新时间
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetType() common.USERTYPE {
	if x != nil {
		return x.Type
	}
	return common.USERTYPE(0)
}

func (x *UserInfo) GetSubscribeInfo() *SubscriptionInfo {
	if x != nil {
		return x.SubscribeInfo
	}
	return nil
}

func (x *UserInfo) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *UserInfo) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type SubscriptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status       common.SUBSCRIPTION_STATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.SUBSCRIPTION_STATUS" json:"status,omitempty"`
	ErrorInfo    string                     `protobuf:"bytes,3,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	StartAt      *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	ExperationAt *timestamppb.Timestamp     `protobuf:"bytes,5,opt,name=experation_at,json=experationAt,proto3" json:"experation_at,omitempty"`
}

func (x *SubscriptionInfo) Reset() {
	*x = SubscriptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_movideo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionInfo) ProtoMessage() {}

func (x *SubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_movideo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionInfo.ProtoReflect.Descriptor instead.
func (*SubscriptionInfo) Descriptor() ([]byte, []int) {
	return file_movideo_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriptionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubscriptionInfo) GetStatus() common.SUBSCRIPTION_STATUS {
	if x != nil {
		return x.Status
	}
	return common.SUBSCRIPTION_STATUS(0)
}

func (x *SubscriptionInfo) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *SubscriptionInfo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *SubscriptionInfo) GetExperationAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExperationAt
	}
	return nil
}

var File_movideo_proto protoreflect.FileDescriptor

var file_movideo_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x6d, 0x6f, 0x22,
	0xb1, 0x01, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x05, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x66,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x0d,
	0x10, 0x0e, 0x4a, 0x04, 0x08, 0x1d, 0x10, 0x1e, 0x22, 0x89, 0x03, 0x0a, 0x14, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x50, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53,
	0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xca, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x1d, 0x10, 0x1e, 0x22, 0x88,
	0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x2a, 0x81, 0x01, 0x0a, 0x08, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x54, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x53, 0x50, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x34, 0x0a,
	0x08, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53,
	0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x47, 0x55, 0x45, 0x53,
	0x45, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0b, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x02, 0x42, 0x35, 0x5a, 0x33,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61, 0x72, 0x65,
	0x41, 0x49, 0x2f, 0x61, 0x69, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_movideo_proto_rawDescOnce sync.Once
	file_movideo_proto_rawDescData = file_movideo_proto_rawDesc
)

func file_movideo_proto_rawDescGZIP() []byte {
	file_movideo_proto_rawDescOnce.Do(func() {
		file_movideo_proto_rawDescData = protoimpl.X.CompressGZIP(file_movideo_proto_rawDescData)
	})
	return file_movideo_proto_rawDescData
}

var file_movideo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_movideo_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_movideo_proto_goTypes = []interface{}{
	(CATEGORY)(0),                   // 0: wati.ai_platform.protocol.movideo.CATEGORY
	(LANGUAGE)(0),                   // 1: wati.ai_platform.protocol.movideo.LANGUAGE
	(ORIENTATION)(0),                // 2: wati.ai_platform.protocol.movideo.ORIENTATION
	(*Voice)(nil),                   // 3: wati.ai_platform.protocol.movideo.Voice
	(*VideoClip)(nil),               // 4: wati.ai_platform.protocol.movideo.VideoClip
	(*Video)(nil),                   // 5: wati.ai_platform.protocol.movideo.Video
	(*VideoGenerateRequest)(nil),    // 6: wati.ai_platform.protocol.movideo.VideoGenerateRequest
	(*VideoGenerateResult)(nil),     // 7: wati.ai_platform.protocol.movideo.VideoGenerateResult
	(*VideoExportRequest)(nil),      // 8: wati.ai_platform.protocol.movideo.VideoExportRequest
	(*VideoExportResult)(nil),       // 9: wati.ai_platform.protocol.movideo.VideoExportResult
	(*UserInfo)(nil),                // 10: wati.ai_platform.protocol.movideo.UserInfo
	(*SubscriptionInfo)(nil),        // 11: wati.ai_platform.protocol.movideo.SubscriptionInfo
	(common.GENDER)(0),              // 12: wati.ai_platform.protocol.common.GENDER
	(common.TASKSTATUS)(0),          // 13: wati.ai_platform.protocol.common.TASKSTATUS
	(common.USERFAVOURITE)(0),       // 14: wati.ai_platform.protocol.common.USERFAVOURITE
	(*timestamppb.Timestamp)(nil),   // 15: google.protobuf.Timestamp
	(common.QUALITY)(0),             // 16: wati.ai_platform.protocol.common.QUALITY
	(common.WATERMARK)(0),           // 17: wati.ai_platform.protocol.common.WATERMARK
	(common.USERTYPE)(0),            // 18: wati.ai_platform.protocol.common.USERTYPE
	(common.SUBSCRIPTION_STATUS)(0), // 19: wati.ai_platform.protocol.common.SUBSCRIPTION_STATUS
}
var file_movideo_proto_depIdxs = []int32{
	1,  // 0: wati.ai_platform.protocol.movideo.Voice.language:type_name -> wati.ai_platform.protocol.movideo.LANGUAGE
	12, // 1: wati.ai_platform.protocol.movideo.Voice.gender:type_name -> wati.ai_platform.protocol.common.GENDER
	13, // 2: wati.ai_platform.protocol.movideo.Video.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	0,  // 3: wati.ai_platform.protocol.movideo.Video.category:type_name -> wati.ai_platform.protocol.movideo.CATEGORY
	4,  // 4: wati.ai_platform.protocol.movideo.Video.clips:type_name -> wati.ai_platform.protocol.movideo.VideoClip
	14, // 5: wati.ai_platform.protocol.movideo.Video.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	15, // 6: wati.ai_platform.protocol.movideo.Video.create_at:type_name -> google.protobuf.Timestamp
	15, // 7: wati.ai_platform.protocol.movideo.Video.update_at:type_name -> google.protobuf.Timestamp
	0,  // 8: wati.ai_platform.protocol.movideo.VideoGenerateRequest.category:type_name -> wati.ai_platform.protocol.movideo.CATEGORY
	2,  // 9: wati.ai_platform.protocol.movideo.VideoGenerateRequest.orientation:type_name -> wati.ai_platform.protocol.movideo.ORIENTATION
	1,  // 10: wati.ai_platform.protocol.movideo.VideoGenerateRequest.language:type_name -> wati.ai_platform.protocol.movideo.LANGUAGE
	13, // 11: wati.ai_platform.protocol.movideo.VideoGenerateResult.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	16, // 12: wati.ai_platform.protocol.movideo.VideoExportRequest.quality:type_name -> wati.ai_platform.protocol.common.QUALITY
	17, // 13: wati.ai_platform.protocol.movideo.VideoExportRequest.watermark:type_name -> wati.ai_platform.protocol.common.WATERMARK
	13, // 14: wati.ai_platform.protocol.movideo.VideoExportResult.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	18, // 15: wati.ai_platform.protocol.movideo.UserInfo.type:type_name -> wati.ai_platform.protocol.common.USERTYPE
	11, // 16: wati.ai_platform.protocol.movideo.UserInfo.subscribe_info:type_name -> wati.ai_platform.protocol.movideo.SubscriptionInfo
	15, // 17: wati.ai_platform.protocol.movideo.UserInfo.create_at:type_name -> google.protobuf.Timestamp
	15, // 18: wati.ai_platform.protocol.movideo.UserInfo.update_at:type_name -> google.protobuf.Timestamp
	19, // 19: wati.ai_platform.protocol.movideo.SubscriptionInfo.status:type_name -> wati.ai_platform.protocol.common.SUBSCRIPTION_STATUS
	15, // 20: wati.ai_platform.protocol.movideo.SubscriptionInfo.start_at:type_name -> google.protobuf.Timestamp
	15, // 21: wati.ai_platform.protocol.movideo.SubscriptionInfo.experation_at:type_name -> google.protobuf.Timestamp
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_movideo_proto_init() }
func file_movideo_proto_init() {
	if File_movideo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_movideo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoClip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGenerateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoExportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_movideo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movideo_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_movideo_proto_goTypes,
		DependencyIndexes: file_movideo_proto_depIdxs,
		EnumInfos:         file_movideo_proto_enumTypes,
		MessageInfos:      file_movideo_proto_msgTypes,
	}.Build()
	File_movideo_proto = out.File
	file_movideo_proto_rawDesc = nil
	file_movideo_proto_goTypes = nil
	file_movideo_proto_depIdxs = nil
}
