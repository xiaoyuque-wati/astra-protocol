// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: metrics-server/api.proto

package metrics_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MetricsServer_PushMetric_FullMethodName = "/wati.ai_platform.protocol.metrics_server.MetricsServer/PushMetric"
)

// MetricsServerClient is the client API for MetricsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServerClient interface {
	PushMetric(ctx context.Context, in *PushMetricRequest, opts ...grpc.CallOption) (*PushMetricResponse, error)
}

type metricsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServerClient(cc grpc.ClientConnInterface) MetricsServerClient {
	return &metricsServerClient{cc}
}

func (c *metricsServerClient) PushMetric(ctx context.Context, in *PushMetricRequest, opts ...grpc.CallOption) (*PushMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushMetricResponse)
	err := c.cc.Invoke(ctx, MetricsServer_PushMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServerServer is the server API for MetricsServer service.
// All implementations must embed UnimplementedMetricsServerServer
// for forward compatibility
type MetricsServerServer interface {
	PushMetric(context.Context, *PushMetricRequest) (*PushMetricResponse, error)
	mustEmbedUnimplementedMetricsServerServer()
}

// UnimplementedMetricsServerServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServerServer struct {
}

func (UnimplementedMetricsServerServer) PushMetric(context.Context, *PushMetricRequest) (*PushMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMetric not implemented")
}
func (UnimplementedMetricsServerServer) mustEmbedUnimplementedMetricsServerServer() {}

// UnsafeMetricsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServerServer will
// result in compilation errors.
type UnsafeMetricsServerServer interface {
	mustEmbedUnimplementedMetricsServerServer()
}

func RegisterMetricsServerServer(s grpc.ServiceRegistrar, srv MetricsServerServer) {
	s.RegisterService(&MetricsServer_ServiceDesc, srv)
}

func _MetricsServer_PushMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServerServer).PushMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsServer_PushMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServerServer).PushMetric(ctx, req.(*PushMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsServer_ServiceDesc is the grpc.ServiceDesc for MetricsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wati.ai_platform.protocol.metrics_server.MetricsServer",
	HandlerType: (*MetricsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMetric",
			Handler:    _MetricsServer_PushMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics-server/api.proto",
}
