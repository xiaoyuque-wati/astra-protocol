// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: metrics-server/api.proto

package metrics_server

import (
	commi "github.com/ClareAI/ai-platform-protocol/api/commi"
	common "github.com/ClareAI/ai-platform-protocol/api/common"
	movideo "github.com/ClareAI/ai-platform-protocol/api/movideo"
	task "github.com/ClareAI/ai-platform-protocol/api/task"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACTION int32

const (
	ACTION_UNKNOWN ACTION = 0
	ACTION_ADD     ACTION = 1
	ACTION_UPLOAD  ACTION = 2
)

// Enum value maps for ACTION.
var (
	ACTION_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD",
		2: "UPLOAD",
	}
	ACTION_value = map[string]int32{
		"UNKNOWN": 0,
		"ADD":     1,
		"UPLOAD":  2,
	}
)

func (x ACTION) Enum() *ACTION {
	p := new(ACTION)
	*p = x
	return p
}

func (x ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_server_api_proto_enumTypes[0].Descriptor()
}

func (ACTION) Type() protoreflect.EnumType {
	return &file_metrics_server_api_proto_enumTypes[0]
}

func (x ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION.Descriptor instead.
func (ACTION) EnumDescriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{0}
}

type CommiUserNewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email        string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	RegisterTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
}

func (x *CommiUserNewInfo) Reset() {
	*x = CommiUserNewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserNewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserNewInfo) ProtoMessage() {}

func (x *CommiUserNewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserNewInfo.ProtoReflect.Descriptor instead.
func (*CommiUserNewInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{0}
}

func (x *CommiUserNewInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CommiUserNewInfo) GetRegisterTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RegisterTime
	}
	return nil
}

type CommiUserActiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Id             string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone          string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Country        string                 `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Information    string                 `protobuf:"bytes,6,opt,name=information,proto3" json:"information,omitempty"`
	InitialCredit  float32                `protobuf:"fixed32,7,opt,name=initial_credit,json=initialCredit,proto3" json:"initial_credit,omitempty"`
	Source         common.USERSOURCE      `protobuf:"varint,8,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.USERSOURCE" json:"source,omitempty"`
	FirstLoginTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=first_login_time,json=firstLoginTime,proto3" json:"first_login_time,omitempty"`
}

func (x *CommiUserActiveInfo) Reset() {
	*x = CommiUserActiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserActiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserActiveInfo) ProtoMessage() {}

func (x *CommiUserActiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserActiveInfo.ProtoReflect.Descriptor instead.
func (*CommiUserActiveInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{1}
}

func (x *CommiUserActiveInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CommiUserActiveInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiUserActiveInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiUserActiveInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CommiUserActiveInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CommiUserActiveInfo) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *CommiUserActiveInfo) GetInitialCredit() float32 {
	if x != nil {
		return x.InitialCredit
	}
	return 0
}

func (x *CommiUserActiveInfo) GetSource() common.USERSOURCE {
	if x != nil {
		return x.Source
	}
	return common.USERSOURCE(0)
}

func (x *CommiUserActiveInfo) GetFirstLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstLoginTime
	}
	return nil
}

type CommiVideoGenerationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId         string                 `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoName       string                 `protobuf:"bytes,2,opt,name=video_name,json=videoName,proto3" json:"video_name,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Interval        int32                  `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
	Result          common.TASKSTATUS      `protobuf:"varint,7,opt,name=result,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"result,omitempty"`
	TemplateId      string                 `protobuf:"bytes,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateName    string                 `protobuf:"bytes,9,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	Category        commi.CATEGORY         `protobuf:"varint,10,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	SpeakerId       string                 `protobuf:"bytes,11,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	SpeakerName     string                 `protobuf:"bytes,12,opt,name=speaker_name,json=speakerName,proto3" json:"speaker_name,omitempty"`
	Language        commi.LANGUAGE         `protobuf:"varint,13,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	ScriptWordCount int32                  `protobuf:"varint,14,opt,name=script_word_count,json=scriptWordCount,proto3" json:"script_word_count,omitempty"`
	TemplateScript  string                 `protobuf:"bytes,15,opt,name=template_script,json=templateScript,proto3" json:"template_script,omitempty"`
	Script          string                 `protobuf:"bytes,16,opt,name=script,proto3" json:"script,omitempty"`
	ScriptVariables map[string]string      `protobuf:"bytes,17,rep,name=script_variables,json=scriptVariables,proto3" json:"script_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VideoDuration   int32                  `protobuf:"varint,18,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	Source          common.TASKSOURCE      `protobuf:"varint,19,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.TASKSOURCE" json:"source,omitempty"`
	CreditCost      float32                `protobuf:"fixed32,20,opt,name=credit_cost,json=creditCost,proto3" json:"credit_cost,omitempty"`
}

func (x *CommiVideoGenerationInfo) Reset() {
	*x = CommiVideoGenerationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiVideoGenerationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiVideoGenerationInfo) ProtoMessage() {}

func (x *CommiVideoGenerationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiVideoGenerationInfo.ProtoReflect.Descriptor instead.
func (*CommiVideoGenerationInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{2}
}

func (x *CommiVideoGenerationInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CommiVideoGenerationInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CommiVideoGenerationInfo) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *CommiVideoGenerationInfo) GetResult() common.TASKSTATUS {
	if x != nil {
		return x.Result
	}
	return common.TASKSTATUS(0)
}

func (x *CommiVideoGenerationInfo) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *CommiVideoGenerationInfo) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetLanguage() commi.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return commi.LANGUAGE(0)
}

func (x *CommiVideoGenerationInfo) GetScriptWordCount() int32 {
	if x != nil {
		return x.ScriptWordCount
	}
	return 0
}

func (x *CommiVideoGenerationInfo) GetTemplateScript() string {
	if x != nil {
		return x.TemplateScript
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *CommiVideoGenerationInfo) GetScriptVariables() map[string]string {
	if x != nil {
		return x.ScriptVariables
	}
	return nil
}

func (x *CommiVideoGenerationInfo) GetVideoDuration() int32 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

func (x *CommiVideoGenerationInfo) GetSource() common.TASKSOURCE {
	if x != nil {
		return x.Source
	}
	return common.TASKSOURCE(0)
}

func (x *CommiVideoGenerationInfo) GetCreditCost() float32 {
	if x != nil {
		return x.CreditCost
	}
	return 0
}

type CommiAPIKeyActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApiKeyId   string                 `protobuf:"bytes,2,opt,name=api_key_id,json=apiKeyId,proto3" json:"api_key_id,omitempty"`
	ApiKeyName string                 `protobuf:"bytes,3,opt,name=api_key_name,json=apiKeyName,proto3" json:"api_key_name,omitempty"`
	Action     common.APIKEYACTION    `protobuf:"varint,4,opt,name=action,proto3,enum=wati.ai_platform.protocol.common.APIKEYACTION" json:"action,omitempty"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *CommiAPIKeyActionInfo) Reset() {
	*x = CommiAPIKeyActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiAPIKeyActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiAPIKeyActionInfo) ProtoMessage() {}

func (x *CommiAPIKeyActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiAPIKeyActionInfo.ProtoReflect.Descriptor instead.
func (*CommiAPIKeyActionInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{3}
}

func (x *CommiAPIKeyActionInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiAPIKeyActionInfo) GetApiKeyId() string {
	if x != nil {
		return x.ApiKeyId
	}
	return ""
}

func (x *CommiAPIKeyActionInfo) GetApiKeyName() string {
	if x != nil {
		return x.ApiKeyName
	}
	return ""
}

func (x *CommiAPIKeyActionInfo) GetAction() common.APIKEYACTION {
	if x != nil {
		return x.Action
	}
	return common.APIKEYACTION(0)
}

func (x *CommiAPIKeyActionInfo) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type CommiAPIUsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ApiKeyId       string                 `protobuf:"bytes,2,opt,name=api_key_id,json=apiKeyId,proto3" json:"api_key_id,omitempty"`
	Endpoint       string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Method         string                 `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	StatusCode     int32                  `protobuf:"varint,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage  string                 `protobuf:"bytes,6,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	InvocationTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=invocation_time,json=invocationTime,proto3" json:"invocation_time,omitempty"`
}

func (x *CommiAPIUsageInfo) Reset() {
	*x = CommiAPIUsageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiAPIUsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiAPIUsageInfo) ProtoMessage() {}

func (x *CommiAPIUsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiAPIUsageInfo.ProtoReflect.Descriptor instead.
func (*CommiAPIUsageInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{4}
}

func (x *CommiAPIUsageInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiAPIUsageInfo) GetApiKeyId() string {
	if x != nil {
		return x.ApiKeyId
	}
	return ""
}

func (x *CommiAPIUsageInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CommiAPIUsageInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CommiAPIUsageInfo) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CommiAPIUsageInfo) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *CommiAPIUsageInfo) GetInvocationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InvocationTime
	}
	return nil
}

type CommiVideoShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId           string                 `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	VideoUrl          string                 `protobuf:"bytes,3,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	WatiTemplateName  string                 `protobuf:"bytes,4,opt,name=wati_template_name,json=watiTemplateName,proto3" json:"wati_template_name,omitempty"`
	WatiBroadcastName string                 `protobuf:"bytes,5,opt,name=wati_broadcast_name,json=watiBroadcastName,proto3" json:"wati_broadcast_name,omitempty"`
	WhatsappNumber    string                 `protobuf:"bytes,6,opt,name=whatsapp_number,json=whatsappNumber,proto3" json:"whatsapp_number,omitempty"`
	SendStatusCode    int32                  `protobuf:"varint,7,opt,name=send_status_code,json=sendStatusCode,proto3" json:"send_status_code,omitempty"`
	SendStatusMessage string                 `protobuf:"bytes,8,opt,name=send_status_message,json=sendStatusMessage,proto3" json:"send_status_message,omitempty"`
	SendTime          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
}

func (x *CommiVideoShareInfo) Reset() {
	*x = CommiVideoShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiVideoShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiVideoShareInfo) ProtoMessage() {}

func (x *CommiVideoShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiVideoShareInfo.ProtoReflect.Descriptor instead.
func (*CommiVideoShareInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{5}
}

func (x *CommiVideoShareInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiVideoShareInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *CommiVideoShareInfo) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *CommiVideoShareInfo) GetWatiTemplateName() string {
	if x != nil {
		return x.WatiTemplateName
	}
	return ""
}

func (x *CommiVideoShareInfo) GetWatiBroadcastName() string {
	if x != nil {
		return x.WatiBroadcastName
	}
	return ""
}

func (x *CommiVideoShareInfo) GetWhatsappNumber() string {
	if x != nil {
		return x.WhatsappNumber
	}
	return ""
}

func (x *CommiVideoShareInfo) GetSendStatusCode() int32 {
	if x != nil {
		return x.SendStatusCode
	}
	return 0
}

func (x *CommiVideoShareInfo) GetSendStatusMessage() string {
	if x != nil {
		return x.SendStatusMessage
	}
	return ""
}

func (x *CommiVideoShareInfo) GetSendTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendTime
	}
	return nil
}

type CommiCreditEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Action       common.USERCREDITEVENT `protobuf:"varint,2,opt,name=action,proto3,enum=wati.ai_platform.protocol.common.USERCREDITEVENT" json:"action,omitempty"`
	ItemType     task.ITEMTYPE          `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=wati.ai_platform.protocol.task.ITEMTYPE" json:"item_type,omitempty"`
	ItemId       string                 `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ChangeAmount float32                `protobuf:"fixed32,5,opt,name=change_amount,json=changeAmount,proto3" json:"change_amount,omitempty"`
	Remain       float32                `protobuf:"fixed32,6,opt,name=remain,proto3" json:"remain,omitempty"`
	EventTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *CommiCreditEventInfo) Reset() {
	*x = CommiCreditEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiCreditEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiCreditEventInfo) ProtoMessage() {}

func (x *CommiCreditEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiCreditEventInfo.ProtoReflect.Descriptor instead.
func (*CommiCreditEventInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{6}
}

func (x *CommiCreditEventInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiCreditEventInfo) GetAction() common.USERCREDITEVENT {
	if x != nil {
		return x.Action
	}
	return common.USERCREDITEVENT(0)
}

func (x *CommiCreditEventInfo) GetItemType() task.ITEMTYPE {
	if x != nil {
		return x.ItemType
	}
	return task.ITEMTYPE(0)
}

func (x *CommiCreditEventInfo) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *CommiCreditEventInfo) GetChangeAmount() float32 {
	if x != nil {
		return x.ChangeAmount
	}
	return 0
}

func (x *CommiCreditEventInfo) GetRemain() float32 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *CommiCreditEventInfo) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

type MovideoUserNewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirebaseId   string                 `protobuf:"bytes,2,opt,name=firebase_id,json=firebaseId,proto3" json:"firebase_id,omitempty"`
	Email        string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	RegisterTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
}

func (x *MovideoUserNewInfo) Reset() {
	*x = MovideoUserNewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserNewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserNewInfo) ProtoMessage() {}

func (x *MovideoUserNewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserNewInfo.ProtoReflect.Descriptor instead.
func (*MovideoUserNewInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{7}
}

func (x *MovideoUserNewInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserNewInfo) GetFirebaseId() string {
	if x != nil {
		return x.FirebaseId
	}
	return ""
}

func (x *MovideoUserNewInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MovideoUserNewInfo) GetRegisterTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RegisterTime
	}
	return nil
}

type MovideoVideoGenerationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId     string                 `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Category    movideo.CATEGORY       `protobuf:"varint,3,opt,name=category,proto3,enum=wati.ai_platform.protocol.movideo.CATEGORY" json:"category,omitempty"`
	Orientation movideo.ORIENTATION    `protobuf:"varint,4,opt,name=orientation,proto3,enum=wati.ai_platform.protocol.movideo.ORIENTATION" json:"orientation,omitempty"`
	UserPrompt  string                 `protobuf:"bytes,5,opt,name=user_prompt,json=userPrompt,proto3" json:"user_prompt,omitempty"`
	VoiceName   string                 `protobuf:"bytes,6,opt,name=voice_name,json=voiceName,proto3" json:"voice_name,omitempty"`
	HasSubtitle bool                   `protobuf:"varint,7,opt,name=has_subtitle,json=hasSubtitle,proto3" json:"has_subtitle,omitempty"`
	Duration    int32                  `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Status      common.TASKSTATUS      `protobuf:"varint,9,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	ErrorInfo   string                 `protobuf:"bytes,10,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MovideoVideoGenerationInfo) Reset() {
	*x = MovideoVideoGenerationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVideoGenerationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVideoGenerationInfo) ProtoMessage() {}

func (x *MovideoVideoGenerationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVideoGenerationInfo.ProtoReflect.Descriptor instead.
func (*MovideoVideoGenerationInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{8}
}

func (x *MovideoVideoGenerationInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoVideoGenerationInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoVideoGenerationInfo) GetCategory() movideo.CATEGORY {
	if x != nil {
		return x.Category
	}
	return movideo.CATEGORY(0)
}

func (x *MovideoVideoGenerationInfo) GetOrientation() movideo.ORIENTATION {
	if x != nil {
		return x.Orientation
	}
	return movideo.ORIENTATION(0)
}

func (x *MovideoVideoGenerationInfo) GetUserPrompt() string {
	if x != nil {
		return x.UserPrompt
	}
	return ""
}

func (x *MovideoVideoGenerationInfo) GetVoiceName() string {
	if x != nil {
		return x.VoiceName
	}
	return ""
}

func (x *MovideoVideoGenerationInfo) GetHasSubtitle() bool {
	if x != nil {
		return x.HasSubtitle
	}
	return false
}

func (x *MovideoVideoGenerationInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovideoVideoGenerationInfo) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *MovideoVideoGenerationInfo) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *MovideoVideoGenerationInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MovideoVideoGenerationInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type MovideoVideoExportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId      string                 `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Quality      common.QUALITY         `protobuf:"varint,3,opt,name=quality,proto3,enum=wati.ai_platform.protocol.common.QUALITY" json:"quality,omitempty"`
	Status       common.TASKSTATUS      `protobuf:"varint,4,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	ErrorInfo    string                 `protobuf:"bytes,5,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	TargetObject string                 `protobuf:"bytes,6,opt,name=target_object,json=targetObject,proto3" json:"target_object,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MovideoVideoExportInfo) Reset() {
	*x = MovideoVideoExportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVideoExportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVideoExportInfo) ProtoMessage() {}

func (x *MovideoVideoExportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVideoExportInfo.ProtoReflect.Descriptor instead.
func (*MovideoVideoExportInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{9}
}

func (x *MovideoVideoExportInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoVideoExportInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoVideoExportInfo) GetQuality() common.QUALITY {
	if x != nil {
		return x.Quality
	}
	return common.QUALITY(0)
}

func (x *MovideoVideoExportInfo) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *MovideoVideoExportInfo) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *MovideoVideoExportInfo) GetTargetObject() string {
	if x != nil {
		return x.TargetObject
	}
	return ""
}

func (x *MovideoVideoExportInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MovideoVideoExportInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// passthrough feedback info from frontend to metrics server, only add feedback_time.
type MovideoFeedbackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail    string                 `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	VideoId      string                 `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Comment      string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	FeedbackType string                 `protobuf:"bytes,4,opt,name=feedback_type,json=feedbackType,proto3" json:"feedback_type,omitempty"`
	IsFavourite  common.USERFAVOURITE   `protobuf:"varint,5,opt,name=is_favourite,json=isFavourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"is_favourite,omitempty"`
	FeedbackTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=feedback_time,json=feedbackTime,proto3" json:"feedback_time,omitempty"`
}

func (x *MovideoFeedbackInfo) Reset() {
	*x = MovideoFeedbackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoFeedbackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoFeedbackInfo) ProtoMessage() {}

func (x *MovideoFeedbackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoFeedbackInfo.ProtoReflect.Descriptor instead.
func (*MovideoFeedbackInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{10}
}

func (x *MovideoFeedbackInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *MovideoFeedbackInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoFeedbackInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MovideoFeedbackInfo) GetFeedbackType() string {
	if x != nil {
		return x.FeedbackType
	}
	return ""
}

func (x *MovideoFeedbackInfo) GetIsFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.IsFavourite
	}
	return common.USERFAVOURITE(0)
}

func (x *MovideoFeedbackInfo) GetFeedbackTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FeedbackTime
	}
	return nil
}

type MovideoSubscriptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Plan           common.USERTYPE        `protobuf:"varint,3,opt,name=plan,proto3,enum=wati.ai_platform.protocol.common.USERTYPE" json:"plan,omitempty"`
	CreditBefore   int32                  `protobuf:"varint,4,opt,name=credit_before,json=creditBefore,proto3" json:"credit_before,omitempty"`
	CreditAfter    int32                  `protobuf:"varint,5,opt,name=credit_after,json=creditAfter,proto3" json:"credit_after,omitempty"`
	IsRenew        bool                   `protobuf:"varint,6,opt,name=is_renew,json=isRenew,proto3" json:"is_renew,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *MovideoSubscriptionInfo) Reset() {
	*x = MovideoSubscriptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoSubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoSubscriptionInfo) ProtoMessage() {}

func (x *MovideoSubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoSubscriptionInfo.ProtoReflect.Descriptor instead.
func (*MovideoSubscriptionInfo) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{11}
}

func (x *MovideoSubscriptionInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoSubscriptionInfo) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *MovideoSubscriptionInfo) GetPlan() common.USERTYPE {
	if x != nil {
		return x.Plan
	}
	return common.USERTYPE(0)
}

func (x *MovideoSubscriptionInfo) GetCreditBefore() int32 {
	if x != nil {
		return x.CreditBefore
	}
	return 0
}

func (x *MovideoSubscriptionInfo) GetCreditAfter() int32 {
	if x != nil {
		return x.CreditAfter
	}
	return 0
}

func (x *MovideoSubscriptionInfo) GetIsRenew() bool {
	if x != nil {
		return x.IsRenew
	}
	return false
}

func (x *MovideoSubscriptionInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MovideoSubscriptionInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type MovideoCreditUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId        string                 `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	SubscriptionId string                 `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	CreditBefore   int32                  `protobuf:"varint,4,opt,name=credit_before,json=creditBefore,proto3" json:"credit_before,omitempty"`
	Cost           int32                  `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	CostTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *MovideoCreditUsage) Reset() {
	*x = MovideoCreditUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoCreditUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoCreditUsage) ProtoMessage() {}

func (x *MovideoCreditUsage) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoCreditUsage.ProtoReflect.Descriptor instead.
func (*MovideoCreditUsage) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{12}
}

func (x *MovideoCreditUsage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoCreditUsage) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoCreditUsage) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *MovideoCreditUsage) GetCreditBefore() int32 {
	if x != nil {
		return x.CreditBefore
	}
	return 0
}

func (x *MovideoCreditUsage) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *MovideoCreditUsage) GetCostTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CostTime
	}
	return nil
}

type MovideoSubscriptionCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Plan       common.USERTYPE        `protobuf:"varint,2,opt,name=plan,proto3,enum=wati.ai_platform.protocol.common.USERTYPE" json:"plan,omitempty"`
	Reason     string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	CancelTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
}

func (x *MovideoSubscriptionCancel) Reset() {
	*x = MovideoSubscriptionCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoSubscriptionCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoSubscriptionCancel) ProtoMessage() {}

func (x *MovideoSubscriptionCancel) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoSubscriptionCancel.ProtoReflect.Descriptor instead.
func (*MovideoSubscriptionCancel) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{13}
}

func (x *MovideoSubscriptionCancel) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoSubscriptionCancel) GetPlan() common.USERTYPE {
	if x != nil {
		return x.Plan
	}
	return common.USERTYPE(0)
}

func (x *MovideoSubscriptionCancel) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *MovideoSubscriptionCancel) GetCancelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

type PushMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Action ACTION `protobuf:"varint,2,opt,name=action,proto3,enum=wati.ai_platform.protocol.metrics_server.ACTION" json:"action,omitempty"`
	IsFinished bool               `protobuf:"varint,3,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	Table      common.METRICTABLE `protobuf:"varint,4,opt,name=table,proto3,enum=wati.ai_platform.protocol.common.METRICTABLE" json:"table,omitempty"`
	// Types that are assignable to TableData:
	//
	//	*PushMetricRequest_CommiUserNew
	//	*PushMetricRequest_CommiUserActive
	//	*PushMetricRequest_CommiVideoGenerate
	//	*PushMetricRequest_CommiApiAction
	//	*PushMetricRequest_CommiApiUsage
	//	*PushMetricRequest_CommiVideoShare
	//	*PushMetricRequest_CommiCreditEvent
	//	*PushMetricRequest_MovideoUserNew
	//	*PushMetricRequest_MovideoVideoGenerate
	//	*PushMetricRequest_MovideoVideoExport
	//	*PushMetricRequest_MovideoFeedback
	//	*PushMetricRequest_MovideoSubscription
	//	*PushMetricRequest_MovideoCreditUsage
	//	*PushMetricRequest_MovideoSubscriptionCancel
	TableData isPushMetricRequest_TableData `protobuf_oneof:"table_data"`
}

func (x *PushMetricRequest) Reset() {
	*x = PushMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMetricRequest) ProtoMessage() {}

func (x *PushMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMetricRequest.ProtoReflect.Descriptor instead.
func (*PushMetricRequest) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{14}
}

func (x *PushMetricRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PushMetricRequest) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_UNKNOWN
}

func (x *PushMetricRequest) GetIsFinished() bool {
	if x != nil {
		return x.IsFinished
	}
	return false
}

func (x *PushMetricRequest) GetTable() common.METRICTABLE {
	if x != nil {
		return x.Table
	}
	return common.METRICTABLE(0)
}

func (m *PushMetricRequest) GetTableData() isPushMetricRequest_TableData {
	if m != nil {
		return m.TableData
	}
	return nil
}

func (x *PushMetricRequest) GetCommiUserNew() *CommiUserNewInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiUserNew); ok {
		return x.CommiUserNew
	}
	return nil
}

func (x *PushMetricRequest) GetCommiUserActive() *CommiUserActiveInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiUserActive); ok {
		return x.CommiUserActive
	}
	return nil
}

func (x *PushMetricRequest) GetCommiVideoGenerate() *CommiVideoGenerationInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiVideoGenerate); ok {
		return x.CommiVideoGenerate
	}
	return nil
}

func (x *PushMetricRequest) GetCommiApiAction() *CommiAPIKeyActionInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiApiAction); ok {
		return x.CommiApiAction
	}
	return nil
}

func (x *PushMetricRequest) GetCommiApiUsage() *CommiAPIUsageInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiApiUsage); ok {
		return x.CommiApiUsage
	}
	return nil
}

func (x *PushMetricRequest) GetCommiVideoShare() *CommiVideoShareInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiVideoShare); ok {
		return x.CommiVideoShare
	}
	return nil
}

func (x *PushMetricRequest) GetCommiCreditEvent() *CommiCreditEventInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_CommiCreditEvent); ok {
		return x.CommiCreditEvent
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoUserNew() *MovideoUserNewInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoUserNew); ok {
		return x.MovideoUserNew
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoVideoGenerate() *MovideoVideoGenerationInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoVideoGenerate); ok {
		return x.MovideoVideoGenerate
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoVideoExport() *MovideoVideoExportInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoVideoExport); ok {
		return x.MovideoVideoExport
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoFeedback() *MovideoFeedbackInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoFeedback); ok {
		return x.MovideoFeedback
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoSubscription() *MovideoSubscriptionInfo {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoSubscription); ok {
		return x.MovideoSubscription
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoCreditUsage() *MovideoCreditUsage {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoCreditUsage); ok {
		return x.MovideoCreditUsage
	}
	return nil
}

func (x *PushMetricRequest) GetMovideoSubscriptionCancel() *MovideoSubscriptionCancel {
	if x, ok := x.GetTableData().(*PushMetricRequest_MovideoSubscriptionCancel); ok {
		return x.MovideoSubscriptionCancel
	}
	return nil
}

type isPushMetricRequest_TableData interface {
	isPushMetricRequest_TableData()
}

type PushMetricRequest_CommiUserNew struct {
	CommiUserNew *CommiUserNewInfo `protobuf:"bytes,5,opt,name=commi_user_new,json=commiUserNew,proto3,oneof"`
}

type PushMetricRequest_CommiUserActive struct {
	CommiUserActive *CommiUserActiveInfo `protobuf:"bytes,6,opt,name=commi_user_active,json=commiUserActive,proto3,oneof"`
}

type PushMetricRequest_CommiVideoGenerate struct {
	CommiVideoGenerate *CommiVideoGenerationInfo `protobuf:"bytes,7,opt,name=commi_video_generate,json=commiVideoGenerate,proto3,oneof"`
}

type PushMetricRequest_CommiApiAction struct {
	CommiApiAction *CommiAPIKeyActionInfo `protobuf:"bytes,8,opt,name=commi_api_action,json=commiApiAction,proto3,oneof"`
}

type PushMetricRequest_CommiApiUsage struct {
	CommiApiUsage *CommiAPIUsageInfo `protobuf:"bytes,9,opt,name=commi_api_usage,json=commiApiUsage,proto3,oneof"`
}

type PushMetricRequest_CommiVideoShare struct {
	CommiVideoShare *CommiVideoShareInfo `protobuf:"bytes,10,opt,name=commi_video_share,json=commiVideoShare,proto3,oneof"`
}

type PushMetricRequest_CommiCreditEvent struct {
	CommiCreditEvent *CommiCreditEventInfo `protobuf:"bytes,11,opt,name=commi_credit_event,json=commiCreditEvent,proto3,oneof"`
}

type PushMetricRequest_MovideoUserNew struct {
	MovideoUserNew *MovideoUserNewInfo `protobuf:"bytes,12,opt,name=movideo_user_new,json=movideoUserNew,proto3,oneof"`
}

type PushMetricRequest_MovideoVideoGenerate struct {
	MovideoVideoGenerate *MovideoVideoGenerationInfo `protobuf:"bytes,13,opt,name=movideo_video_generate,json=movideoVideoGenerate,proto3,oneof"`
}

type PushMetricRequest_MovideoVideoExport struct {
	MovideoVideoExport *MovideoVideoExportInfo `protobuf:"bytes,14,opt,name=movideo_video_export,json=movideoVideoExport,proto3,oneof"`
}

type PushMetricRequest_MovideoFeedback struct {
	MovideoFeedback *MovideoFeedbackInfo `protobuf:"bytes,15,opt,name=movideo_feedback,json=movideoFeedback,proto3,oneof"`
}

type PushMetricRequest_MovideoSubscription struct {
	MovideoSubscription *MovideoSubscriptionInfo `protobuf:"bytes,16,opt,name=movideo_subscription,json=movideoSubscription,proto3,oneof"`
}

type PushMetricRequest_MovideoCreditUsage struct {
	MovideoCreditUsage *MovideoCreditUsage `protobuf:"bytes,17,opt,name=movideo_credit_usage,json=movideoCreditUsage,proto3,oneof"`
}

type PushMetricRequest_MovideoSubscriptionCancel struct {
	MovideoSubscriptionCancel *MovideoSubscriptionCancel `protobuf:"bytes,18,opt,name=movideo_subscription_cancel,json=movideoSubscriptionCancel,proto3,oneof"`
}

func (*PushMetricRequest_CommiUserNew) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiUserActive) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiVideoGenerate) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiApiAction) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiApiUsage) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiVideoShare) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_CommiCreditEvent) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoUserNew) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoVideoGenerate) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoVideoExport) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoFeedback) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoSubscription) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoCreditUsage) isPushMetricRequest_TableData() {}

func (*PushMetricRequest_MovideoSubscriptionCancel) isPushMetricRequest_TableData() {}

type PushMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushMetricResponse) Reset() {
	*x = PushMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMetricResponse) ProtoMessage() {}

func (x *PushMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMetricResponse.ProtoReflect.Descriptor instead.
func (*PushMetricResponse) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{15}
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{16}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_server_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_server_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_metrics_server_api_proto_rawDescGZIP(), []int{17}
}

var File_metrics_server_api_proto protoreflect.FileDescriptor

var file_metrics_server_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x08,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x41, 0x50, 0x49, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x61, 0x74, 0x69, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x61, 0x74, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77,
	0x61, 0x74, 0x69, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x61, 0x74, 0x69, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77,
	0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45,
	0x52, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a,
	0x12, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x04, 0x0a, 0x1a, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x53, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x16, 0x4d, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x4d, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45,
	0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0,
	0x02, 0x0a, 0x17, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x97, 0x0e, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x6b, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x76, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x41, 0x70, 0x69, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x65, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x41, 0x50, 0x49, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x41, 0x70,
	0x69, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x7c, 0x0a,
	0x16, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x6d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x6d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x6a, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x76, 0x0a,
	0x14, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x14, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1b, 0x6d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x14, 0x0a,
	0x12, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x2a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x32, 0x99, 0x01, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x87,
	0x01, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3b, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x59, 0x92, 0x41, 0x1a, 0x12, 0x18, 0x0a,
	0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x49, 0x2f, 0x61, 0x69, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metrics_server_api_proto_rawDescOnce sync.Once
	file_metrics_server_api_proto_rawDescData = file_metrics_server_api_proto_rawDesc
)

func file_metrics_server_api_proto_rawDescGZIP() []byte {
	file_metrics_server_api_proto_rawDescOnce.Do(func() {
		file_metrics_server_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_metrics_server_api_proto_rawDescData)
	})
	return file_metrics_server_api_proto_rawDescData
}

var file_metrics_server_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metrics_server_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_metrics_server_api_proto_goTypes = []interface{}{
	(ACTION)(0),                        // 0: wati.ai_platform.protocol.metrics_server.ACTION
	(*CommiUserNewInfo)(nil),           // 1: wati.ai_platform.protocol.metrics_server.CommiUserNewInfo
	(*CommiUserActiveInfo)(nil),        // 2: wati.ai_platform.protocol.metrics_server.CommiUserActiveInfo
	(*CommiVideoGenerationInfo)(nil),   // 3: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo
	(*CommiAPIKeyActionInfo)(nil),      // 4: wati.ai_platform.protocol.metrics_server.CommiAPIKeyActionInfo
	(*CommiAPIUsageInfo)(nil),          // 5: wati.ai_platform.protocol.metrics_server.CommiAPIUsageInfo
	(*CommiVideoShareInfo)(nil),        // 6: wati.ai_platform.protocol.metrics_server.CommiVideoShareInfo
	(*CommiCreditEventInfo)(nil),       // 7: wati.ai_platform.protocol.metrics_server.CommiCreditEventInfo
	(*MovideoUserNewInfo)(nil),         // 8: wati.ai_platform.protocol.metrics_server.MovideoUserNewInfo
	(*MovideoVideoGenerationInfo)(nil), // 9: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo
	(*MovideoVideoExportInfo)(nil),     // 10: wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo
	(*MovideoFeedbackInfo)(nil),        // 11: wati.ai_platform.protocol.metrics_server.MovideoFeedbackInfo
	(*MovideoSubscriptionInfo)(nil),    // 12: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionInfo
	(*MovideoCreditUsage)(nil),         // 13: wati.ai_platform.protocol.metrics_server.MovideoCreditUsage
	(*MovideoSubscriptionCancel)(nil),  // 14: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionCancel
	(*PushMetricRequest)(nil),          // 15: wati.ai_platform.protocol.metrics_server.PushMetricRequest
	(*PushMetricResponse)(nil),         // 16: wati.ai_platform.protocol.metrics_server.PushMetricResponse
	(*HealthCheckRequest)(nil),         // 17: wati.ai_platform.protocol.metrics_server.HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 18: wati.ai_platform.protocol.metrics_server.HealthCheckResponse
	nil,                                // 19: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.ScriptVariablesEntry
	(*timestamppb.Timestamp)(nil),      // 20: google.protobuf.Timestamp
	(common.USERSOURCE)(0),             // 21: wati.ai_platform.protocol.common.USERSOURCE
	(common.TASKSTATUS)(0),             // 22: wati.ai_platform.protocol.common.TASKSTATUS
	(commi.CATEGORY)(0),                // 23: wati.ai_platform.protocol.commi.CATEGORY
	(commi.LANGUAGE)(0),                // 24: wati.ai_platform.protocol.commi.LANGUAGE
	(common.TASKSOURCE)(0),             // 25: wati.ai_platform.protocol.common.TASKSOURCE
	(common.APIKEYACTION)(0),           // 26: wati.ai_platform.protocol.common.APIKEYACTION
	(common.USERCREDITEVENT)(0),        // 27: wati.ai_platform.protocol.common.USERCREDITEVENT
	(task.ITEMTYPE)(0),                 // 28: wati.ai_platform.protocol.task.ITEMTYPE
	(movideo.CATEGORY)(0),              // 29: wati.ai_platform.protocol.movideo.CATEGORY
	(movideo.ORIENTATION)(0),           // 30: wati.ai_platform.protocol.movideo.ORIENTATION
	(common.QUALITY)(0),                // 31: wati.ai_platform.protocol.common.QUALITY
	(common.USERFAVOURITE)(0),          // 32: wati.ai_platform.protocol.common.USERFAVOURITE
	(common.USERTYPE)(0),               // 33: wati.ai_platform.protocol.common.USERTYPE
	(common.METRICTABLE)(0),            // 34: wati.ai_platform.protocol.common.METRICTABLE
}
var file_metrics_server_api_proto_depIdxs = []int32{
	20, // 0: wati.ai_platform.protocol.metrics_server.CommiUserNewInfo.register_time:type_name -> google.protobuf.Timestamp
	21, // 1: wati.ai_platform.protocol.metrics_server.CommiUserActiveInfo.source:type_name -> wati.ai_platform.protocol.common.USERSOURCE
	20, // 2: wati.ai_platform.protocol.metrics_server.CommiUserActiveInfo.first_login_time:type_name -> google.protobuf.Timestamp
	20, // 3: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.start_time:type_name -> google.protobuf.Timestamp
	20, // 4: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.end_time:type_name -> google.protobuf.Timestamp
	22, // 5: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.result:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	23, // 6: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	24, // 7: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	19, // 8: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.script_variables:type_name -> wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.ScriptVariablesEntry
	25, // 9: wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo.source:type_name -> wati.ai_platform.protocol.common.TASKSOURCE
	26, // 10: wati.ai_platform.protocol.metrics_server.CommiAPIKeyActionInfo.action:type_name -> wati.ai_platform.protocol.common.APIKEYACTION
	20, // 11: wati.ai_platform.protocol.metrics_server.CommiAPIKeyActionInfo.time:type_name -> google.protobuf.Timestamp
	20, // 12: wati.ai_platform.protocol.metrics_server.CommiAPIUsageInfo.invocation_time:type_name -> google.protobuf.Timestamp
	20, // 13: wati.ai_platform.protocol.metrics_server.CommiVideoShareInfo.send_time:type_name -> google.protobuf.Timestamp
	27, // 14: wati.ai_platform.protocol.metrics_server.CommiCreditEventInfo.action:type_name -> wati.ai_platform.protocol.common.USERCREDITEVENT
	28, // 15: wati.ai_platform.protocol.metrics_server.CommiCreditEventInfo.item_type:type_name -> wati.ai_platform.protocol.task.ITEMTYPE
	20, // 16: wati.ai_platform.protocol.metrics_server.CommiCreditEventInfo.event_time:type_name -> google.protobuf.Timestamp
	20, // 17: wati.ai_platform.protocol.metrics_server.MovideoUserNewInfo.register_time:type_name -> google.protobuf.Timestamp
	29, // 18: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo.category:type_name -> wati.ai_platform.protocol.movideo.CATEGORY
	30, // 19: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo.orientation:type_name -> wati.ai_platform.protocol.movideo.ORIENTATION
	22, // 20: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	20, // 21: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo.start_time:type_name -> google.protobuf.Timestamp
	20, // 22: wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo.end_time:type_name -> google.protobuf.Timestamp
	31, // 23: wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo.quality:type_name -> wati.ai_platform.protocol.common.QUALITY
	22, // 24: wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	20, // 25: wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo.start_time:type_name -> google.protobuf.Timestamp
	20, // 26: wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo.end_time:type_name -> google.protobuf.Timestamp
	32, // 27: wati.ai_platform.protocol.metrics_server.MovideoFeedbackInfo.is_favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	20, // 28: wati.ai_platform.protocol.metrics_server.MovideoFeedbackInfo.feedback_time:type_name -> google.protobuf.Timestamp
	33, // 29: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionInfo.plan:type_name -> wati.ai_platform.protocol.common.USERTYPE
	20, // 30: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionInfo.start_time:type_name -> google.protobuf.Timestamp
	20, // 31: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionInfo.end_time:type_name -> google.protobuf.Timestamp
	20, // 32: wati.ai_platform.protocol.metrics_server.MovideoCreditUsage.cost_time:type_name -> google.protobuf.Timestamp
	33, // 33: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionCancel.plan:type_name -> wati.ai_platform.protocol.common.USERTYPE
	20, // 34: wati.ai_platform.protocol.metrics_server.MovideoSubscriptionCancel.cancel_time:type_name -> google.protobuf.Timestamp
	0,  // 35: wati.ai_platform.protocol.metrics_server.PushMetricRequest.action:type_name -> wati.ai_platform.protocol.metrics_server.ACTION
	34, // 36: wati.ai_platform.protocol.metrics_server.PushMetricRequest.table:type_name -> wati.ai_platform.protocol.common.METRICTABLE
	1,  // 37: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_user_new:type_name -> wati.ai_platform.protocol.metrics_server.CommiUserNewInfo
	2,  // 38: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_user_active:type_name -> wati.ai_platform.protocol.metrics_server.CommiUserActiveInfo
	3,  // 39: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_video_generate:type_name -> wati.ai_platform.protocol.metrics_server.CommiVideoGenerationInfo
	4,  // 40: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_api_action:type_name -> wati.ai_platform.protocol.metrics_server.CommiAPIKeyActionInfo
	5,  // 41: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_api_usage:type_name -> wati.ai_platform.protocol.metrics_server.CommiAPIUsageInfo
	6,  // 42: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_video_share:type_name -> wati.ai_platform.protocol.metrics_server.CommiVideoShareInfo
	7,  // 43: wati.ai_platform.protocol.metrics_server.PushMetricRequest.commi_credit_event:type_name -> wati.ai_platform.protocol.metrics_server.CommiCreditEventInfo
	8,  // 44: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_user_new:type_name -> wati.ai_platform.protocol.metrics_server.MovideoUserNewInfo
	9,  // 45: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_video_generate:type_name -> wati.ai_platform.protocol.metrics_server.MovideoVideoGenerationInfo
	10, // 46: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_video_export:type_name -> wati.ai_platform.protocol.metrics_server.MovideoVideoExportInfo
	11, // 47: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_feedback:type_name -> wati.ai_platform.protocol.metrics_server.MovideoFeedbackInfo
	12, // 48: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_subscription:type_name -> wati.ai_platform.protocol.metrics_server.MovideoSubscriptionInfo
	13, // 49: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_credit_usage:type_name -> wati.ai_platform.protocol.metrics_server.MovideoCreditUsage
	14, // 50: wati.ai_platform.protocol.metrics_server.PushMetricRequest.movideo_subscription_cancel:type_name -> wati.ai_platform.protocol.metrics_server.MovideoSubscriptionCancel
	15, // 51: wati.ai_platform.protocol.metrics_server.MetricsServer.PushMetric:input_type -> wati.ai_platform.protocol.metrics_server.PushMetricRequest
	16, // 52: wati.ai_platform.protocol.metrics_server.MetricsServer.PushMetric:output_type -> wati.ai_platform.protocol.metrics_server.PushMetricResponse
	52, // [52:53] is the sub-list for method output_type
	51, // [51:52] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_metrics_server_api_proto_init() }
func file_metrics_server_api_proto_init() {
	if File_metrics_server_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metrics_server_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserNewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserActiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiVideoGenerationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiAPIKeyActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiAPIUsageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiVideoShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiCreditEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserNewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVideoGenerationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVideoExportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoFeedbackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoSubscriptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoCreditUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoSubscriptionCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_server_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_metrics_server_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PushMetricRequest_CommiUserNew)(nil),
		(*PushMetricRequest_CommiUserActive)(nil),
		(*PushMetricRequest_CommiVideoGenerate)(nil),
		(*PushMetricRequest_CommiApiAction)(nil),
		(*PushMetricRequest_CommiApiUsage)(nil),
		(*PushMetricRequest_CommiVideoShare)(nil),
		(*PushMetricRequest_CommiCreditEvent)(nil),
		(*PushMetricRequest_MovideoUserNew)(nil),
		(*PushMetricRequest_MovideoVideoGenerate)(nil),
		(*PushMetricRequest_MovideoVideoExport)(nil),
		(*PushMetricRequest_MovideoFeedback)(nil),
		(*PushMetricRequest_MovideoSubscription)(nil),
		(*PushMetricRequest_MovideoCreditUsage)(nil),
		(*PushMetricRequest_MovideoSubscriptionCancel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metrics_server_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metrics_server_api_proto_goTypes,
		DependencyIndexes: file_metrics_server_api_proto_depIdxs,
		EnumInfos:         file_metrics_server_api_proto_enumTypes,
		MessageInfos:      file_metrics_server_api_proto_msgTypes,
	}.Build()
	File_metrics_server_api_proto = out.File
	file_metrics_server_api_proto_rawDesc = nil
	file_metrics_server_api_proto_goTypes = nil
	file_metrics_server_api_proto_depIdxs = nil
}
