// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user-manager-service/api.proto

package user_manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserManagerService_CommiLoginAndRegister_FullMethodName        = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiLoginAndRegister"
	UserManagerService_CommiResetPassword_FullMethodName           = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiResetPassword"
	UserManagerService_CommiUserActive_FullMethodName              = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserActive"
	UserManagerService_CommiLogout_FullMethodName                  = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiLogout"
	UserManagerService_CommiUserGet_FullMethodName                 = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserGet"
	UserManagerService_CommiUserUpdate_FullMethodName              = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserUpdate"
	UserManagerService_CommiUserAPIKeyAction_FullMethodName        = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserAPIKeyAction"
	UserManagerService_CommiUserAPIKeyList_FullMethodName          = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserAPIKeyList"
	UserManagerService_CommiUserCreditUsageList_FullMethodName     = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserCreditUsageList"
	UserManagerService_CommiBatchUsersAddCredits_FullMethodName    = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiBatchUsersAddCredits"
	UserManagerService_CommiUserTaskCreditCost_FullMethodName      = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/CommiUserTaskCreditCost"
	UserManagerService_MovideoUserVerifyToken_FullMethodName       = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserVerifyToken"
	UserManagerService_MovideoUserLogout_FullMethodName            = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserLogout"
	UserManagerService_MovideoUserGet_FullMethodName               = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserGet"
	UserManagerService_MovideoUserUpgrade_FullMethodName           = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserUpgrade"
	UserManagerService_MovideoUserDelete_FullMethodName            = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserDelete"
	UserManagerService_MovideoUserGetUsage_FullMethodName          = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserGetUsage"
	UserManagerService_MovideoUserNewSubscription_FullMethodName   = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserNewSubscription"
	UserManagerService_MovideoUserListSubscriptions_FullMethodName = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserListSubscriptions"
	UserManagerService_MovideoUserGetSubscription_FullMethodName   = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserGetSubscription"
	UserManagerService_MovideoUserBalanceCost_FullMethodName       = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoUserBalanceCost"
	UserManagerService_MovideoSubscriptionEvent_FullMethodName     = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/MovideoSubscriptionEvent"
	UserManagerService_UserAuth_FullMethodName                     = "/wati.ai_platform.protocol.user_manager_service.UserManagerService/UserAuth"
)

// UserManagerServiceClient is the client API for UserManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户管理服务
type UserManagerServiceClient interface {
	// Login and register
	CommiLoginAndRegister(ctx context.Context, in *CommiLoginAndRegisterRequest, opts ...grpc.CallOption) (*CommiLoginAndRegisterResponse, error)
	CommiResetPassword(ctx context.Context, in *CommiResetPasswordRequest, opts ...grpc.CallOption) (*CommiResetPasswordResponse, error)
	CommiUserActive(ctx context.Context, in *CommiUserActiveRequest, opts ...grpc.CallOption) (*CommiUserActiveResponse, error)
	// Logouts
	CommiLogout(ctx context.Context, in *CommiLogoutRequest, opts ...grpc.CallOption) (*CommiLogoutResponse, error)
	// header的cookies里面带
	CommiUserGet(ctx context.Context, in *CommiUserGetRequest, opts ...grpc.CallOption) (*CommiUserGetResponse, error)
	CommiUserUpdate(ctx context.Context, in *CommiUserUpdateRequest, opts ...grpc.CallOption) (*CommiUserUpdateResponse, error)
	CommiUserAPIKeyAction(ctx context.Context, in *CommiUserAPIKeyActionRequest, opts ...grpc.CallOption) (*CommiUserAPIKeyActionResponse, error)
	CommiUserAPIKeyList(ctx context.Context, in *CommiUserAPIKeyListRequest, opts ...grpc.CallOption) (*CommiUserAPIKeyListResponse, error)
	CommiUserCreditUsageList(ctx context.Context, in *CommiUserCreditUsageListRequest, opts ...grpc.CallOption) (*CommiUserCreditUsageListResponse, error)
	CommiBatchUsersAddCredits(ctx context.Context, in *CommiBatchUsersAddCreditsRequest, opts ...grpc.CallOption) (*CommiBatchUsersAddCreditsResponse, error)
	CommiUserTaskCreditCost(ctx context.Context, in *CommiUserTaskCreditCostRequest, opts ...grpc.CallOption) (*CommiUserTaskCreditCostResponse, error)
	MovideoUserVerifyToken(ctx context.Context, in *MovideoUserVerifyTokenRequest, opts ...grpc.CallOption) (*MovideoUserVerifyTokenResponse, error)
	MovideoUserLogout(ctx context.Context, in *MovideoUserLogoutRequest, opts ...grpc.CallOption) (*MovideoUserLogoutResponse, error)
	MovideoUserGet(ctx context.Context, in *MovideoUserGetRequest, opts ...grpc.CallOption) (*MovideoUserGetResponse, error)
	MovideoUserUpgrade(ctx context.Context, in *MovideoUserUpgradeRequest, opts ...grpc.CallOption) (*MovideoUserUpgradeResponse, error)
	MovideoUserDelete(ctx context.Context, in *MovideoUserDeleteRequest, opts ...grpc.CallOption) (*MovideoUserDeleteResponse, error)
	MovideoUserGetUsage(ctx context.Context, in *MovideoUserGetUsageRequest, opts ...grpc.CallOption) (*MovideoUserGetUsageResponse, error)
	MovideoUserNewSubscription(ctx context.Context, in *MovideoUserNewSubscriptionRequest, opts ...grpc.CallOption) (*MovideoUserNewSubscriptionResponse, error)
	MovideoUserListSubscriptions(ctx context.Context, in *MovideoUserListSubscriptionsRequest, opts ...grpc.CallOption) (*MovideoUserListSubscriptionsResponse, error)
	MovideoUserGetSubscription(ctx context.Context, in *MovideoUserGetSubscriptionRequest, opts ...grpc.CallOption) (*MovideoUserGetSubscriptionResponse, error)
	MovideoUserBalanceCost(ctx context.Context, in *MovideoUserBalanceCostRequest, opts ...grpc.CallOption) (*MovideoUserBalanceCostResponse, error)
	MovideoSubscriptionEvent(ctx context.Context, in *MovideoSubscriptionEventRequest, opts ...grpc.CallOption) (*MovideoSubscriptionEventResponse, error)
	UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
}

type userManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerServiceClient(cc grpc.ClientConnInterface) UserManagerServiceClient {
	return &userManagerServiceClient{cc}
}

func (c *userManagerServiceClient) CommiLoginAndRegister(ctx context.Context, in *CommiLoginAndRegisterRequest, opts ...grpc.CallOption) (*CommiLoginAndRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiLoginAndRegisterResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiLoginAndRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiResetPassword(ctx context.Context, in *CommiResetPasswordRequest, opts ...grpc.CallOption) (*CommiResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiResetPasswordResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserActive(ctx context.Context, in *CommiUserActiveRequest, opts ...grpc.CallOption) (*CommiUserActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserActiveResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiLogout(ctx context.Context, in *CommiLogoutRequest, opts ...grpc.CallOption) (*CommiLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiLogoutResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserGet(ctx context.Context, in *CommiUserGetRequest, opts ...grpc.CallOption) (*CommiUserGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserGetResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserUpdate(ctx context.Context, in *CommiUserUpdateRequest, opts ...grpc.CallOption) (*CommiUserUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserUpdateResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserAPIKeyAction(ctx context.Context, in *CommiUserAPIKeyActionRequest, opts ...grpc.CallOption) (*CommiUserAPIKeyActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserAPIKeyActionResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserAPIKeyAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserAPIKeyList(ctx context.Context, in *CommiUserAPIKeyListRequest, opts ...grpc.CallOption) (*CommiUserAPIKeyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserAPIKeyListResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserAPIKeyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserCreditUsageList(ctx context.Context, in *CommiUserCreditUsageListRequest, opts ...grpc.CallOption) (*CommiUserCreditUsageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserCreditUsageListResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserCreditUsageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiBatchUsersAddCredits(ctx context.Context, in *CommiBatchUsersAddCreditsRequest, opts ...grpc.CallOption) (*CommiBatchUsersAddCreditsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiBatchUsersAddCreditsResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiBatchUsersAddCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) CommiUserTaskCreditCost(ctx context.Context, in *CommiUserTaskCreditCostRequest, opts ...grpc.CallOption) (*CommiUserTaskCreditCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserTaskCreditCostResponse)
	err := c.cc.Invoke(ctx, UserManagerService_CommiUserTaskCreditCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserVerifyToken(ctx context.Context, in *MovideoUserVerifyTokenRequest, opts ...grpc.CallOption) (*MovideoUserVerifyTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserVerifyTokenResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserVerifyToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserLogout(ctx context.Context, in *MovideoUserLogoutRequest, opts ...grpc.CallOption) (*MovideoUserLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserLogoutResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserGet(ctx context.Context, in *MovideoUserGetRequest, opts ...grpc.CallOption) (*MovideoUserGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserGetResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserUpgrade(ctx context.Context, in *MovideoUserUpgradeRequest, opts ...grpc.CallOption) (*MovideoUserUpgradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserUpgradeResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserUpgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserDelete(ctx context.Context, in *MovideoUserDeleteRequest, opts ...grpc.CallOption) (*MovideoUserDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserDeleteResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserGetUsage(ctx context.Context, in *MovideoUserGetUsageRequest, opts ...grpc.CallOption) (*MovideoUserGetUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserGetUsageResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserGetUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserNewSubscription(ctx context.Context, in *MovideoUserNewSubscriptionRequest, opts ...grpc.CallOption) (*MovideoUserNewSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserNewSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserNewSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserListSubscriptions(ctx context.Context, in *MovideoUserListSubscriptionsRequest, opts ...grpc.CallOption) (*MovideoUserListSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserListSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserGetSubscription(ctx context.Context, in *MovideoUserGetSubscriptionRequest, opts ...grpc.CallOption) (*MovideoUserGetSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserGetSubscriptionResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserGetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoUserBalanceCost(ctx context.Context, in *MovideoUserBalanceCostRequest, opts ...grpc.CallOption) (*MovideoUserBalanceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserBalanceCostResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoUserBalanceCost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) MovideoSubscriptionEvent(ctx context.Context, in *MovideoSubscriptionEventRequest, opts ...grpc.CallOption) (*MovideoSubscriptionEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoSubscriptionEventResponse)
	err := c.cc.Invoke(ctx, UserManagerService_MovideoSubscriptionEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerServiceClient) UserAuth(ctx context.Context, in *UserAuthRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, UserManagerService_UserAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServiceServer is the server API for UserManagerService service.
// All implementations must embed UnimplementedUserManagerServiceServer
// for forward compatibility
//
// 用户管理服务
type UserManagerServiceServer interface {
	// Login and register
	CommiLoginAndRegister(context.Context, *CommiLoginAndRegisterRequest) (*CommiLoginAndRegisterResponse, error)
	CommiResetPassword(context.Context, *CommiResetPasswordRequest) (*CommiResetPasswordResponse, error)
	CommiUserActive(context.Context, *CommiUserActiveRequest) (*CommiUserActiveResponse, error)
	// Logouts
	CommiLogout(context.Context, *CommiLogoutRequest) (*CommiLogoutResponse, error)
	// header的cookies里面带
	CommiUserGet(context.Context, *CommiUserGetRequest) (*CommiUserGetResponse, error)
	CommiUserUpdate(context.Context, *CommiUserUpdateRequest) (*CommiUserUpdateResponse, error)
	CommiUserAPIKeyAction(context.Context, *CommiUserAPIKeyActionRequest) (*CommiUserAPIKeyActionResponse, error)
	CommiUserAPIKeyList(context.Context, *CommiUserAPIKeyListRequest) (*CommiUserAPIKeyListResponse, error)
	CommiUserCreditUsageList(context.Context, *CommiUserCreditUsageListRequest) (*CommiUserCreditUsageListResponse, error)
	CommiBatchUsersAddCredits(context.Context, *CommiBatchUsersAddCreditsRequest) (*CommiBatchUsersAddCreditsResponse, error)
	CommiUserTaskCreditCost(context.Context, *CommiUserTaskCreditCostRequest) (*CommiUserTaskCreditCostResponse, error)
	MovideoUserVerifyToken(context.Context, *MovideoUserVerifyTokenRequest) (*MovideoUserVerifyTokenResponse, error)
	MovideoUserLogout(context.Context, *MovideoUserLogoutRequest) (*MovideoUserLogoutResponse, error)
	MovideoUserGet(context.Context, *MovideoUserGetRequest) (*MovideoUserGetResponse, error)
	MovideoUserUpgrade(context.Context, *MovideoUserUpgradeRequest) (*MovideoUserUpgradeResponse, error)
	MovideoUserDelete(context.Context, *MovideoUserDeleteRequest) (*MovideoUserDeleteResponse, error)
	MovideoUserGetUsage(context.Context, *MovideoUserGetUsageRequest) (*MovideoUserGetUsageResponse, error)
	MovideoUserNewSubscription(context.Context, *MovideoUserNewSubscriptionRequest) (*MovideoUserNewSubscriptionResponse, error)
	MovideoUserListSubscriptions(context.Context, *MovideoUserListSubscriptionsRequest) (*MovideoUserListSubscriptionsResponse, error)
	MovideoUserGetSubscription(context.Context, *MovideoUserGetSubscriptionRequest) (*MovideoUserGetSubscriptionResponse, error)
	MovideoUserBalanceCost(context.Context, *MovideoUserBalanceCostRequest) (*MovideoUserBalanceCostResponse, error)
	MovideoSubscriptionEvent(context.Context, *MovideoSubscriptionEventRequest) (*MovideoSubscriptionEventResponse, error)
	UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error)
	mustEmbedUnimplementedUserManagerServiceServer()
}

// UnimplementedUserManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServiceServer struct {
}

func (UnimplementedUserManagerServiceServer) CommiLoginAndRegister(context.Context, *CommiLoginAndRegisterRequest) (*CommiLoginAndRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiLoginAndRegister not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiResetPassword(context.Context, *CommiResetPasswordRequest) (*CommiResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiResetPassword not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserActive(context.Context, *CommiUserActiveRequest) (*CommiUserActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserActive not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiLogout(context.Context, *CommiLogoutRequest) (*CommiLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiLogout not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserGet(context.Context, *CommiUserGetRequest) (*CommiUserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserGet not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserUpdate(context.Context, *CommiUserUpdateRequest) (*CommiUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserUpdate not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserAPIKeyAction(context.Context, *CommiUserAPIKeyActionRequest) (*CommiUserAPIKeyActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserAPIKeyAction not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserAPIKeyList(context.Context, *CommiUserAPIKeyListRequest) (*CommiUserAPIKeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserAPIKeyList not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserCreditUsageList(context.Context, *CommiUserCreditUsageListRequest) (*CommiUserCreditUsageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserCreditUsageList not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiBatchUsersAddCredits(context.Context, *CommiBatchUsersAddCreditsRequest) (*CommiBatchUsersAddCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiBatchUsersAddCredits not implemented")
}
func (UnimplementedUserManagerServiceServer) CommiUserTaskCreditCost(context.Context, *CommiUserTaskCreditCostRequest) (*CommiUserTaskCreditCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserTaskCreditCost not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserVerifyToken(context.Context, *MovideoUserVerifyTokenRequest) (*MovideoUserVerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserVerifyToken not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserLogout(context.Context, *MovideoUserLogoutRequest) (*MovideoUserLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserLogout not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserGet(context.Context, *MovideoUserGetRequest) (*MovideoUserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserGet not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserUpgrade(context.Context, *MovideoUserUpgradeRequest) (*MovideoUserUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserUpgrade not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserDelete(context.Context, *MovideoUserDeleteRequest) (*MovideoUserDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserDelete not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserGetUsage(context.Context, *MovideoUserGetUsageRequest) (*MovideoUserGetUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserGetUsage not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserNewSubscription(context.Context, *MovideoUserNewSubscriptionRequest) (*MovideoUserNewSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserNewSubscription not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserListSubscriptions(context.Context, *MovideoUserListSubscriptionsRequest) (*MovideoUserListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserListSubscriptions not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserGetSubscription(context.Context, *MovideoUserGetSubscriptionRequest) (*MovideoUserGetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserGetSubscription not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoUserBalanceCost(context.Context, *MovideoUserBalanceCostRequest) (*MovideoUserBalanceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserBalanceCost not implemented")
}
func (UnimplementedUserManagerServiceServer) MovideoSubscriptionEvent(context.Context, *MovideoSubscriptionEventRequest) (*MovideoSubscriptionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoSubscriptionEvent not implemented")
}
func (UnimplementedUserManagerServiceServer) UserAuth(context.Context, *UserAuthRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuth not implemented")
}
func (UnimplementedUserManagerServiceServer) mustEmbedUnimplementedUserManagerServiceServer() {}

// UnsafeUserManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServiceServer will
// result in compilation errors.
type UnsafeUserManagerServiceServer interface {
	mustEmbedUnimplementedUserManagerServiceServer()
}

func RegisterUserManagerServiceServer(s grpc.ServiceRegistrar, srv UserManagerServiceServer) {
	s.RegisterService(&UserManagerService_ServiceDesc, srv)
}

func _UserManagerService_CommiLoginAndRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiLoginAndRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiLoginAndRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiLoginAndRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiLoginAndRegister(ctx, req.(*CommiLoginAndRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiResetPassword(ctx, req.(*CommiResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserActive(ctx, req.(*CommiUserActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiLogout(ctx, req.(*CommiLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserGet(ctx, req.(*CommiUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserUpdate(ctx, req.(*CommiUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserAPIKeyAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserAPIKeyActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserAPIKeyAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserAPIKeyAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserAPIKeyAction(ctx, req.(*CommiUserAPIKeyActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserAPIKeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserAPIKeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserAPIKeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserAPIKeyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserAPIKeyList(ctx, req.(*CommiUserAPIKeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserCreditUsageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserCreditUsageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserCreditUsageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserCreditUsageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserCreditUsageList(ctx, req.(*CommiUserCreditUsageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiBatchUsersAddCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiBatchUsersAddCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiBatchUsersAddCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiBatchUsersAddCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiBatchUsersAddCredits(ctx, req.(*CommiBatchUsersAddCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_CommiUserTaskCreditCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserTaskCreditCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).CommiUserTaskCreditCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_CommiUserTaskCreditCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).CommiUserTaskCreditCost(ctx, req.(*CommiUserTaskCreditCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserVerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserVerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserVerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserVerifyToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserVerifyToken(ctx, req.(*MovideoUserVerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserLogout(ctx, req.(*MovideoUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserGet(ctx, req.(*MovideoUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserUpgrade(ctx, req.(*MovideoUserUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserDelete(ctx, req.(*MovideoUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserGetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserGetUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserGetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserGetUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserGetUsage(ctx, req.(*MovideoUserGetUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserNewSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserNewSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserNewSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserNewSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserNewSubscription(ctx, req.(*MovideoUserNewSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserListSubscriptions(ctx, req.(*MovideoUserListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserGetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserGetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserGetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserGetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserGetSubscription(ctx, req.(*MovideoUserGetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoUserBalanceCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserBalanceCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoUserBalanceCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoUserBalanceCost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoUserBalanceCost(ctx, req.(*MovideoUserBalanceCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_MovideoSubscriptionEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoSubscriptionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).MovideoSubscriptionEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_MovideoSubscriptionEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).MovideoSubscriptionEvent(ctx, req.(*MovideoSubscriptionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagerService_UserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServiceServer).UserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagerService_UserAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServiceServer).UserAuth(ctx, req.(*UserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagerService_ServiceDesc is the grpc.ServiceDesc for UserManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wati.ai_platform.protocol.user_manager_service.UserManagerService",
	HandlerType: (*UserManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommiLoginAndRegister",
			Handler:    _UserManagerService_CommiLoginAndRegister_Handler,
		},
		{
			MethodName: "CommiResetPassword",
			Handler:    _UserManagerService_CommiResetPassword_Handler,
		},
		{
			MethodName: "CommiUserActive",
			Handler:    _UserManagerService_CommiUserActive_Handler,
		},
		{
			MethodName: "CommiLogout",
			Handler:    _UserManagerService_CommiLogout_Handler,
		},
		{
			MethodName: "CommiUserGet",
			Handler:    _UserManagerService_CommiUserGet_Handler,
		},
		{
			MethodName: "CommiUserUpdate",
			Handler:    _UserManagerService_CommiUserUpdate_Handler,
		},
		{
			MethodName: "CommiUserAPIKeyAction",
			Handler:    _UserManagerService_CommiUserAPIKeyAction_Handler,
		},
		{
			MethodName: "CommiUserAPIKeyList",
			Handler:    _UserManagerService_CommiUserAPIKeyList_Handler,
		},
		{
			MethodName: "CommiUserCreditUsageList",
			Handler:    _UserManagerService_CommiUserCreditUsageList_Handler,
		},
		{
			MethodName: "CommiBatchUsersAddCredits",
			Handler:    _UserManagerService_CommiBatchUsersAddCredits_Handler,
		},
		{
			MethodName: "CommiUserTaskCreditCost",
			Handler:    _UserManagerService_CommiUserTaskCreditCost_Handler,
		},
		{
			MethodName: "MovideoUserVerifyToken",
			Handler:    _UserManagerService_MovideoUserVerifyToken_Handler,
		},
		{
			MethodName: "MovideoUserLogout",
			Handler:    _UserManagerService_MovideoUserLogout_Handler,
		},
		{
			MethodName: "MovideoUserGet",
			Handler:    _UserManagerService_MovideoUserGet_Handler,
		},
		{
			MethodName: "MovideoUserUpgrade",
			Handler:    _UserManagerService_MovideoUserUpgrade_Handler,
		},
		{
			MethodName: "MovideoUserDelete",
			Handler:    _UserManagerService_MovideoUserDelete_Handler,
		},
		{
			MethodName: "MovideoUserGetUsage",
			Handler:    _UserManagerService_MovideoUserGetUsage_Handler,
		},
		{
			MethodName: "MovideoUserNewSubscription",
			Handler:    _UserManagerService_MovideoUserNewSubscription_Handler,
		},
		{
			MethodName: "MovideoUserListSubscriptions",
			Handler:    _UserManagerService_MovideoUserListSubscriptions_Handler,
		},
		{
			MethodName: "MovideoUserGetSubscription",
			Handler:    _UserManagerService_MovideoUserGetSubscription_Handler,
		},
		{
			MethodName: "MovideoUserBalanceCost",
			Handler:    _UserManagerService_MovideoUserBalanceCost_Handler,
		},
		{
			MethodName: "MovideoSubscriptionEvent",
			Handler:    _UserManagerService_MovideoSubscriptionEvent_Handler,
		},
		{
			MethodName: "UserAuth",
			Handler:    _UserManagerService_UserAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-manager-service/api.proto",
}
