// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: content-manager-service/api.proto

package content_manager_service

import (
	commi "github.com/ClareAI/ai-platform-protocol/api/commi"
	common "github.com/ClareAI/ai-platform-protocol/api/common"
	movideo "github.com/ClareAI/ai-platform-protocol/api/movideo"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommiTemplateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 分页信息.
	// [EN] Paging.
	Paging *common.RequestPaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	// [OPTIONAL] 指定模版类型.
	// [OPTIONAL] [EN] specific category .
	Category commi.CATEGORY `protobuf:"varint,3,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// [OPTIONAL] 查询名称过滤方式.
	// [OPTIONAL] [EN] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] 当前用户是否喜欢
	// [OPTIONAL] [EN] User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,5,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *CommiTemplateListRequest) Reset() {
	*x = CommiTemplateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateListRequest) ProtoMessage() {}

func (x *CommiTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateListRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{0}
}

func (x *CommiTemplateListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CommiTemplateListRequest) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *CommiTemplateListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommiTemplateListRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type CommiTemplateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模版对象.
	// [EN] CommiTemplate objects.
	Templates []*commi.Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	// 分页信息.
	// [EN] Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiTemplateListResponse) Reset() {
	*x = CommiTemplateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateListResponse) ProtoMessage() {}

func (x *CommiTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateListResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{1}
}

func (x *CommiTemplateListResponse) GetTemplates() []*commi.Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *CommiTemplateListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiTemplateGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiTemplateGetRequest) Reset() {
	*x = CommiTemplateGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateGetRequest) ProtoMessage() {}

func (x *CommiTemplateGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateGetRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{2}
}

func (x *CommiTemplateGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiTemplateGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模版对象.
	// [EN] CommiTemplate object.
	Template *commi.Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CommiTemplateGetResponse) Reset() {
	*x = CommiTemplateGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateGetResponse) ProtoMessage() {}

func (x *CommiTemplateGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateGetResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{3}
}

func (x *CommiTemplateGetResponse) GetTemplate() *commi.Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CommiTemplateNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版名称.
	// [EN] CommiTemplate objects.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// [可选] 模版描述.
	// [EN] [Optional] CommiTemplate description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 模版类别.
	// The Category of template.
	Category commi.CATEGORY `protobuf:"varint,4,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// [可选] 标签
	// [EN] [Optional] Tags of template.
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// 模版预览图名字，需要预先上传.
	// [EN] Thumbnail path. Supports web address and local path
	Thumbnail string `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *CommiTemplateNewRequest) Reset() {
	*x = CommiTemplateNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateNewRequest) ProtoMessage() {}

func (x *CommiTemplateNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateNewRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateNewRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{4}
}

func (x *CommiTemplateNewRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateNewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiTemplateNewRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommiTemplateNewRequest) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *CommiTemplateNewRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CommiTemplateNewRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type CommiTemplateNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 模版.
	// [EN] CommiTemplate object.
	Template *commi.Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CommiTemplateNewResponse) Reset() {
	*x = CommiTemplateNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateNewResponse) ProtoMessage() {}

func (x *CommiTemplateNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateNewResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateNewResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{5}
}

func (x *CommiTemplateNewResponse) GetTemplate() *commi.Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CommiTemplateUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 要更新的模版id.
	// [EN] The template uuid to be updated.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// [Optional] 更新的名称. 若为空则不变.
	// [Optional] [EN] New name. Unchanged if empty.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// [Optional] 更新的描述. 若为空则不变.
	// [Optional] [EN] New description. Unchanged if empty.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// [Optional] 更新的tags. 全量. 若为空则不变.
	// [Optional] [EN] All new tags. Unchanged if empty.
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// [Optional] 更新的图片的地址. 若为空则不变.
	// [Optional] [EN] New thumbnail. Supports web address and local path. Unchanged if empty.
	Thumbnail string `protobuf:"bytes,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// [Optional] 设置是否喜欢. 为空不变. 1不喜欢, 2喜欢
	// [Optional] [EN] Set user favourite optional.
	Favourite common.USERFAVOURITE `protobuf:"varint,7,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *CommiTemplateUpdateRequest) Reset() {
	*x = CommiTemplateUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateUpdateRequest) ProtoMessage() {}

func (x *CommiTemplateUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateUpdateRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateUpdateRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{6}
}

func (x *CommiTemplateUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiTemplateUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiTemplateUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommiTemplateUpdateRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CommiTemplateUpdateRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *CommiTemplateUpdateRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type CommiTemplateUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新后的template
	// [EN] New template object.
	Template *commi.Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CommiTemplateUpdateResponse) Reset() {
	*x = CommiTemplateUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateUpdateResponse) ProtoMessage() {}

func (x *CommiTemplateUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateUpdateResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateUpdateResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{7}
}

func (x *CommiTemplateUpdateResponse) GetTemplate() *commi.Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type CommiTemplateDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 要删除的模版id.
	// [EN] The template id needs to be deleted.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiTemplateDeleteRequest) Reset() {
	*x = CommiTemplateDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateDeleteRequest) ProtoMessage() {}

func (x *CommiTemplateDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateDeleteRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateDeleteRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{8}
}

func (x *CommiTemplateDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiTemplateDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommiTemplateDeleteResponse) Reset() {
	*x = CommiTemplateDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateDeleteResponse) ProtoMessage() {}

func (x *CommiTemplateDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateDeleteResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateDeleteResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{9}
}

type CommiTemplateScriptListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 分页.
	// [EN] Paging.
	Paging *common.RequestPaging `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiTemplateScriptListRequest) Reset() {
	*x = CommiTemplateScriptListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptListRequest) ProtoMessage() {}

func (x *CommiTemplateScriptListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptListRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{10}
}

func (x *CommiTemplateScriptListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateScriptListRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiTemplateScriptListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiTemplateScriptListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 脚本模版.
	// [EN] Script template objects.
	Scripts []*commi.TemplateScript `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
	// 分页.
	// [EN] Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiTemplateScriptListResponse) Reset() {
	*x = CommiTemplateScriptListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptListResponse) ProtoMessage() {}

func (x *CommiTemplateScriptListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptListResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{11}
}

func (x *CommiTemplateScriptListResponse) GetScripts() []*commi.TemplateScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *CommiTemplateScriptListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiTemplateScriptGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 要获取的脚本模版id.
	// [EN] UUID of script template.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiTemplateScriptGetRequest) Reset() {
	*x = CommiTemplateScriptGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptGetRequest) ProtoMessage() {}

func (x *CommiTemplateScriptGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptGetRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{12}
}

func (x *CommiTemplateScriptGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateScriptGetRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiTemplateScriptGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiTemplateScriptGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 脚本模版.
	// [EN] Script template object.
	Script *commi.TemplateScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *CommiTemplateScriptGetResponse) Reset() {
	*x = CommiTemplateScriptGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptGetResponse) ProtoMessage() {}

func (x *CommiTemplateScriptGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptGetResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{13}
}

func (x *CommiTemplateScriptGetResponse) GetScript() *commi.TemplateScript {
	if x != nil {
		return x.Script
	}
	return nil
}

type CommiTemplateScriptNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 脚本模版的内容. 使用{{`key`}}来标识模版中的变量.
	// key的值需要和`CommiTemplateScriptParameter`中的key一致.
	// [EN] The content of script template. Use {{`key`}} to mark variables in the template.
	// [EN] The content of key needs to be the same as the key name in the `CommiTemplateScriptParameter,
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 脚本模版参数，需要与脚本模版内容中的变量标识的数量保持一致.
	// 如果脚本模版内容里面没有变量标识，可不写.
	// [EN] The parameter of script template.
	// [EN] The number of parameters should be the same as the number of variable marks in the script template content.
	// [EN] Omit it if no marks in the script template content.
	Parameters []*commi.TemplateScriptParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CommiTemplateScriptNewRequest) Reset() {
	*x = CommiTemplateScriptNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptNewRequest) ProtoMessage() {}

func (x *CommiTemplateScriptNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptNewRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptNewRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{14}
}

func (x *CommiTemplateScriptNewRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateScriptNewRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiTemplateScriptNewRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommiTemplateScriptNewRequest) GetParameters() []*commi.TemplateScriptParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CommiTemplateScriptNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 脚本模版.
	// [EN] Script template objects.
	Script *commi.TemplateScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *CommiTemplateScriptNewResponse) Reset() {
	*x = CommiTemplateScriptNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptNewResponse) ProtoMessage() {}

func (x *CommiTemplateScriptNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptNewResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptNewResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{15}
}

func (x *CommiTemplateScriptNewResponse) GetScript() *commi.TemplateScript {
	if x != nil {
		return x.Script
	}
	return nil
}

type CommiTemplateScriptUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 要更新的脚本模版id.
	// [EN] UUID of the script template need to update.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// [OPTIONAL] 脚本模版内容. 若为空则不变.
	// [OPTIONAL] New content.
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// [OPTIONAL] 脚本模版参数, content为空时无效.
	// [OPTIONAL] 需要与脚本模版内容中的变量标识的数量保持一致.
	// [OPTIONAL] 如果脚本模版内容里面没有变量标识，可不写.
	// [OPTIONAL] [EN] The parameter of new content. Invalid if content is empty.
	// [OPTIONAL] [EN] The number of parameters should be the same as the number of variable marks in the script template content.
	// [OPTIONAL] [EN] Omit it if no marks in the script template content.
	Parameters []*commi.TemplateScriptParameter `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CommiTemplateScriptUpdateRequest) Reset() {
	*x = CommiTemplateScriptUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptUpdateRequest) ProtoMessage() {}

func (x *CommiTemplateScriptUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptUpdateRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptUpdateRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{16}
}

func (x *CommiTemplateScriptUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateScriptUpdateRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiTemplateScriptUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiTemplateScriptUpdateRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommiTemplateScriptUpdateRequest) GetParameters() []*commi.TemplateScriptParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CommiTemplateScriptUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 新的脚本模版.
	// [EN] New script template.
	Script *commi.TemplateScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *CommiTemplateScriptUpdateResponse) Reset() {
	*x = CommiTemplateScriptUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptUpdateResponse) ProtoMessage() {}

func (x *CommiTemplateScriptUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptUpdateResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptUpdateResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{17}
}

func (x *CommiTemplateScriptUpdateResponse) GetScript() *commi.TemplateScript {
	if x != nil {
		return x.Script
	}
	return nil
}

type CommiTemplateScriptDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 模版的唯一id.
	// [EN] UUID of template.
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 要删除的脚本模版id.
	// [EN] The script template id needs to be deleted.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiTemplateScriptDeleteRequest) Reset() {
	*x = CommiTemplateScriptDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptDeleteRequest) ProtoMessage() {}

func (x *CommiTemplateScriptDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptDeleteRequest.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptDeleteRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{18}
}

func (x *CommiTemplateScriptDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiTemplateScriptDeleteRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiTemplateScriptDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiTemplateScriptDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommiTemplateScriptDeleteResponse) Reset() {
	*x = CommiTemplateScriptDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiTemplateScriptDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiTemplateScriptDeleteResponse) ProtoMessage() {}

func (x *CommiTemplateScriptDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiTemplateScriptDeleteResponse.ProtoReflect.Descriptor instead.
func (*CommiTemplateScriptDeleteResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{19}
}

type CommiSpeakerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 分页.
	// [EN] Paging.
	Paging *common.RequestPaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
	// [OPTIONAL] 查询名称过滤方式.
	// [OPTIONAL] [EN] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] 语言.
	// [OPTIONAL] [EN] Language.
	Language commi.LANGUAGE `protobuf:"varint,4,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// [OPTIONAL] 当前用户是否喜欢
	// [OPTIONAL] [EN] User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,5,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *CommiSpeakerListRequest) Reset() {
	*x = CommiSpeakerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerListRequest) ProtoMessage() {}

func (x *CommiSpeakerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerListRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{20}
}

func (x *CommiSpeakerListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CommiSpeakerListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommiSpeakerListRequest) GetLanguage() commi.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return commi.LANGUAGE(0)
}

func (x *CommiSpeakerListRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type CommiSpeakerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// speakers.
	// [EN] CommiSpeaker objects.
	Speakers []*commi.Speaker `protobuf:"bytes,1,rep,name=speakers,proto3" json:"speakers,omitempty"`
	// 分页.
	// [EN] Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiSpeakerListResponse) Reset() {
	*x = CommiSpeakerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerListResponse) ProtoMessage() {}

func (x *CommiSpeakerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerListResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{21}
}

func (x *CommiSpeakerListResponse) GetSpeakers() []*commi.Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *CommiSpeakerListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiSpeakerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// CommiSpeaker id.
	// [EN] CommiSpeaker id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiSpeakerGetRequest) Reset() {
	*x = CommiSpeakerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerGetRequest) ProtoMessage() {}

func (x *CommiSpeakerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerGetRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{22}
}

func (x *CommiSpeakerGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiSpeakerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommiSpeaker.
	// [EN] CommiSpeaker object.
	Speaker *commi.Speaker `protobuf:"bytes,1,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *CommiSpeakerGetResponse) Reset() {
	*x = CommiSpeakerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerGetResponse) ProtoMessage() {}

func (x *CommiSpeakerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerGetResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{23}
}

func (x *CommiSpeakerGetResponse) GetSpeaker() *commi.Speaker {
	if x != nil {
		return x.Speaker
	}
	return nil
}

type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 头像文件名字.
	// [EN] Thumbnail name.
	ThumbnailName string `protobuf:"bytes,1,opt,name=thumbnail_name,json=thumbnailName,proto3" json:"thumbnail_name,omitempty"`
	// 用于生成AI speaker的名字.
	// [OPTIONAL][EN] Sample video name for generating AI speaker.
	SampleVideoName string `protobuf:"bytes,2,opt,name=sample_video_name,json=sampleVideoName,proto3" json:"sample_video_name,omitempty"`
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{24}
}

func (x *Avatar) GetThumbnailName() string {
	if x != nil {
		return x.ThumbnailName
	}
	return ""
}

func (x *Avatar) GetSampleVideoName() string {
	if x != nil {
		return x.SampleVideoName
	}
	return ""
}

type CommiSpeakerNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 名字.
	// [EN] Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 语言.
	// [EN] Spoken language.
	Language commi.LANGUAGE `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// 性别.
	// [EN] CommiSpeaker gender.
	Gender common.GENDER `protobuf:"varint,4,opt,name=gender,proto3,enum=wati.ai_platform.protocol.common.GENDER" json:"gender,omitempty"`
	// 音频示例文件名称.
	// [EN] audio sample address for generating AI speaker audio.
	SampleAudioName string `protobuf:"bytes,5,opt,name=sample_audio_name,json=sampleAudioName,proto3" json:"sample_audio_name,omitempty"`
	// 默认头像信息.
	// [EN] Default avatar infomation.
	DefaultAvatar *Avatar `protobuf:"bytes,6,opt,name=default_avatar,json=defaultAvatar,proto3" json:"default_avatar,omitempty"`
	// 默认语气.
	// [EN] Default tone.
	DefaultTone common.TONE `protobuf:"varint,7,opt,name=default_tone,json=defaultTone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"default_tone,omitempty"`
}

func (x *CommiSpeakerNewRequest) Reset() {
	*x = CommiSpeakerNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerNewRequest) ProtoMessage() {}

func (x *CommiSpeakerNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerNewRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerNewRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{25}
}

func (x *CommiSpeakerNewRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerNewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiSpeakerNewRequest) GetLanguage() commi.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return commi.LANGUAGE(0)
}

func (x *CommiSpeakerNewRequest) GetGender() common.GENDER {
	if x != nil {
		return x.Gender
	}
	return common.GENDER(0)
}

func (x *CommiSpeakerNewRequest) GetSampleAudioName() string {
	if x != nil {
		return x.SampleAudioName
	}
	return ""
}

func (x *CommiSpeakerNewRequest) GetDefaultAvatar() *Avatar {
	if x != nil {
		return x.DefaultAvatar
	}
	return nil
}

func (x *CommiSpeakerNewRequest) GetDefaultTone() common.TONE {
	if x != nil {
		return x.DefaultTone
	}
	return common.TONE(0)
}

type CommiSpeakerNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommiSpeaker
	// [EN] CommiSpeaker object.
	Speaker *commi.Speaker `protobuf:"bytes,1,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *CommiSpeakerNewResponse) Reset() {
	*x = CommiSpeakerNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerNewResponse) ProtoMessage() {}

func (x *CommiSpeakerNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerNewResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerNewResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{26}
}

func (x *CommiSpeakerNewResponse) GetSpeaker() *commi.Speaker {
	if x != nil {
		return x.Speaker
	}
	return nil
}

type CommiSpeakerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 需要更新的speaker id.
	// [EN] UUID of the speaker need to update.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// [OPTIONAL] 要更新的默认语气
	// [OPTIONAL] [EN] Default tone need to update.
	DefaultTone common.TONE `protobuf:"varint,3,opt,name=default_tone,json=defaultTone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"default_tone,omitempty"`
	// [OPTIONAL] 当前用户是否喜欢
	// [OPTIONAL] [EN] User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,4,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *CommiSpeakerUpdateRequest) Reset() {
	*x = CommiSpeakerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerUpdateRequest) ProtoMessage() {}

func (x *CommiSpeakerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerUpdateRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{27}
}

func (x *CommiSpeakerUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiSpeakerUpdateRequest) GetDefaultTone() common.TONE {
	if x != nil {
		return x.DefaultTone
	}
	return common.TONE(0)
}

func (x *CommiSpeakerUpdateRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type CommiSpeakerUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommiSpeaker.
	// [EN] CommiSpeaker object.
	Speaker *commi.Speaker `protobuf:"bytes,1,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *CommiSpeakerUpdateResponse) Reset() {
	*x = CommiSpeakerUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerUpdateResponse) ProtoMessage() {}

func (x *CommiSpeakerUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerUpdateResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerUpdateResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{28}
}

func (x *CommiSpeakerUpdateResponse) GetSpeaker() *commi.Speaker {
	if x != nil {
		return x.Speaker
	}
	return nil
}

type CommiSpeakerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 要删除的 CommiSpeaker id.
	// [EN] The speaker id needs to be deleted.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommiSpeakerDeleteRequest) Reset() {
	*x = CommiSpeakerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerDeleteRequest) ProtoMessage() {}

func (x *CommiSpeakerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerDeleteRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{29}
}

func (x *CommiSpeakerDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommiSpeakerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommiSpeakerDeleteResponse) Reset() {
	*x = CommiSpeakerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerDeleteResponse) ProtoMessage() {}

func (x *CommiSpeakerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerDeleteResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{30}
}

type CommiUserVideoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// [OPTIONAL] 任务状态.
	// [OPTIONAL] [EN] task status
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// [OPTIONAL] 是否时间升序. 默认降序结果.
	// [OPTIONAL] [EN] is asc(查单词)
	IsAscending bool `protobuf:"varint,3,opt,name=is_ascending,json=isAscending,proto3" json:"is_ascending,omitempty"`
	// [OPTIONAL] 类型.
	// [OPTIONAL] [EN] category.
	Category commi.CATEGORY `protobuf:"varint,4,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// [OPTIONAL] 查询名称过滤方式.
	// [OPTIONAL] [EN] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 分页信息.
	// [EN] Paging.
	Paging *common.RequestPaging `protobuf:"bytes,20,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiUserVideoListRequest) Reset() {
	*x = CommiUserVideoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoListRequest) ProtoMessage() {}

func (x *CommiUserVideoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoListRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{31}
}

func (x *CommiUserVideoListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoListRequest) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *CommiUserVideoListRequest) GetIsAscending() bool {
	if x != nil {
		return x.IsAscending
	}
	return false
}

func (x *CommiUserVideoListRequest) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *CommiUserVideoListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommiUserVideoListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiUserVideoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 生成的视频.
	// [EN] Videos.
	Videos []*commi.Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	// 分页信息.
	// [EN] Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *CommiUserVideoListResponse) Reset() {
	*x = CommiUserVideoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoListResponse) ProtoMessage() {}

func (x *CommiUserVideoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoListResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{32}
}

func (x *CommiUserVideoListResponse) GetVideos() []*commi.Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *CommiUserVideoListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type CommiUserVideoNewTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// [OPTIONAL] 视频名称，如果没写的话会根据template名称和时间戳自动生成.
	// [OPTIONAL] [EN] Video name.
	// [OPTIONAL] [EN] If not specified, it will be generated based on the template name + current timestamp.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] 视频描述.
	// [OPTIONAL] [EN] The description of video.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 生成视频使用的模版的id.
	// [EN] The template id to use when generating the video.
	TemplateId string `protobuf:"bytes,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// 脚本模版的id.
	// [EN] script template id.
	ScriptId string `protobuf:"bytes,5,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	// 使用的脚本模版的参数键值对，如果脚本模版没有变量则为空.
	// [EN] The key-value pairs of the using script template. Keep null if the script template has no variables.
	ScriptParameter map[string]string `protobuf:"bytes,6,rep,name=script_parameter,json=scriptParameter,proto3" json:"script_parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// speaker的id.
	// [EN] speaker id.
	SpeakerId string `protobuf:"bytes,7,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// [OPTIONAL] 额外指定语气, 不写使用speaker的默认值.
	// [OPTIONAL] [EN] Additional tone.
	// [OPTIONAL] [EN] Use speaker's default tone if null.
	Tone common.TONE `protobuf:"varint,8,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// [OPTIONAL] 视频生成结果的回调地址, 如果为空可通过VideoGet接口获取生成后的视频.
	// [OPTIONAL] [EN] The callback URL for the video generation result.
	// [OPTIONAL] [EN] Can also use the VideoGet API to get the generated video.
	ResultCallbackUrl string `protobuf:"bytes,9,opt,name=result_callback_url,json=resultCallbackUrl,proto3" json:"result_callback_url,omitempty"`
	// [INTERNAL] 视频调用方, 如果为空则是WEBUI.
	// [INTERNAL] [EN] The caller of this api, defaut is WEBUI if null.
	Source common.TASKSOURCE `protobuf:"varint,10,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.TASKSOURCE" json:"source,omitempty"`
}

func (x *CommiUserVideoNewTaskRequest) Reset() {
	*x = CommiUserVideoNewTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoNewTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoNewTaskRequest) ProtoMessage() {}

func (x *CommiUserVideoNewTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoNewTaskRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoNewTaskRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{33}
}

func (x *CommiUserVideoNewTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetScriptParameter() map[string]string {
	if x != nil {
		return x.ScriptParameter
	}
	return nil
}

func (x *CommiUserVideoNewTaskRequest) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *CommiUserVideoNewTaskRequest) GetResultCallbackUrl() string {
	if x != nil {
		return x.ResultCallbackUrl
	}
	return ""
}

func (x *CommiUserVideoNewTaskRequest) GetSource() common.TASKSOURCE {
	if x != nil {
		return x.Source
	}
	return common.TASKSOURCE(0)
}

type CommiUserVideoNewTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一id
	// [EN] UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 状态
	// [EN] Status
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
}

func (x *CommiUserVideoNewTaskResponse) Reset() {
	*x = CommiUserVideoNewTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoNewTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoNewTaskResponse) ProtoMessage() {}

func (x *CommiUserVideoNewTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoNewTaskResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoNewTaskResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{34}
}

func (x *CommiUserVideoNewTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiUserVideoNewTaskResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

type CommiUserVideoTaskStatusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 视频的id.
	// [EN] Video id
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *CommiUserVideoTaskStatusGetRequest) Reset() {
	*x = CommiUserVideoTaskStatusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoTaskStatusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoTaskStatusGetRequest) ProtoMessage() {}

func (x *CommiUserVideoTaskStatusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoTaskStatusGetRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoTaskStatusGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{35}
}

func (x *CommiUserVideoTaskStatusGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoTaskStatusGetRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type CommiUserVideoTaskStatusGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频生成任务的当前状态.
	// [EN] Task status.
	Status common.TASKSTATUS `protobuf:"varint,1,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// 状态信息
	// [EN] Task status message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 生成的剩余时间. 单位:分钟
	// [EN] estimated time of video generation end.
	EstimatedTime int64 `protobuf:"varint,3,opt,name=estimated_time,json=estimatedTime,proto3" json:"estimated_time,omitempty"`
}

func (x *CommiUserVideoTaskStatusGetResponse) Reset() {
	*x = CommiUserVideoTaskStatusGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoTaskStatusGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoTaskStatusGetResponse) ProtoMessage() {}

func (x *CommiUserVideoTaskStatusGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoTaskStatusGetResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoTaskStatusGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{36}
}

func (x *CommiUserVideoTaskStatusGetResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *CommiUserVideoTaskStatusGetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommiUserVideoTaskStatusGetResponse) GetEstimatedTime() int64 {
	if x != nil {
		return x.EstimatedTime
	}
	return 0
}

type CommiUserVideoGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 视频的id.
	// [EN] Video id
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *CommiUserVideoGetRequest) Reset() {
	*x = CommiUserVideoGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGetRequest) ProtoMessage() {}

func (x *CommiUserVideoGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGetRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{37}
}

func (x *CommiUserVideoGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoGetRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type CommiUserVideoGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指定的视频
	// [EN] Video object.
	Video *commi.Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *CommiUserVideoGetResponse) Reset() {
	*x = CommiUserVideoGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGetResponse) ProtoMessage() {}

func (x *CommiUserVideoGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGetResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{38}
}

func (x *CommiUserVideoGetResponse) GetVideo() *commi.Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type CommiUserVideoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 要更新的视频id.
	// [EN] UUID of the video need to update.
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// [OPTIONAL] 更新的视频名称. 若为空则不更新.
	// [OPTIONAL] [EN] New name. Unchanged if empty.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] 更新的视频描述. 若为空则不更新.
	// [OPTIONAL] [EN] New description. Unchanged if empty.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CommiUserVideoUpdateRequest) Reset() {
	*x = CommiUserVideoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoUpdateRequest) ProtoMessage() {}

func (x *CommiUserVideoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoUpdateRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{39}
}

func (x *CommiUserVideoUpdateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoUpdateRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *CommiUserVideoUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommiUserVideoUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CommiUserVideoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频.
	// [EN] Video object.
	Video *commi.Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *CommiUserVideoUpdateResponse) Reset() {
	*x = CommiUserVideoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoUpdateResponse) ProtoMessage() {}

func (x *CommiUserVideoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoUpdateResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{40}
}

func (x *CommiUserVideoUpdateResponse) GetVideo() *commi.Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type CommiUserVideoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 要删除的视频 id.
	// [EN] The video id needs to be deleted.
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *CommiUserVideoDeleteRequest) Reset() {
	*x = CommiUserVideoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoDeleteRequest) ProtoMessage() {}

func (x *CommiUserVideoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoDeleteRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{41}
}

func (x *CommiUserVideoDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoDeleteRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type CommiUserVideoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommiUserVideoDeleteResponse) Reset() {
	*x = CommiUserVideoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoDeleteResponse) ProtoMessage() {}

func (x *CommiUserVideoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoDeleteResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{42}
}

type CommiUserVideoGenerationUsageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Source    common.TASKSOURCE `protobuf:"varint,2,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.TASKSOURCE" json:"source,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *CommiUserVideoGenerationUsageListRequest) Reset() {
	*x = CommiUserVideoGenerationUsageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGenerationUsageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGenerationUsageListRequest) ProtoMessage() {}

func (x *CommiUserVideoGenerationUsageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGenerationUsageListRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGenerationUsageListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{43}
}

func (x *CommiUserVideoGenerationUsageListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoGenerationUsageListRequest) GetSource() common.TASKSOURCE {
	if x != nil {
		return x.Source
	}
	return common.TASKSOURCE(0)
}

func (x *CommiUserVideoGenerationUsageListRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type CommiUserVideoGenerationUsageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usages []*commi.VideoGenerationUsage `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *CommiUserVideoGenerationUsageListResponse) Reset() {
	*x = CommiUserVideoGenerationUsageListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGenerationUsageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGenerationUsageListResponse) ProtoMessage() {}

func (x *CommiUserVideoGenerationUsageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGenerationUsageListResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGenerationUsageListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{44}
}

func (x *CommiUserVideoGenerationUsageListResponse) GetUsages() []*commi.VideoGenerationUsage {
	if x != nil {
		return x.Usages
	}
	return nil
}

type CommiSendWATIMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// WATI API Endpoint
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// WATI Access Token
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// WATI broadcast name
	BroadcastName string `protobuf:"bytes,4,opt,name=broadcast_name,json=broadcastName,proto3" json:"broadcast_name,omitempty"`
	// WATI template name
	TemplateName string `protobuf:"bytes,5,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	// 在 WATI 模板中定义的用于放置视频地址的变量名称
	// The variable name defined in the WATI template for placing share video address.
	VariableName string `protobuf:"bytes,6,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	// receiver message
	Receivers []*common.WatiReceiver `protobuf:"bytes,7,rep,name=receivers,proto3" json:"receivers,omitempty"`
}

func (x *CommiSendWATIMessageRequest) Reset() {
	*x = CommiSendWATIMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSendWATIMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSendWATIMessageRequest) ProtoMessage() {}

func (x *CommiSendWATIMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSendWATIMessageRequest.ProtoReflect.Descriptor instead.
func (*CommiSendWATIMessageRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{45}
}

func (x *CommiSendWATIMessageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetBroadcastName() string {
	if x != nil {
		return x.BroadcastName
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *CommiSendWATIMessageRequest) GetReceivers() []*common.WatiReceiver {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type CommiSendWATIMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rets []*common.Result `protobuf:"bytes,1,rep,name=rets,proto3" json:"rets,omitempty"`
}

func (x *CommiSendWATIMessageResponse) Reset() {
	*x = CommiSendWATIMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSendWATIMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSendWATIMessageResponse) ProtoMessage() {}

func (x *CommiSendWATIMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSendWATIMessageResponse.ProtoReflect.Descriptor instead.
func (*CommiSendWATIMessageResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{46}
}

func (x *CommiSendWATIMessageResponse) GetRets() []*common.Result {
	if x != nil {
		return x.Rets
	}
	return nil
}

type CommiSpeakerSampleVideoGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// speaker_id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// template id.
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *CommiSpeakerSampleVideoGetRequest) Reset() {
	*x = CommiSpeakerSampleVideoGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerSampleVideoGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerSampleVideoGetRequest) ProtoMessage() {}

func (x *CommiSpeakerSampleVideoGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerSampleVideoGetRequest.ProtoReflect.Descriptor instead.
func (*CommiSpeakerSampleVideoGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{47}
}

func (x *CommiSpeakerSampleVideoGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiSpeakerSampleVideoGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommiSpeakerSampleVideoGetRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type CommiSpeakerSampleVideoGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleVideoAddress string `protobuf:"bytes,1,opt,name=sample_video_address,json=sampleVideoAddress,proto3" json:"sample_video_address,omitempty"`
}

func (x *CommiSpeakerSampleVideoGetResponse) Reset() {
	*x = CommiSpeakerSampleVideoGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiSpeakerSampleVideoGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiSpeakerSampleVideoGetResponse) ProtoMessage() {}

func (x *CommiSpeakerSampleVideoGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiSpeakerSampleVideoGetResponse.ProtoReflect.Descriptor instead.
func (*CommiSpeakerSampleVideoGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{48}
}

func (x *CommiSpeakerSampleVideoGetResponse) GetSampleVideoAddress() string {
	if x != nil {
		return x.SampleVideoAddress
	}
	return ""
}

type CommiUserVideoGetShareUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *CommiUserVideoGetShareUrlRequest) Reset() {
	*x = CommiUserVideoGetShareUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGetShareUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGetShareUrlRequest) ProtoMessage() {}

func (x *CommiUserVideoGetShareUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGetShareUrlRequest.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGetShareUrlRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{49}
}

func (x *CommiUserVideoGetShareUrlRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommiUserVideoGetShareUrlRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type CommiUserVideoGetShareUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrl string `protobuf:"bytes,1,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`
}

func (x *CommiUserVideoGetShareUrlResponse) Reset() {
	*x = CommiUserVideoGetShareUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommiUserVideoGetShareUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommiUserVideoGetShareUrlResponse) ProtoMessage() {}

func (x *CommiUserVideoGetShareUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommiUserVideoGetShareUrlResponse.ProtoReflect.Descriptor instead.
func (*CommiUserVideoGetShareUrlResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{50}
}

func (x *CommiUserVideoGetShareUrlResponse) GetShareUrl() string {
	if x != nil {
		return x.ShareUrl
	}
	return ""
}

type MovideoVoiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Gender   common.GENDER         `protobuf:"varint,2,opt,name=gender,proto3,enum=wati.ai_platform.protocol.common.GENDER" json:"gender,omitempty"`
	Language movideo.LANGUAGE      `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.movideo.LANGUAGE" json:"language,omitempty"`
	Paging   *common.RequestPaging `protobuf:"bytes,4,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *MovideoVoiceListRequest) Reset() {
	*x = MovideoVoiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVoiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVoiceListRequest) ProtoMessage() {}

func (x *MovideoVoiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVoiceListRequest.ProtoReflect.Descriptor instead.
func (*MovideoVoiceListRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{51}
}

func (x *MovideoVoiceListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoVoiceListRequest) GetGender() common.GENDER {
	if x != nil {
		return x.Gender
	}
	return common.GENDER(0)
}

func (x *MovideoVoiceListRequest) GetLanguage() movideo.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return movideo.LANGUAGE(0)
}

func (x *MovideoVoiceListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type MovideoVoiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voices []*movideo.Voice       `protobuf:"bytes,1,rep,name=voices,proto3" json:"voices,omitempty"`
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *MovideoVoiceListResponse) Reset() {
	*x = MovideoVoiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVoiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVoiceListResponse) ProtoMessage() {}

func (x *MovideoVoiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVoiceListResponse.ProtoReflect.Descriptor instead.
func (*MovideoVoiceListResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{52}
}

func (x *MovideoVoiceListResponse) GetVoices() []*movideo.Voice {
	if x != nil {
		return x.Voices
	}
	return nil
}

func (x *MovideoVoiceListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type MovideoVoiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MovideoVoiceGetRequest) Reset() {
	*x = MovideoVoiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVoiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVoiceGetRequest) ProtoMessage() {}

func (x *MovideoVoiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVoiceGetRequest.ProtoReflect.Descriptor instead.
func (*MovideoVoiceGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{53}
}

func (x *MovideoVoiceGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoVoiceGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MovideoVoiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voice *movideo.Voice `protobuf:"bytes,1,opt,name=voice,proto3" json:"voice,omitempty"`
}

func (x *MovideoVoiceGetResponse) Reset() {
	*x = MovideoVoiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoVoiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoVoiceGetResponse) ProtoMessage() {}

func (x *MovideoVoiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoVoiceGetResponse.ProtoReflect.Descriptor instead.
func (*MovideoVoiceGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{54}
}

func (x *MovideoVoiceGetResponse) GetVoice() *movideo.Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

type MovideoUserListVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Paging *common.RequestPaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *MovideoUserListVideoRequest) Reset() {
	*x = MovideoUserListVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserListVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserListVideoRequest) ProtoMessage() {}

func (x *MovideoUserListVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserListVideoRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserListVideoRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{55}
}

func (x *MovideoUserListVideoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserListVideoRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type MovideoUserListVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Videos []*movideo.Video       `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *MovideoUserListVideoResponse) Reset() {
	*x = MovideoUserListVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserListVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserListVideoResponse) ProtoMessage() {}

func (x *MovideoUserListVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserListVideoResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserListVideoResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{56}
}

func (x *MovideoUserListVideoResponse) GetVideos() []*movideo.Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *MovideoUserListVideoResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type MovideoUserNewVideoTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Orientation movideo.ORIENTATION `protobuf:"varint,2,opt,name=orientation,proto3,enum=wati.ai_platform.protocol.movideo.ORIENTATION" json:"orientation,omitempty"`
	Category    movideo.CATEGORY    `protobuf:"varint,3,opt,name=category,proto3,enum=wati.ai_platform.protocol.movideo.CATEGORY" json:"category,omitempty"`
	Outline     string              `protobuf:"bytes,4,opt,name=outline,proto3" json:"outline,omitempty"`
	Voice       string              `protobuf:"bytes,5,opt,name=voice,proto3" json:"voice,omitempty"`
	Duration    int32               `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"` // 10~60
	AddSubtitle bool                `protobuf:"varint,7,opt,name=add_subtitle,json=addSubtitle,proto3" json:"add_subtitle,omitempty"`
}

func (x *MovideoUserNewVideoTaskRequest) Reset() {
	*x = MovideoUserNewVideoTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserNewVideoTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserNewVideoTaskRequest) ProtoMessage() {}

func (x *MovideoUserNewVideoTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserNewVideoTaskRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserNewVideoTaskRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{57}
}

func (x *MovideoUserNewVideoTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserNewVideoTaskRequest) GetOrientation() movideo.ORIENTATION {
	if x != nil {
		return x.Orientation
	}
	return movideo.ORIENTATION(0)
}

func (x *MovideoUserNewVideoTaskRequest) GetCategory() movideo.CATEGORY {
	if x != nil {
		return x.Category
	}
	return movideo.CATEGORY(0)
}

func (x *MovideoUserNewVideoTaskRequest) GetOutline() string {
	if x != nil {
		return x.Outline
	}
	return ""
}

func (x *MovideoUserNewVideoTaskRequest) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *MovideoUserNewVideoTaskRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MovideoUserNewVideoTaskRequest) GetAddSubtitle() bool {
	if x != nil {
		return x.AddSubtitle
	}
	return false
}

type MovideoUserNewVideoTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一id
	// [EN] UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 状态
	// [EN] Status
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
}

func (x *MovideoUserNewVideoTaskResponse) Reset() {
	*x = MovideoUserNewVideoTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserNewVideoTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserNewVideoTaskResponse) ProtoMessage() {}

func (x *MovideoUserNewVideoTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserNewVideoTaskResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserNewVideoTaskResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{58}
}

func (x *MovideoUserNewVideoTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MovideoUserNewVideoTaskResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

type MovideoUserTaskStatusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	// [EN] user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 视频的id.
	// [EN] Video id
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *MovideoUserTaskStatusGetRequest) Reset() {
	*x = MovideoUserTaskStatusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserTaskStatusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserTaskStatusGetRequest) ProtoMessage() {}

func (x *MovideoUserTaskStatusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserTaskStatusGetRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserTaskStatusGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{59}
}

func (x *MovideoUserTaskStatusGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserTaskStatusGetRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type MovideoUserTaskStatusGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 视频生成任务的当前状态.
	// [EN] Task status.
	Status common.TASKSTATUS `protobuf:"varint,1,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// 状态信息
	// [EN] Task status message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 生成的剩余时间. 单位:分钟
	// [EN] estimated time of video generation end.
	EstimatedTime int64 `protobuf:"varint,3,opt,name=estimated_time,json=estimatedTime,proto3" json:"estimated_time,omitempty"`
}

func (x *MovideoUserTaskStatusGetResponse) Reset() {
	*x = MovideoUserTaskStatusGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserTaskStatusGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserTaskStatusGetResponse) ProtoMessage() {}

func (x *MovideoUserTaskStatusGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserTaskStatusGetResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserTaskStatusGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{60}
}

func (x *MovideoUserTaskStatusGetResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *MovideoUserTaskStatusGetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MovideoUserTaskStatusGetResponse) GetEstimatedTime() int64 {
	if x != nil {
		return x.EstimatedTime
	}
	return 0
}

type MovideoUserGetVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *MovideoUserGetVideoRequest) Reset() {
	*x = MovideoUserGetVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserGetVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserGetVideoRequest) ProtoMessage() {}

func (x *MovideoUserGetVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserGetVideoRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserGetVideoRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{61}
}

func (x *MovideoUserGetVideoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserGetVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type MovideoUserGetVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video *movideo.Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *MovideoUserGetVideoResponse) Reset() {
	*x = MovideoUserGetVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserGetVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserGetVideoResponse) ProtoMessage() {}

func (x *MovideoUserGetVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserGetVideoResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserGetVideoResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{62}
}

func (x *MovideoUserGetVideoResponse) GetVideo() *movideo.Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type MovideoUserVideoExportTaskNewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId   string           `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Quality   common.QUALITY   `protobuf:"varint,3,opt,name=quality,proto3,enum=wati.ai_platform.protocol.common.QUALITY" json:"quality,omitempty"`
	Watermark common.WATERMARK `protobuf:"varint,4,opt,name=watermark,proto3,enum=wati.ai_platform.protocol.common.WATERMARK" json:"watermark,omitempty"`
}

func (x *MovideoUserVideoExportTaskNewRequest) Reset() {
	*x = MovideoUserVideoExportTaskNewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserVideoExportTaskNewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserVideoExportTaskNewRequest) ProtoMessage() {}

func (x *MovideoUserVideoExportTaskNewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserVideoExportTaskNewRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserVideoExportTaskNewRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{63}
}

func (x *MovideoUserVideoExportTaskNewRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserVideoExportTaskNewRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoUserVideoExportTaskNewRequest) GetQuality() common.QUALITY {
	if x != nil {
		return x.Quality
	}
	return common.QUALITY(0)
}

func (x *MovideoUserVideoExportTaskNewRequest) GetWatermark() common.WATERMARK {
	if x != nil {
		return x.Watermark
	}
	return common.WATERMARK(0)
}

type MovideoUserVideoExportTaskNewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *MovideoUserVideoExportTaskNewResponse) Reset() {
	*x = MovideoUserVideoExportTaskNewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserVideoExportTaskNewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserVideoExportTaskNewResponse) ProtoMessage() {}

func (x *MovideoUserVideoExportTaskNewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserVideoExportTaskNewResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserVideoExportTaskNewResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{64}
}

func (x *MovideoUserVideoExportTaskNewResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type MovideoUserVideoExportTaskGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *MovideoUserVideoExportTaskGetRequest) Reset() {
	*x = MovideoUserVideoExportTaskGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserVideoExportTaskGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserVideoExportTaskGetRequest) ProtoMessage() {}

func (x *MovideoUserVideoExportTaskGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserVideoExportTaskGetRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserVideoExportTaskGetRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{65}
}

func (x *MovideoUserVideoExportTaskGetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserVideoExportTaskGetRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type MovideoUserVideoExportTaskGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret          common.TASKSTATUS `protobuf:"varint,1,opt,name=ret,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"ret,omitempty"`
	Message      string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VideoAddress string            `protobuf:"bytes,3,opt,name=video_address,json=videoAddress,proto3" json:"video_address,omitempty"`
}

func (x *MovideoUserVideoExportTaskGetResponse) Reset() {
	*x = MovideoUserVideoExportTaskGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserVideoExportTaskGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserVideoExportTaskGetResponse) ProtoMessage() {}

func (x *MovideoUserVideoExportTaskGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserVideoExportTaskGetResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserVideoExportTaskGetResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{66}
}

func (x *MovideoUserVideoExportTaskGetResponse) GetRet() common.TASKSTATUS {
	if x != nil {
		return x.Ret
	}
	return common.TASKSTATUS(0)
}

func (x *MovideoUserVideoExportTaskGetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MovideoUserVideoExportTaskGetResponse) GetVideoAddress() string {
	if x != nil {
		return x.VideoAddress
	}
	return ""
}

type MovideoUserUpdateVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId   string               `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Title     string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Favourite common.USERFAVOURITE `protobuf:"varint,4,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *MovideoUserUpdateVideoRequest) Reset() {
	*x = MovideoUserUpdateVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserUpdateVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserUpdateVideoRequest) ProtoMessage() {}

func (x *MovideoUserUpdateVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserUpdateVideoRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserUpdateVideoRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{67}
}

func (x *MovideoUserUpdateVideoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserUpdateVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoUserUpdateVideoRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MovideoUserUpdateVideoRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type MovideoUserUpdateVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video *movideo.Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *MovideoUserUpdateVideoResponse) Reset() {
	*x = MovideoUserUpdateVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserUpdateVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserUpdateVideoResponse) ProtoMessage() {}

func (x *MovideoUserUpdateVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserUpdateVideoResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserUpdateVideoResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{68}
}

func (x *MovideoUserUpdateVideoResponse) GetVideo() *movideo.Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type MovideoUserDeleteVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VideoId string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *MovideoUserDeleteVideoRequest) Reset() {
	*x = MovideoUserDeleteVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserDeleteVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserDeleteVideoRequest) ProtoMessage() {}

func (x *MovideoUserDeleteVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserDeleteVideoRequest.ProtoReflect.Descriptor instead.
func (*MovideoUserDeleteVideoRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{69}
}

func (x *MovideoUserDeleteVideoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MovideoUserDeleteVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type MovideoUserDeleteVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MovideoUserDeleteVideoResponse) Reset() {
	*x = MovideoUserDeleteVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoUserDeleteVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoUserDeleteVideoResponse) ProtoMessage() {}

func (x *MovideoUserDeleteVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoUserDeleteVideoResponse.ProtoReflect.Descriptor instead.
func (*MovideoUserDeleteVideoResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{70}
}

type MovideoSendFeedBackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail    string               `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	VideoId      string               `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Comment      string               `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	FeedbackType string               `protobuf:"bytes,4,opt,name=feedback_type,json=feedbackType,proto3" json:"feedback_type,omitempty"`
	IsFavourite  common.USERFAVOURITE `protobuf:"varint,5,opt,name=is_favourite,json=isFavourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"is_favourite,omitempty"`
}

func (x *MovideoSendFeedBackRequest) Reset() {
	*x = MovideoSendFeedBackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoSendFeedBackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoSendFeedBackRequest) ProtoMessage() {}

func (x *MovideoSendFeedBackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoSendFeedBackRequest.ProtoReflect.Descriptor instead.
func (*MovideoSendFeedBackRequest) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{71}
}

func (x *MovideoSendFeedBackRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *MovideoSendFeedBackRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *MovideoSendFeedBackRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MovideoSendFeedBackRequest) GetFeedbackType() string {
	if x != nil {
		return x.FeedbackType
	}
	return ""
}

func (x *MovideoSendFeedBackRequest) GetIsFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.IsFavourite
	}
	return common.USERFAVOURITE(0)
}

type MovideoSendFeedBackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MovideoSendFeedBackResponse) Reset() {
	*x = MovideoSendFeedBackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_manager_service_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovideoSendFeedBackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovideoSendFeedBackResponse) ProtoMessage() {}

func (x *MovideoSendFeedBackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_manager_service_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovideoSendFeedBackResponse.ProtoReflect.Descriptor instead.
func (*MovideoSendFeedBackResponse) Descriptor() ([]byte, []int) {
	return file_content_manager_service_api_proto_rawDescGZIP(), []int{72}
}

var File_content_manager_service_api_proto protoreflect.FileDescriptor

var file_content_manager_service_api_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x31, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3,
	0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x42, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x22, 0x61, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41,
	0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x22, 0x64, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0xb6, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a,
	0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x69, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xe0,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x6c, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0x6c, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a,
	0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x60, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e, 0x45,
	0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x22, 0x5d, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e,
	0x45, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49,
	0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0x60, 0x0a,
	0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22,
	0x44, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41,
	0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xd2, 0x04,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x10,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f,
	0x4e, 0x45, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x42,
	0x0a, 0x14, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x75, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x22, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x64, 0x22, 0x59, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x87, 0x01,
	0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x51, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x28, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x7a, 0x0a, 0x29, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb4, 0x02, 0x0a,
	0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x74, 0x69,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x64,
	0x57, 0x41, 0x54, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x72, 0x65, 0x74,
	0x73, 0x22, 0x6d, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x86, 0x02, 0x0a, 0x17, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x18,
	0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x16, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x7f, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0xc3, 0x02, 0x0a, 0x1e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x77, 0x0a, 0x1f, 0x4d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x1f, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x20, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x1a, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0xea, 0x01, 0x0a, 0x24, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x40, 0x0a, 0x25, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x24, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xa6, 0x01, 0x0a, 0x25, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1d, 0x4d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x53, 0x0a, 0x1d, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01,
	0x0a, 0x1a, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x0b, 0x69, 0x73,
	0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xea, 0x44, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xe3, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x12, 0x4a, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe1, 0x01, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x12, 0x4a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0xef, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a,
	0x01, 0x2a, 0x32, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xec, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4d, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x2a, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x89, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x52, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x8b, 0x02,
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x65, 0x74, 0x12, 0x50, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x02, 0x0a, 0x16,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x50, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x97, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x1a, 0x44, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x94, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x53, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x2a, 0x44, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd7, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x49, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd7,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x12, 0x49, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x32, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xe2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x47, 0x65, 0x74, 0x12, 0x54, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0xdb, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0xe3, 0x01,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x74, 0x12, 0x4b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xe7, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x12, 0x4f, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x88, 0x02,
	0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x12, 0x55, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x32, 0x2b, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f,
	0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xec, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x02, 0x0a, 0x19, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x8f, 0x02,
	0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x5c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0xeb, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2f, 0x77, 0x61, 0x74, 0x69, 0x12, 0xd7, 0x01,
	0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x49, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x6d, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xe3, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4e,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x17,
	0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x51, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x6d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x81, 0x02,
	0x0a, 0x18, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x12, 0x52, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x6d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f,
	0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xeb, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x4d, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x12, 0x2d, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x88, 0x02, 0x0a, 0x1d, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65,
	0x77, 0x12, 0x57, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22,
	0x29, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x8f, 0x02, 0x0a, 0x1d, 0x4d,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x57, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf7, 0x01, 0x0a,
	0x16, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x50, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x32, 0x2d, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf4, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x50, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d,
	0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd5, 0x01,
	0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x4d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22,
	0x14, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6a, 0x92, 0x41, 0x22, 0x12, 0x20, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x5a, 0x43, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x41, 0x49,
	0x2f, 0x61, 0x69, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_manager_service_api_proto_rawDescOnce sync.Once
	file_content_manager_service_api_proto_rawDescData = file_content_manager_service_api_proto_rawDesc
)

func file_content_manager_service_api_proto_rawDescGZIP() []byte {
	file_content_manager_service_api_proto_rawDescOnce.Do(func() {
		file_content_manager_service_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_manager_service_api_proto_rawDescData)
	})
	return file_content_manager_service_api_proto_rawDescData
}

var file_content_manager_service_api_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_content_manager_service_api_proto_goTypes = []interface{}{
	(*CommiTemplateListRequest)(nil),                  // 0: wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest
	(*CommiTemplateListResponse)(nil),                 // 1: wati.ai_platform.protocol.content_manager_service.CommiTemplateListResponse
	(*CommiTemplateGetRequest)(nil),                   // 2: wati.ai_platform.protocol.content_manager_service.CommiTemplateGetRequest
	(*CommiTemplateGetResponse)(nil),                  // 3: wati.ai_platform.protocol.content_manager_service.CommiTemplateGetResponse
	(*CommiTemplateNewRequest)(nil),                   // 4: wati.ai_platform.protocol.content_manager_service.CommiTemplateNewRequest
	(*CommiTemplateNewResponse)(nil),                  // 5: wati.ai_platform.protocol.content_manager_service.CommiTemplateNewResponse
	(*CommiTemplateUpdateRequest)(nil),                // 6: wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateRequest
	(*CommiTemplateUpdateResponse)(nil),               // 7: wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateResponse
	(*CommiTemplateDeleteRequest)(nil),                // 8: wati.ai_platform.protocol.content_manager_service.CommiTemplateDeleteRequest
	(*CommiTemplateDeleteResponse)(nil),               // 9: wati.ai_platform.protocol.content_manager_service.CommiTemplateDeleteResponse
	(*CommiTemplateScriptListRequest)(nil),            // 10: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListRequest
	(*CommiTemplateScriptListResponse)(nil),           // 11: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListResponse
	(*CommiTemplateScriptGetRequest)(nil),             // 12: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptGetRequest
	(*CommiTemplateScriptGetResponse)(nil),            // 13: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptGetResponse
	(*CommiTemplateScriptNewRequest)(nil),             // 14: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewRequest
	(*CommiTemplateScriptNewResponse)(nil),            // 15: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewResponse
	(*CommiTemplateScriptUpdateRequest)(nil),          // 16: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateRequest
	(*CommiTemplateScriptUpdateResponse)(nil),         // 17: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateResponse
	(*CommiTemplateScriptDeleteRequest)(nil),          // 18: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptDeleteRequest
	(*CommiTemplateScriptDeleteResponse)(nil),         // 19: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptDeleteResponse
	(*CommiSpeakerListRequest)(nil),                   // 20: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest
	(*CommiSpeakerListResponse)(nil),                  // 21: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListResponse
	(*CommiSpeakerGetRequest)(nil),                    // 22: wati.ai_platform.protocol.content_manager_service.CommiSpeakerGetRequest
	(*CommiSpeakerGetResponse)(nil),                   // 23: wati.ai_platform.protocol.content_manager_service.CommiSpeakerGetResponse
	(*Avatar)(nil),                                    // 24: wati.ai_platform.protocol.content_manager_service.Avatar
	(*CommiSpeakerNewRequest)(nil),                    // 25: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest
	(*CommiSpeakerNewResponse)(nil),                   // 26: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewResponse
	(*CommiSpeakerUpdateRequest)(nil),                 // 27: wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateRequest
	(*CommiSpeakerUpdateResponse)(nil),                // 28: wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateResponse
	(*CommiSpeakerDeleteRequest)(nil),                 // 29: wati.ai_platform.protocol.content_manager_service.CommiSpeakerDeleteRequest
	(*CommiSpeakerDeleteResponse)(nil),                // 30: wati.ai_platform.protocol.content_manager_service.CommiSpeakerDeleteResponse
	(*CommiUserVideoListRequest)(nil),                 // 31: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest
	(*CommiUserVideoListResponse)(nil),                // 32: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListResponse
	(*CommiUserVideoNewTaskRequest)(nil),              // 33: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest
	(*CommiUserVideoNewTaskResponse)(nil),             // 34: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskResponse
	(*CommiUserVideoTaskStatusGetRequest)(nil),        // 35: wati.ai_platform.protocol.content_manager_service.CommiUserVideoTaskStatusGetRequest
	(*CommiUserVideoTaskStatusGetResponse)(nil),       // 36: wati.ai_platform.protocol.content_manager_service.CommiUserVideoTaskStatusGetResponse
	(*CommiUserVideoGetRequest)(nil),                  // 37: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetRequest
	(*CommiUserVideoGetResponse)(nil),                 // 38: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetResponse
	(*CommiUserVideoUpdateRequest)(nil),               // 39: wati.ai_platform.protocol.content_manager_service.CommiUserVideoUpdateRequest
	(*CommiUserVideoUpdateResponse)(nil),              // 40: wati.ai_platform.protocol.content_manager_service.CommiUserVideoUpdateResponse
	(*CommiUserVideoDeleteRequest)(nil),               // 41: wati.ai_platform.protocol.content_manager_service.CommiUserVideoDeleteRequest
	(*CommiUserVideoDeleteResponse)(nil),              // 42: wati.ai_platform.protocol.content_manager_service.CommiUserVideoDeleteResponse
	(*CommiUserVideoGenerationUsageListRequest)(nil),  // 43: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListRequest
	(*CommiUserVideoGenerationUsageListResponse)(nil), // 44: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListResponse
	(*CommiSendWATIMessageRequest)(nil),               // 45: wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageRequest
	(*CommiSendWATIMessageResponse)(nil),              // 46: wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageResponse
	(*CommiSpeakerSampleVideoGetRequest)(nil),         // 47: wati.ai_platform.protocol.content_manager_service.CommiSpeakerSampleVideoGetRequest
	(*CommiSpeakerSampleVideoGetResponse)(nil),        // 48: wati.ai_platform.protocol.content_manager_service.CommiSpeakerSampleVideoGetResponse
	(*CommiUserVideoGetShareUrlRequest)(nil),          // 49: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetShareUrlRequest
	(*CommiUserVideoGetShareUrlResponse)(nil),         // 50: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetShareUrlResponse
	(*MovideoVoiceListRequest)(nil),                   // 51: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListRequest
	(*MovideoVoiceListResponse)(nil),                  // 52: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListResponse
	(*MovideoVoiceGetRequest)(nil),                    // 53: wati.ai_platform.protocol.content_manager_service.MovideoVoiceGetRequest
	(*MovideoVoiceGetResponse)(nil),                   // 54: wati.ai_platform.protocol.content_manager_service.MovideoVoiceGetResponse
	(*MovideoUserListVideoRequest)(nil),               // 55: wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoRequest
	(*MovideoUserListVideoResponse)(nil),              // 56: wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoResponse
	(*MovideoUserNewVideoTaskRequest)(nil),            // 57: wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskRequest
	(*MovideoUserNewVideoTaskResponse)(nil),           // 58: wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskResponse
	(*MovideoUserTaskStatusGetRequest)(nil),           // 59: wati.ai_platform.protocol.content_manager_service.MovideoUserTaskStatusGetRequest
	(*MovideoUserTaskStatusGetResponse)(nil),          // 60: wati.ai_platform.protocol.content_manager_service.MovideoUserTaskStatusGetResponse
	(*MovideoUserGetVideoRequest)(nil),                // 61: wati.ai_platform.protocol.content_manager_service.MovideoUserGetVideoRequest
	(*MovideoUserGetVideoResponse)(nil),               // 62: wati.ai_platform.protocol.content_manager_service.MovideoUserGetVideoResponse
	(*MovideoUserVideoExportTaskNewRequest)(nil),      // 63: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewRequest
	(*MovideoUserVideoExportTaskNewResponse)(nil),     // 64: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewResponse
	(*MovideoUserVideoExportTaskGetRequest)(nil),      // 65: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskGetRequest
	(*MovideoUserVideoExportTaskGetResponse)(nil),     // 66: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskGetResponse
	(*MovideoUserUpdateVideoRequest)(nil),             // 67: wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoRequest
	(*MovideoUserUpdateVideoResponse)(nil),            // 68: wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoResponse
	(*MovideoUserDeleteVideoRequest)(nil),             // 69: wati.ai_platform.protocol.content_manager_service.MovideoUserDeleteVideoRequest
	(*MovideoUserDeleteVideoResponse)(nil),            // 70: wati.ai_platform.protocol.content_manager_service.MovideoUserDeleteVideoResponse
	(*MovideoSendFeedBackRequest)(nil),                // 71: wati.ai_platform.protocol.content_manager_service.MovideoSendFeedBackRequest
	(*MovideoSendFeedBackResponse)(nil),               // 72: wati.ai_platform.protocol.content_manager_service.MovideoSendFeedBackResponse
	nil,                                               // 73: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest.ScriptParameterEntry
	(*common.RequestPaging)(nil),                      // 74: wati.ai_platform.protocol.common.RequestPaging
	(commi.CATEGORY)(0),                               // 75: wati.ai_platform.protocol.commi.CATEGORY
	(*common.NameQuery)(nil),                          // 76: wati.ai_platform.protocol.common.NameQuery
	(common.USERFAVOURITE)(0),                         // 77: wati.ai_platform.protocol.common.USERFAVOURITE
	(*commi.Template)(nil),                            // 78: wati.ai_platform.protocol.commi.Template
	(*common.ResponsePaging)(nil),                     // 79: wati.ai_platform.protocol.common.ResponsePaging
	(*commi.TemplateScript)(nil),                      // 80: wati.ai_platform.protocol.commi.TemplateScript
	(*commi.TemplateScriptParameter)(nil),             // 81: wati.ai_platform.protocol.commi.TemplateScriptParameter
	(commi.LANGUAGE)(0),                               // 82: wati.ai_platform.protocol.commi.LANGUAGE
	(*commi.Speaker)(nil),                             // 83: wati.ai_platform.protocol.commi.Speaker
	(common.GENDER)(0),                                // 84: wati.ai_platform.protocol.common.GENDER
	(common.TONE)(0),                                  // 85: wati.ai_platform.protocol.common.TONE
	(common.TASKSTATUS)(0),                            // 86: wati.ai_platform.protocol.common.TASKSTATUS
	(*commi.Video)(nil),                               // 87: wati.ai_platform.protocol.commi.Video
	(common.TASKSOURCE)(0),                            // 88: wati.ai_platform.protocol.common.TASKSOURCE
	(*common.TimeRange)(nil),                          // 89: wati.ai_platform.protocol.common.TimeRange
	(*commi.VideoGenerationUsage)(nil),                // 90: wati.ai_platform.protocol.commi.VideoGenerationUsage
	(*common.WatiReceiver)(nil),                       // 91: wati.ai_platform.protocol.common.WatiReceiver
	(*common.Result)(nil),                             // 92: wati.ai_platform.protocol.common.Result
	(movideo.LANGUAGE)(0),                             // 93: wati.ai_platform.protocol.movideo.LANGUAGE
	(*movideo.Voice)(nil),                             // 94: wati.ai_platform.protocol.movideo.Voice
	(*movideo.Video)(nil),                             // 95: wati.ai_platform.protocol.movideo.Video
	(movideo.ORIENTATION)(0),                          // 96: wati.ai_platform.protocol.movideo.ORIENTATION
	(movideo.CATEGORY)(0),                             // 97: wati.ai_platform.protocol.movideo.CATEGORY
	(common.QUALITY)(0),                               // 98: wati.ai_platform.protocol.common.QUALITY
	(common.WATERMARK)(0),                             // 99: wati.ai_platform.protocol.common.WATERMARK
}
var file_content_manager_service_api_proto_depIdxs = []int32{
	74,  // 0: wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	75,  // 1: wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	76,  // 2: wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	77,  // 3: wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	78,  // 4: wati.ai_platform.protocol.content_manager_service.CommiTemplateListResponse.templates:type_name -> wati.ai_platform.protocol.commi.Template
	79,  // 5: wati.ai_platform.protocol.content_manager_service.CommiTemplateListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	78,  // 6: wati.ai_platform.protocol.content_manager_service.CommiTemplateGetResponse.template:type_name -> wati.ai_platform.protocol.commi.Template
	75,  // 7: wati.ai_platform.protocol.content_manager_service.CommiTemplateNewRequest.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	78,  // 8: wati.ai_platform.protocol.content_manager_service.CommiTemplateNewResponse.template:type_name -> wati.ai_platform.protocol.commi.Template
	77,  // 9: wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	78,  // 10: wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateResponse.template:type_name -> wati.ai_platform.protocol.commi.Template
	74,  // 11: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	80,  // 12: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListResponse.scripts:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	79,  // 13: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	80,  // 14: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptGetResponse.script:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	81,  // 15: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewRequest.parameters:type_name -> wati.ai_platform.protocol.commi.TemplateScriptParameter
	80,  // 16: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewResponse.script:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	81,  // 17: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateRequest.parameters:type_name -> wati.ai_platform.protocol.commi.TemplateScriptParameter
	80,  // 18: wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateResponse.script:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	74,  // 19: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	76,  // 20: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	82,  // 21: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	77,  // 22: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	83,  // 23: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListResponse.speakers:type_name -> wati.ai_platform.protocol.commi.Speaker
	79,  // 24: wati.ai_platform.protocol.content_manager_service.CommiSpeakerListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	83,  // 25: wati.ai_platform.protocol.content_manager_service.CommiSpeakerGetResponse.speaker:type_name -> wati.ai_platform.protocol.commi.Speaker
	82,  // 26: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	84,  // 27: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest.gender:type_name -> wati.ai_platform.protocol.common.GENDER
	24,  // 28: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest.default_avatar:type_name -> wati.ai_platform.protocol.content_manager_service.Avatar
	85,  // 29: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest.default_tone:type_name -> wati.ai_platform.protocol.common.TONE
	83,  // 30: wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewResponse.speaker:type_name -> wati.ai_platform.protocol.commi.Speaker
	85,  // 31: wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateRequest.default_tone:type_name -> wati.ai_platform.protocol.common.TONE
	77,  // 32: wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	83,  // 33: wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateResponse.speaker:type_name -> wati.ai_platform.protocol.commi.Speaker
	86,  // 34: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	75,  // 35: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	76,  // 36: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	74,  // 37: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	87,  // 38: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListResponse.videos:type_name -> wati.ai_platform.protocol.commi.Video
	79,  // 39: wati.ai_platform.protocol.content_manager_service.CommiUserVideoListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	73,  // 40: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest.script_parameter:type_name -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest.ScriptParameterEntry
	85,  // 41: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest.tone:type_name -> wati.ai_platform.protocol.common.TONE
	88,  // 42: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest.source:type_name -> wati.ai_platform.protocol.common.TASKSOURCE
	86,  // 43: wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	86,  // 44: wati.ai_platform.protocol.content_manager_service.CommiUserVideoTaskStatusGetResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	87,  // 45: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetResponse.video:type_name -> wati.ai_platform.protocol.commi.Video
	87,  // 46: wati.ai_platform.protocol.content_manager_service.CommiUserVideoUpdateResponse.video:type_name -> wati.ai_platform.protocol.commi.Video
	88,  // 47: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListRequest.source:type_name -> wati.ai_platform.protocol.common.TASKSOURCE
	89,  // 48: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListRequest.time_range:type_name -> wati.ai_platform.protocol.common.TimeRange
	90,  // 49: wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListResponse.usages:type_name -> wati.ai_platform.protocol.commi.VideoGenerationUsage
	91,  // 50: wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageRequest.receivers:type_name -> wati.ai_platform.protocol.common.WatiReceiver
	92,  // 51: wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageResponse.rets:type_name -> wati.ai_platform.protocol.common.Result
	84,  // 52: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListRequest.gender:type_name -> wati.ai_platform.protocol.common.GENDER
	93,  // 53: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListRequest.language:type_name -> wati.ai_platform.protocol.movideo.LANGUAGE
	74,  // 54: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	94,  // 55: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListResponse.voices:type_name -> wati.ai_platform.protocol.movideo.Voice
	79,  // 56: wati.ai_platform.protocol.content_manager_service.MovideoVoiceListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	94,  // 57: wati.ai_platform.protocol.content_manager_service.MovideoVoiceGetResponse.voice:type_name -> wati.ai_platform.protocol.movideo.Voice
	74,  // 58: wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	95,  // 59: wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoResponse.videos:type_name -> wati.ai_platform.protocol.movideo.Video
	79,  // 60: wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	96,  // 61: wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskRequest.orientation:type_name -> wati.ai_platform.protocol.movideo.ORIENTATION
	97,  // 62: wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskRequest.category:type_name -> wati.ai_platform.protocol.movideo.CATEGORY
	86,  // 63: wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	86,  // 64: wati.ai_platform.protocol.content_manager_service.MovideoUserTaskStatusGetResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	95,  // 65: wati.ai_platform.protocol.content_manager_service.MovideoUserGetVideoResponse.video:type_name -> wati.ai_platform.protocol.movideo.Video
	98,  // 66: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewRequest.quality:type_name -> wati.ai_platform.protocol.common.QUALITY
	99,  // 67: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewRequest.watermark:type_name -> wati.ai_platform.protocol.common.WATERMARK
	86,  // 68: wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskGetResponse.ret:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	77,  // 69: wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	95,  // 70: wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoResponse.video:type_name -> wati.ai_platform.protocol.movideo.Video
	77,  // 71: wati.ai_platform.protocol.content_manager_service.MovideoSendFeedBackRequest.is_favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	0,   // 72: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateList:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateListRequest
	2,   // 73: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateGetRequest
	4,   // 74: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateNew:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateNewRequest
	6,   // 75: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateUpdate:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateRequest
	8,   // 76: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateDelete:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateDeleteRequest
	10,  // 77: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptList:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListRequest
	12,  // 78: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptGetRequest
	14,  // 79: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptNew:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewRequest
	16,  // 80: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptUpdate:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateRequest
	18,  // 81: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptDelete:input_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptDeleteRequest
	20,  // 82: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerList:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerListRequest
	22,  // 83: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerGetRequest
	25,  // 84: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerNew:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewRequest
	27,  // 85: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerUpdate:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateRequest
	29,  // 86: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerDelete:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerDeleteRequest
	47,  // 87: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerSampleVideoGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerSampleVideoGetRequest
	31,  // 88: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoList:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoListRequest
	37,  // 89: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetRequest
	33,  // 90: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoTaskNew:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskRequest
	35,  // 91: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoTaskStatusGet:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoTaskStatusGetRequest
	39,  // 92: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoUpdate:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoUpdateRequest
	41,  // 93: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoDelete:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoDeleteRequest
	49,  // 94: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGetShareUrl:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetShareUrlRequest
	43,  // 95: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGenerationUsageList:input_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListRequest
	45,  // 96: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserSendWATIMessage:input_type -> wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageRequest
	51,  // 97: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoVoiceList:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoVoiceListRequest
	53,  // 98: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoVoiceGet:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoVoiceGetRequest
	55,  // 99: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserListVideo:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoRequest
	57,  // 100: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserNewVideoTask:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskRequest
	59,  // 101: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserTaskStatusGet:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserTaskStatusGetRequest
	61,  // 102: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserGetVideo:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserGetVideoRequest
	63,  // 103: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserVideoExportTaskNew:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewRequest
	65,  // 104: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserVideoExportTaskGet:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskGetRequest
	67,  // 105: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserUpdateVideo:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoRequest
	69,  // 106: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserDeleteVideo:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserDeleteVideoRequest
	71,  // 107: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoSendFeedBack:input_type -> wati.ai_platform.protocol.content_manager_service.MovideoSendFeedBackRequest
	1,   // 108: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateList:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateListResponse
	3,   // 109: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateGetResponse
	5,   // 110: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateNew:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateNewResponse
	7,   // 111: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateUpdate:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateUpdateResponse
	9,   // 112: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateDelete:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateDeleteResponse
	11,  // 113: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptList:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptListResponse
	13,  // 114: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptGetResponse
	15,  // 115: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptNew:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptNewResponse
	17,  // 116: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptUpdate:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptUpdateResponse
	19,  // 117: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiTemplateScriptDelete:output_type -> wati.ai_platform.protocol.content_manager_service.CommiTemplateScriptDeleteResponse
	21,  // 118: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerList:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerListResponse
	23,  // 119: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerGetResponse
	26,  // 120: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerNew:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerNewResponse
	28,  // 121: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerUpdate:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerUpdateResponse
	30,  // 122: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerDelete:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerDeleteResponse
	48,  // 123: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiSpeakerSampleVideoGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSpeakerSampleVideoGetResponse
	32,  // 124: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoList:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoListResponse
	38,  // 125: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetResponse
	34,  // 126: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoTaskNew:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoNewTaskResponse
	36,  // 127: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoTaskStatusGet:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoTaskStatusGetResponse
	40,  // 128: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoUpdate:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoUpdateResponse
	42,  // 129: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoDelete:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoDeleteResponse
	50,  // 130: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGetShareUrl:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGetShareUrlResponse
	44,  // 131: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserVideoGenerationUsageList:output_type -> wati.ai_platform.protocol.content_manager_service.CommiUserVideoGenerationUsageListResponse
	46,  // 132: wati.ai_platform.protocol.content_manager_service.ContentManagerService.CommiUserSendWATIMessage:output_type -> wati.ai_platform.protocol.content_manager_service.CommiSendWATIMessageResponse
	52,  // 133: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoVoiceList:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoVoiceListResponse
	54,  // 134: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoVoiceGet:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoVoiceGetResponse
	56,  // 135: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserListVideo:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserListVideoResponse
	58,  // 136: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserNewVideoTask:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserNewVideoTaskResponse
	60,  // 137: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserTaskStatusGet:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserTaskStatusGetResponse
	62,  // 138: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserGetVideo:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserGetVideoResponse
	64,  // 139: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserVideoExportTaskNew:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskNewResponse
	66,  // 140: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserVideoExportTaskGet:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserVideoExportTaskGetResponse
	68,  // 141: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserUpdateVideo:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserUpdateVideoResponse
	70,  // 142: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoUserDeleteVideo:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoUserDeleteVideoResponse
	72,  // 143: wati.ai_platform.protocol.content_manager_service.ContentManagerService.MovideoSendFeedBack:output_type -> wati.ai_platform.protocol.content_manager_service.MovideoSendFeedBackResponse
	108, // [108:144] is the sub-list for method output_type
	72,  // [72:108] is the sub-list for method input_type
	72,  // [72:72] is the sub-list for extension type_name
	72,  // [72:72] is the sub-list for extension extendee
	0,   // [0:72] is the sub-list for field type_name
}

func init() { file_content_manager_service_api_proto_init() }
func file_content_manager_service_api_proto_init() {
	if File_content_manager_service_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_content_manager_service_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiTemplateScriptDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoNewTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoNewTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoTaskStatusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoTaskStatusGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGenerationUsageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGenerationUsageListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSendWATIMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSendWATIMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerSampleVideoGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiSpeakerSampleVideoGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGetShareUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommiUserVideoGetShareUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVoiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVoiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVoiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoVoiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserListVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserListVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserNewVideoTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserNewVideoTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserTaskStatusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserTaskStatusGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserGetVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserGetVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserVideoExportTaskNewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserVideoExportTaskNewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserVideoExportTaskGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserVideoExportTaskGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserUpdateVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserUpdateVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserDeleteVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoUserDeleteVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoSendFeedBackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_manager_service_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovideoSendFeedBackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_manager_service_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_manager_service_api_proto_goTypes,
		DependencyIndexes: file_content_manager_service_api_proto_depIdxs,
		MessageInfos:      file_content_manager_service_api_proto_msgTypes,
	}.Build()
	File_content_manager_service_api_proto = out.File
	file_content_manager_service_api_proto_rawDesc = nil
	file_content_manager_service_api_proto_goTypes = nil
	file_content_manager_service_api_proto_depIdxs = nil
}
