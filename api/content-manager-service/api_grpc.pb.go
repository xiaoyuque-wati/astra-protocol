// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: content-manager-service/api.proto

package content_manager_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentManagerService_CommiTemplateList_FullMethodName                 = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateList"
	ContentManagerService_CommiTemplateGet_FullMethodName                  = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateGet"
	ContentManagerService_CommiTemplateNew_FullMethodName                  = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateNew"
	ContentManagerService_CommiTemplateUpdate_FullMethodName               = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateUpdate"
	ContentManagerService_CommiTemplateDelete_FullMethodName               = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateDelete"
	ContentManagerService_CommiTemplateScriptList_FullMethodName           = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateScriptList"
	ContentManagerService_CommiTemplateScriptGet_FullMethodName            = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateScriptGet"
	ContentManagerService_CommiTemplateScriptNew_FullMethodName            = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateScriptNew"
	ContentManagerService_CommiTemplateScriptUpdate_FullMethodName         = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateScriptUpdate"
	ContentManagerService_CommiTemplateScriptDelete_FullMethodName         = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiTemplateScriptDelete"
	ContentManagerService_CommiSpeakerList_FullMethodName                  = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerList"
	ContentManagerService_CommiSpeakerGet_FullMethodName                   = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerGet"
	ContentManagerService_CommiSpeakerNew_FullMethodName                   = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerNew"
	ContentManagerService_CommiSpeakerUpdate_FullMethodName                = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerUpdate"
	ContentManagerService_CommiSpeakerDelete_FullMethodName                = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerDelete"
	ContentManagerService_CommiSpeakerSampleVideoGet_FullMethodName        = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiSpeakerSampleVideoGet"
	ContentManagerService_CommiUserVideoList_FullMethodName                = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoList"
	ContentManagerService_CommiUserVideoGet_FullMethodName                 = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoGet"
	ContentManagerService_CommiUserVideoTaskNew_FullMethodName             = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoTaskNew"
	ContentManagerService_CommiUserVideoTaskStatusGet_FullMethodName       = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoTaskStatusGet"
	ContentManagerService_CommiUserVideoUpdate_FullMethodName              = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoUpdate"
	ContentManagerService_CommiUserVideoDelete_FullMethodName              = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoDelete"
	ContentManagerService_CommiUserVideoGetShareUrl_FullMethodName         = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoGetShareUrl"
	ContentManagerService_CommiUserVideoGenerationUsageList_FullMethodName = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserVideoGenerationUsageList"
	ContentManagerService_CommiUserSendWATIMessage_FullMethodName          = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/CommiUserSendWATIMessage"
	ContentManagerService_MovideoVoiceList_FullMethodName                  = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoVoiceList"
	ContentManagerService_MovideoVoiceGet_FullMethodName                   = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoVoiceGet"
	ContentManagerService_MovideoUserListVideo_FullMethodName              = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserListVideo"
	ContentManagerService_MovideoUserNewVideoTask_FullMethodName           = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserNewVideoTask"
	ContentManagerService_MovideoUserTaskStatusGet_FullMethodName          = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserTaskStatusGet"
	ContentManagerService_MovideoUserGetVideo_FullMethodName               = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserGetVideo"
	ContentManagerService_MovideoUserVideoExportTaskNew_FullMethodName     = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserVideoExportTaskNew"
	ContentManagerService_MovideoUserVideoExportTaskGet_FullMethodName     = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserVideoExportTaskGet"
	ContentManagerService_MovideoUserUpdateVideo_FullMethodName            = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserUpdateVideo"
	ContentManagerService_MovideoUserDeleteVideo_FullMethodName            = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoUserDeleteVideo"
	ContentManagerService_MovideoSendFeedBack_FullMethodName               = "/wati.ai_platform.protocol.content_manager_service.ContentManagerService/MovideoSendFeedBack"
)

// ContentManagerServiceClient is the client API for ContentManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 内容管理服务. 用于管理AI视频音频模版以及生成AI视频/音频的素材。
// [EN] Content Manager. Used to manage AI video/audio templates,
// clips for generating AI video/audio and generated AI video/audio.
type ContentManagerServiceClient interface {
	// 罗列所有的视频模版.
	// [EN] List all video templates.
	CommiTemplateList(ctx context.Context, in *CommiTemplateListRequest, opts ...grpc.CallOption) (*CommiTemplateListResponse, error)
	// 获取指定视频模版.
	// [EN] Get the specified template by template ID.
	CommiTemplateGet(ctx context.Context, in *CommiTemplateGetRequest, opts ...grpc.CallOption) (*CommiTemplateGetResponse, error)
	// [INTERNAL] 创建新的视频模版.
	// [INTERNAL] [EN] Create new template.
	CommiTemplateNew(ctx context.Context, in *CommiTemplateNewRequest, opts ...grpc.CallOption) (*CommiTemplateNewResponse, error)
	// [INTERNAL] 更新指定模版.
	// [INTERNAL] [EN] Update the specified template by template ID.
	CommiTemplateUpdate(ctx context.Context, in *CommiTemplateUpdateRequest, opts ...grpc.CallOption) (*CommiTemplateUpdateResponse, error)
	// [INTERNAL] 删除指定模版.
	// [INTERNAL] [EN] Delete the specified template by template ID.
	CommiTemplateDelete(ctx context.Context, in *CommiTemplateDeleteRequest, opts ...grpc.CallOption) (*CommiTemplateDeleteResponse, error)
	// [INTERNAL] 罗列所有的脚本模版.
	// [INTERNAL] [EN] List all script templates.
	CommiTemplateScriptList(ctx context.Context, in *CommiTemplateScriptListRequest, opts ...grpc.CallOption) (*CommiTemplateScriptListResponse, error)
	// [INTERNAL] 获取指定脚本模版.
	// [INTERNAL] [EN] Get the specified script template by ID.
	CommiTemplateScriptGet(ctx context.Context, in *CommiTemplateScriptGetRequest, opts ...grpc.CallOption) (*CommiTemplateScriptGetResponse, error)
	// [INTERNAL] 创建新的脚本模版.
	// [INTERNAL] [EN] Create a new script template.
	CommiTemplateScriptNew(ctx context.Context, in *CommiTemplateScriptNewRequest, opts ...grpc.CallOption) (*CommiTemplateScriptNewResponse, error)
	// [INTERNAL] 更新指定脚本模版.
	// [INTERNAL] [EN] Update the specified script template by ID.
	CommiTemplateScriptUpdate(ctx context.Context, in *CommiTemplateScriptUpdateRequest, opts ...grpc.CallOption) (*CommiTemplateScriptUpdateResponse, error)
	// [INTERNAL] 删除指定脚本模版.
	// [INTERNAL] [EN] Delete the specified script template by ID.
	CommiTemplateScriptDelete(ctx context.Context, in *CommiTemplateScriptDeleteRequest, opts ...grpc.CallOption) (*CommiTemplateScriptDeleteResponse, error)
	// 罗列所有的speaker.
	// [EN] List all speakers.
	CommiSpeakerList(ctx context.Context, in *CommiSpeakerListRequest, opts ...grpc.CallOption) (*CommiSpeakerListResponse, error)
	// 获取指定speaker.
	// [INTERNAL] [EN] Get the specified speaker by ID.
	CommiSpeakerGet(ctx context.Context, in *CommiSpeakerGetRequest, opts ...grpc.CallOption) (*CommiSpeakerGetResponse, error)
	// 创建新的speaker.
	// [INTERNAL] [EN] Create new speaker.
	CommiSpeakerNew(ctx context.Context, in *CommiSpeakerNewRequest, opts ...grpc.CallOption) (*CommiSpeakerNewResponse, error)
	// 更新指定的speaker.
	// [INTERNAL] [EN] Update the specified speaker by ID.
	CommiSpeakerUpdate(ctx context.Context, in *CommiSpeakerUpdateRequest, opts ...grpc.CallOption) (*CommiSpeakerUpdateResponse, error)
	// 删除指定的speaker.
	// [INTERNAL] [EN] Delete the specified speaker by ID.
	CommiSpeakerDelete(ctx context.Context, in *CommiSpeakerDeleteRequest, opts ...grpc.CallOption) (*CommiSpeakerDeleteResponse, error)
	// 获取示例视频
	// [INTERNAL] [EN] Get sample video by template id and speaker id.
	CommiSpeakerSampleVideoGet(ctx context.Context, in *CommiSpeakerSampleVideoGetRequest, opts ...grpc.CallOption) (*CommiSpeakerSampleVideoGetResponse, error)
	// 罗列用户的全部生成视频.
	// [EN] List all videos generated by the specified user.
	CommiUserVideoList(ctx context.Context, in *CommiUserVideoListRequest, opts ...grpc.CallOption) (*CommiUserVideoListResponse, error)
	// 获取用户的指定视频
	// [EN] Get the specified video by video ID.
	CommiUserVideoGet(ctx context.Context, in *CommiUserVideoGetRequest, opts ...grpc.CallOption) (*CommiUserVideoGetResponse, error)
	// 用户创建生成视频的任务
	// [EN] Create a video generation task.
	CommiUserVideoTaskNew(ctx context.Context, in *CommiUserVideoNewTaskRequest, opts ...grpc.CallOption) (*CommiUserVideoNewTaskResponse, error)
	// 用户查询指定视频的状态
	// [EN] Check a video generation task status by video ID.
	CommiUserVideoTaskStatusGet(ctx context.Context, in *CommiUserVideoTaskStatusGetRequest, opts ...grpc.CallOption) (*CommiUserVideoTaskStatusGetResponse, error)
	// 用户更新指定视频
	// [EN] Update the specified video by ID.
	CommiUserVideoUpdate(ctx context.Context, in *CommiUserVideoUpdateRequest, opts ...grpc.CallOption) (*CommiUserVideoUpdateResponse, error)
	// 用户删除指定视频
	// [EN] Delete the specified video by ID.
	CommiUserVideoDelete(ctx context.Context, in *CommiUserVideoDeleteRequest, opts ...grpc.CallOption) (*CommiUserVideoDeleteResponse, error)
	// 用户视频生成记录
	// [EN] List user video generation usage.
	CommiUserVideoGetShareUrl(ctx context.Context, in *CommiUserVideoGetShareUrlRequest, opts ...grpc.CallOption) (*CommiUserVideoGetShareUrlResponse, error)
	// 用户视频生成记录
	// [EN] List user video generation usage.
	CommiUserVideoGenerationUsageList(ctx context.Context, in *CommiUserVideoGenerationUsageListRequest, opts ...grpc.CallOption) (*CommiUserVideoGenerationUsageListResponse, error)
	// 批量发送wati消息.
	// [EN] Batch send wati message.
	CommiUserSendWATIMessage(ctx context.Context, in *CommiSendWATIMessageRequest, opts ...grpc.CallOption) (*CommiSendWATIMessageResponse, error)
	MovideoVoiceList(ctx context.Context, in *MovideoVoiceListRequest, opts ...grpc.CallOption) (*MovideoVoiceListResponse, error)
	MovideoVoiceGet(ctx context.Context, in *MovideoVoiceGetRequest, opts ...grpc.CallOption) (*MovideoVoiceGetResponse, error)
	MovideoUserListVideo(ctx context.Context, in *MovideoUserListVideoRequest, opts ...grpc.CallOption) (*MovideoUserListVideoResponse, error)
	MovideoUserNewVideoTask(ctx context.Context, in *MovideoUserNewVideoTaskRequest, opts ...grpc.CallOption) (*MovideoUserNewVideoTaskResponse, error)
	MovideoUserTaskStatusGet(ctx context.Context, in *MovideoUserTaskStatusGetRequest, opts ...grpc.CallOption) (*MovideoUserTaskStatusGetResponse, error)
	MovideoUserGetVideo(ctx context.Context, in *MovideoUserGetVideoRequest, opts ...grpc.CallOption) (*MovideoUserGetVideoResponse, error)
	MovideoUserVideoExportTaskNew(ctx context.Context, in *MovideoUserVideoExportTaskNewRequest, opts ...grpc.CallOption) (*MovideoUserVideoExportTaskNewResponse, error)
	MovideoUserVideoExportTaskGet(ctx context.Context, in *MovideoUserVideoExportTaskGetRequest, opts ...grpc.CallOption) (*MovideoUserVideoExportTaskGetResponse, error)
	MovideoUserUpdateVideo(ctx context.Context, in *MovideoUserUpdateVideoRequest, opts ...grpc.CallOption) (*MovideoUserUpdateVideoResponse, error)
	MovideoUserDeleteVideo(ctx context.Context, in *MovideoUserDeleteVideoRequest, opts ...grpc.CallOption) (*MovideoUserDeleteVideoResponse, error)
	MovideoSendFeedBack(ctx context.Context, in *MovideoSendFeedBackRequest, opts ...grpc.CallOption) (*MovideoSendFeedBackResponse, error)
}

type contentManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentManagerServiceClient(cc grpc.ClientConnInterface) ContentManagerServiceClient {
	return &contentManagerServiceClient{cc}
}

func (c *contentManagerServiceClient) CommiTemplateList(ctx context.Context, in *CommiTemplateListRequest, opts ...grpc.CallOption) (*CommiTemplateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateGet(ctx context.Context, in *CommiTemplateGetRequest, opts ...grpc.CallOption) (*CommiTemplateGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateNew(ctx context.Context, in *CommiTemplateNewRequest, opts ...grpc.CallOption) (*CommiTemplateNewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateNewResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateUpdate(ctx context.Context, in *CommiTemplateUpdateRequest, opts ...grpc.CallOption) (*CommiTemplateUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateUpdateResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateDelete(ctx context.Context, in *CommiTemplateDeleteRequest, opts ...grpc.CallOption) (*CommiTemplateDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateDeleteResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateScriptList(ctx context.Context, in *CommiTemplateScriptListRequest, opts ...grpc.CallOption) (*CommiTemplateScriptListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateScriptListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateScriptList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateScriptGet(ctx context.Context, in *CommiTemplateScriptGetRequest, opts ...grpc.CallOption) (*CommiTemplateScriptGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateScriptGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateScriptGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateScriptNew(ctx context.Context, in *CommiTemplateScriptNewRequest, opts ...grpc.CallOption) (*CommiTemplateScriptNewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateScriptNewResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateScriptNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateScriptUpdate(ctx context.Context, in *CommiTemplateScriptUpdateRequest, opts ...grpc.CallOption) (*CommiTemplateScriptUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateScriptUpdateResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateScriptUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiTemplateScriptDelete(ctx context.Context, in *CommiTemplateScriptDeleteRequest, opts ...grpc.CallOption) (*CommiTemplateScriptDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiTemplateScriptDeleteResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiTemplateScriptDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerList(ctx context.Context, in *CommiSpeakerListRequest, opts ...grpc.CallOption) (*CommiSpeakerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerGet(ctx context.Context, in *CommiSpeakerGetRequest, opts ...grpc.CallOption) (*CommiSpeakerGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerNew(ctx context.Context, in *CommiSpeakerNewRequest, opts ...grpc.CallOption) (*CommiSpeakerNewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerNewResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerUpdate(ctx context.Context, in *CommiSpeakerUpdateRequest, opts ...grpc.CallOption) (*CommiSpeakerUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerUpdateResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerDelete(ctx context.Context, in *CommiSpeakerDeleteRequest, opts ...grpc.CallOption) (*CommiSpeakerDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerDeleteResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiSpeakerSampleVideoGet(ctx context.Context, in *CommiSpeakerSampleVideoGetRequest, opts ...grpc.CallOption) (*CommiSpeakerSampleVideoGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSpeakerSampleVideoGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiSpeakerSampleVideoGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoList(ctx context.Context, in *CommiUserVideoListRequest, opts ...grpc.CallOption) (*CommiUserVideoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoGet(ctx context.Context, in *CommiUserVideoGetRequest, opts ...grpc.CallOption) (*CommiUserVideoGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoTaskNew(ctx context.Context, in *CommiUserVideoNewTaskRequest, opts ...grpc.CallOption) (*CommiUserVideoNewTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoNewTaskResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoTaskNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoTaskStatusGet(ctx context.Context, in *CommiUserVideoTaskStatusGetRequest, opts ...grpc.CallOption) (*CommiUserVideoTaskStatusGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoTaskStatusGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoTaskStatusGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoUpdate(ctx context.Context, in *CommiUserVideoUpdateRequest, opts ...grpc.CallOption) (*CommiUserVideoUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoUpdateResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoDelete(ctx context.Context, in *CommiUserVideoDeleteRequest, opts ...grpc.CallOption) (*CommiUserVideoDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoDeleteResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoGetShareUrl(ctx context.Context, in *CommiUserVideoGetShareUrlRequest, opts ...grpc.CallOption) (*CommiUserVideoGetShareUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoGetShareUrlResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoGetShareUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserVideoGenerationUsageList(ctx context.Context, in *CommiUserVideoGenerationUsageListRequest, opts ...grpc.CallOption) (*CommiUserVideoGenerationUsageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiUserVideoGenerationUsageListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserVideoGenerationUsageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) CommiUserSendWATIMessage(ctx context.Context, in *CommiSendWATIMessageRequest, opts ...grpc.CallOption) (*CommiSendWATIMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommiSendWATIMessageResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_CommiUserSendWATIMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoVoiceList(ctx context.Context, in *MovideoVoiceListRequest, opts ...grpc.CallOption) (*MovideoVoiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoVoiceListResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoVoiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoVoiceGet(ctx context.Context, in *MovideoVoiceGetRequest, opts ...grpc.CallOption) (*MovideoVoiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoVoiceGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoVoiceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserListVideo(ctx context.Context, in *MovideoUserListVideoRequest, opts ...grpc.CallOption) (*MovideoUserListVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserListVideoResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserListVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserNewVideoTask(ctx context.Context, in *MovideoUserNewVideoTaskRequest, opts ...grpc.CallOption) (*MovideoUserNewVideoTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserNewVideoTaskResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserNewVideoTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserTaskStatusGet(ctx context.Context, in *MovideoUserTaskStatusGetRequest, opts ...grpc.CallOption) (*MovideoUserTaskStatusGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserTaskStatusGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserTaskStatusGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserGetVideo(ctx context.Context, in *MovideoUserGetVideoRequest, opts ...grpc.CallOption) (*MovideoUserGetVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserGetVideoResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserGetVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserVideoExportTaskNew(ctx context.Context, in *MovideoUserVideoExportTaskNewRequest, opts ...grpc.CallOption) (*MovideoUserVideoExportTaskNewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserVideoExportTaskNewResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserVideoExportTaskNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserVideoExportTaskGet(ctx context.Context, in *MovideoUserVideoExportTaskGetRequest, opts ...grpc.CallOption) (*MovideoUserVideoExportTaskGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserVideoExportTaskGetResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserVideoExportTaskGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserUpdateVideo(ctx context.Context, in *MovideoUserUpdateVideoRequest, opts ...grpc.CallOption) (*MovideoUserUpdateVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserUpdateVideoResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserUpdateVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoUserDeleteVideo(ctx context.Context, in *MovideoUserDeleteVideoRequest, opts ...grpc.CallOption) (*MovideoUserDeleteVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoUserDeleteVideoResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoUserDeleteVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerServiceClient) MovideoSendFeedBack(ctx context.Context, in *MovideoSendFeedBackRequest, opts ...grpc.CallOption) (*MovideoSendFeedBackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovideoSendFeedBackResponse)
	err := c.cc.Invoke(ctx, ContentManagerService_MovideoSendFeedBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentManagerServiceServer is the server API for ContentManagerService service.
// All implementations must embed UnimplementedContentManagerServiceServer
// for forward compatibility
//
// 内容管理服务. 用于管理AI视频音频模版以及生成AI视频/音频的素材。
// [EN] Content Manager. Used to manage AI video/audio templates,
// clips for generating AI video/audio and generated AI video/audio.
type ContentManagerServiceServer interface {
	// 罗列所有的视频模版.
	// [EN] List all video templates.
	CommiTemplateList(context.Context, *CommiTemplateListRequest) (*CommiTemplateListResponse, error)
	// 获取指定视频模版.
	// [EN] Get the specified template by template ID.
	CommiTemplateGet(context.Context, *CommiTemplateGetRequest) (*CommiTemplateGetResponse, error)
	// [INTERNAL] 创建新的视频模版.
	// [INTERNAL] [EN] Create new template.
	CommiTemplateNew(context.Context, *CommiTemplateNewRequest) (*CommiTemplateNewResponse, error)
	// [INTERNAL] 更新指定模版.
	// [INTERNAL] [EN] Update the specified template by template ID.
	CommiTemplateUpdate(context.Context, *CommiTemplateUpdateRequest) (*CommiTemplateUpdateResponse, error)
	// [INTERNAL] 删除指定模版.
	// [INTERNAL] [EN] Delete the specified template by template ID.
	CommiTemplateDelete(context.Context, *CommiTemplateDeleteRequest) (*CommiTemplateDeleteResponse, error)
	// [INTERNAL] 罗列所有的脚本模版.
	// [INTERNAL] [EN] List all script templates.
	CommiTemplateScriptList(context.Context, *CommiTemplateScriptListRequest) (*CommiTemplateScriptListResponse, error)
	// [INTERNAL] 获取指定脚本模版.
	// [INTERNAL] [EN] Get the specified script template by ID.
	CommiTemplateScriptGet(context.Context, *CommiTemplateScriptGetRequest) (*CommiTemplateScriptGetResponse, error)
	// [INTERNAL] 创建新的脚本模版.
	// [INTERNAL] [EN] Create a new script template.
	CommiTemplateScriptNew(context.Context, *CommiTemplateScriptNewRequest) (*CommiTemplateScriptNewResponse, error)
	// [INTERNAL] 更新指定脚本模版.
	// [INTERNAL] [EN] Update the specified script template by ID.
	CommiTemplateScriptUpdate(context.Context, *CommiTemplateScriptUpdateRequest) (*CommiTemplateScriptUpdateResponse, error)
	// [INTERNAL] 删除指定脚本模版.
	// [INTERNAL] [EN] Delete the specified script template by ID.
	CommiTemplateScriptDelete(context.Context, *CommiTemplateScriptDeleteRequest) (*CommiTemplateScriptDeleteResponse, error)
	// 罗列所有的speaker.
	// [EN] List all speakers.
	CommiSpeakerList(context.Context, *CommiSpeakerListRequest) (*CommiSpeakerListResponse, error)
	// 获取指定speaker.
	// [INTERNAL] [EN] Get the specified speaker by ID.
	CommiSpeakerGet(context.Context, *CommiSpeakerGetRequest) (*CommiSpeakerGetResponse, error)
	// 创建新的speaker.
	// [INTERNAL] [EN] Create new speaker.
	CommiSpeakerNew(context.Context, *CommiSpeakerNewRequest) (*CommiSpeakerNewResponse, error)
	// 更新指定的speaker.
	// [INTERNAL] [EN] Update the specified speaker by ID.
	CommiSpeakerUpdate(context.Context, *CommiSpeakerUpdateRequest) (*CommiSpeakerUpdateResponse, error)
	// 删除指定的speaker.
	// [INTERNAL] [EN] Delete the specified speaker by ID.
	CommiSpeakerDelete(context.Context, *CommiSpeakerDeleteRequest) (*CommiSpeakerDeleteResponse, error)
	// 获取示例视频
	// [INTERNAL] [EN] Get sample video by template id and speaker id.
	CommiSpeakerSampleVideoGet(context.Context, *CommiSpeakerSampleVideoGetRequest) (*CommiSpeakerSampleVideoGetResponse, error)
	// 罗列用户的全部生成视频.
	// [EN] List all videos generated by the specified user.
	CommiUserVideoList(context.Context, *CommiUserVideoListRequest) (*CommiUserVideoListResponse, error)
	// 获取用户的指定视频
	// [EN] Get the specified video by video ID.
	CommiUserVideoGet(context.Context, *CommiUserVideoGetRequest) (*CommiUserVideoGetResponse, error)
	// 用户创建生成视频的任务
	// [EN] Create a video generation task.
	CommiUserVideoTaskNew(context.Context, *CommiUserVideoNewTaskRequest) (*CommiUserVideoNewTaskResponse, error)
	// 用户查询指定视频的状态
	// [EN] Check a video generation task status by video ID.
	CommiUserVideoTaskStatusGet(context.Context, *CommiUserVideoTaskStatusGetRequest) (*CommiUserVideoTaskStatusGetResponse, error)
	// 用户更新指定视频
	// [EN] Update the specified video by ID.
	CommiUserVideoUpdate(context.Context, *CommiUserVideoUpdateRequest) (*CommiUserVideoUpdateResponse, error)
	// 用户删除指定视频
	// [EN] Delete the specified video by ID.
	CommiUserVideoDelete(context.Context, *CommiUserVideoDeleteRequest) (*CommiUserVideoDeleteResponse, error)
	// 用户视频生成记录
	// [EN] List user video generation usage.
	CommiUserVideoGetShareUrl(context.Context, *CommiUserVideoGetShareUrlRequest) (*CommiUserVideoGetShareUrlResponse, error)
	// 用户视频生成记录
	// [EN] List user video generation usage.
	CommiUserVideoGenerationUsageList(context.Context, *CommiUserVideoGenerationUsageListRequest) (*CommiUserVideoGenerationUsageListResponse, error)
	// 批量发送wati消息.
	// [EN] Batch send wati message.
	CommiUserSendWATIMessage(context.Context, *CommiSendWATIMessageRequest) (*CommiSendWATIMessageResponse, error)
	MovideoVoiceList(context.Context, *MovideoVoiceListRequest) (*MovideoVoiceListResponse, error)
	MovideoVoiceGet(context.Context, *MovideoVoiceGetRequest) (*MovideoVoiceGetResponse, error)
	MovideoUserListVideo(context.Context, *MovideoUserListVideoRequest) (*MovideoUserListVideoResponse, error)
	MovideoUserNewVideoTask(context.Context, *MovideoUserNewVideoTaskRequest) (*MovideoUserNewVideoTaskResponse, error)
	MovideoUserTaskStatusGet(context.Context, *MovideoUserTaskStatusGetRequest) (*MovideoUserTaskStatusGetResponse, error)
	MovideoUserGetVideo(context.Context, *MovideoUserGetVideoRequest) (*MovideoUserGetVideoResponse, error)
	MovideoUserVideoExportTaskNew(context.Context, *MovideoUserVideoExportTaskNewRequest) (*MovideoUserVideoExportTaskNewResponse, error)
	MovideoUserVideoExportTaskGet(context.Context, *MovideoUserVideoExportTaskGetRequest) (*MovideoUserVideoExportTaskGetResponse, error)
	MovideoUserUpdateVideo(context.Context, *MovideoUserUpdateVideoRequest) (*MovideoUserUpdateVideoResponse, error)
	MovideoUserDeleteVideo(context.Context, *MovideoUserDeleteVideoRequest) (*MovideoUserDeleteVideoResponse, error)
	MovideoSendFeedBack(context.Context, *MovideoSendFeedBackRequest) (*MovideoSendFeedBackResponse, error)
	mustEmbedUnimplementedContentManagerServiceServer()
}

// UnimplementedContentManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentManagerServiceServer struct {
}

func (UnimplementedContentManagerServiceServer) CommiTemplateList(context.Context, *CommiTemplateListRequest) (*CommiTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateList not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateGet(context.Context, *CommiTemplateGetRequest) (*CommiTemplateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateNew(context.Context, *CommiTemplateNewRequest) (*CommiTemplateNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateNew not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateUpdate(context.Context, *CommiTemplateUpdateRequest) (*CommiTemplateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateUpdate not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateDelete(context.Context, *CommiTemplateDeleteRequest) (*CommiTemplateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateDelete not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateScriptList(context.Context, *CommiTemplateScriptListRequest) (*CommiTemplateScriptListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateScriptList not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateScriptGet(context.Context, *CommiTemplateScriptGetRequest) (*CommiTemplateScriptGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateScriptGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateScriptNew(context.Context, *CommiTemplateScriptNewRequest) (*CommiTemplateScriptNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateScriptNew not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateScriptUpdate(context.Context, *CommiTemplateScriptUpdateRequest) (*CommiTemplateScriptUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateScriptUpdate not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiTemplateScriptDelete(context.Context, *CommiTemplateScriptDeleteRequest) (*CommiTemplateScriptDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiTemplateScriptDelete not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerList(context.Context, *CommiSpeakerListRequest) (*CommiSpeakerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerList not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerGet(context.Context, *CommiSpeakerGetRequest) (*CommiSpeakerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerNew(context.Context, *CommiSpeakerNewRequest) (*CommiSpeakerNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerNew not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerUpdate(context.Context, *CommiSpeakerUpdateRequest) (*CommiSpeakerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerUpdate not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerDelete(context.Context, *CommiSpeakerDeleteRequest) (*CommiSpeakerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerDelete not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiSpeakerSampleVideoGet(context.Context, *CommiSpeakerSampleVideoGetRequest) (*CommiSpeakerSampleVideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiSpeakerSampleVideoGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoList(context.Context, *CommiUserVideoListRequest) (*CommiUserVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoList not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoGet(context.Context, *CommiUserVideoGetRequest) (*CommiUserVideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoTaskNew(context.Context, *CommiUserVideoNewTaskRequest) (*CommiUserVideoNewTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoTaskNew not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoTaskStatusGet(context.Context, *CommiUserVideoTaskStatusGetRequest) (*CommiUserVideoTaskStatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoTaskStatusGet not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoUpdate(context.Context, *CommiUserVideoUpdateRequest) (*CommiUserVideoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoUpdate not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoDelete(context.Context, *CommiUserVideoDeleteRequest) (*CommiUserVideoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoDelete not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoGetShareUrl(context.Context, *CommiUserVideoGetShareUrlRequest) (*CommiUserVideoGetShareUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoGetShareUrl not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserVideoGenerationUsageList(context.Context, *CommiUserVideoGenerationUsageListRequest) (*CommiUserVideoGenerationUsageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserVideoGenerationUsageList not implemented")
}
func (UnimplementedContentManagerServiceServer) CommiUserSendWATIMessage(context.Context, *CommiSendWATIMessageRequest) (*CommiSendWATIMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommiUserSendWATIMessage not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoVoiceList(context.Context, *MovideoVoiceListRequest) (*MovideoVoiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoVoiceList not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoVoiceGet(context.Context, *MovideoVoiceGetRequest) (*MovideoVoiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoVoiceGet not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserListVideo(context.Context, *MovideoUserListVideoRequest) (*MovideoUserListVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserListVideo not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserNewVideoTask(context.Context, *MovideoUserNewVideoTaskRequest) (*MovideoUserNewVideoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserNewVideoTask not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserTaskStatusGet(context.Context, *MovideoUserTaskStatusGetRequest) (*MovideoUserTaskStatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserTaskStatusGet not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserGetVideo(context.Context, *MovideoUserGetVideoRequest) (*MovideoUserGetVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserGetVideo not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserVideoExportTaskNew(context.Context, *MovideoUserVideoExportTaskNewRequest) (*MovideoUserVideoExportTaskNewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserVideoExportTaskNew not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserVideoExportTaskGet(context.Context, *MovideoUserVideoExportTaskGetRequest) (*MovideoUserVideoExportTaskGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserVideoExportTaskGet not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserUpdateVideo(context.Context, *MovideoUserUpdateVideoRequest) (*MovideoUserUpdateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserUpdateVideo not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoUserDeleteVideo(context.Context, *MovideoUserDeleteVideoRequest) (*MovideoUserDeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoUserDeleteVideo not implemented")
}
func (UnimplementedContentManagerServiceServer) MovideoSendFeedBack(context.Context, *MovideoSendFeedBackRequest) (*MovideoSendFeedBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovideoSendFeedBack not implemented")
}
func (UnimplementedContentManagerServiceServer) mustEmbedUnimplementedContentManagerServiceServer() {}

// UnsafeContentManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentManagerServiceServer will
// result in compilation errors.
type UnsafeContentManagerServiceServer interface {
	mustEmbedUnimplementedContentManagerServiceServer()
}

func RegisterContentManagerServiceServer(s grpc.ServiceRegistrar, srv ContentManagerServiceServer) {
	s.RegisterService(&ContentManagerService_ServiceDesc, srv)
}

func _ContentManagerService_CommiTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateList(ctx, req.(*CommiTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateGet(ctx, req.(*CommiTemplateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateNew(ctx, req.(*CommiTemplateNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateUpdate(ctx, req.(*CommiTemplateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateDelete(ctx, req.(*CommiTemplateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateScriptList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateScriptList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptList(ctx, req.(*CommiTemplateScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateScriptGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateScriptGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateScriptGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptGet(ctx, req.(*CommiTemplateScriptGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateScriptNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateScriptNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateScriptNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptNew(ctx, req.(*CommiTemplateScriptNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateScriptUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateScriptUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateScriptUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptUpdate(ctx, req.(*CommiTemplateScriptUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiTemplateScriptDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiTemplateScriptDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiTemplateScriptDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiTemplateScriptDelete(ctx, req.(*CommiTemplateScriptDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerList(ctx, req.(*CommiSpeakerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerGet(ctx, req.(*CommiSpeakerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerNew(ctx, req.(*CommiSpeakerNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerUpdate(ctx, req.(*CommiSpeakerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerDelete(ctx, req.(*CommiSpeakerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiSpeakerSampleVideoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSpeakerSampleVideoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiSpeakerSampleVideoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiSpeakerSampleVideoGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiSpeakerSampleVideoGet(ctx, req.(*CommiSpeakerSampleVideoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoList(ctx, req.(*CommiUserVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoGet(ctx, req.(*CommiUserVideoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoTaskNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoNewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoTaskNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoTaskNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoTaskNew(ctx, req.(*CommiUserVideoNewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoTaskStatusGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoTaskStatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoTaskStatusGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoTaskStatusGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoTaskStatusGet(ctx, req.(*CommiUserVideoTaskStatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoUpdate(ctx, req.(*CommiUserVideoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoDelete(ctx, req.(*CommiUserVideoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoGetShareUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoGetShareUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoGetShareUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoGetShareUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoGetShareUrl(ctx, req.(*CommiUserVideoGetShareUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserVideoGenerationUsageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiUserVideoGenerationUsageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserVideoGenerationUsageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserVideoGenerationUsageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserVideoGenerationUsageList(ctx, req.(*CommiUserVideoGenerationUsageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_CommiUserSendWATIMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommiSendWATIMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).CommiUserSendWATIMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_CommiUserSendWATIMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).CommiUserSendWATIMessage(ctx, req.(*CommiSendWATIMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoVoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoVoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoVoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoVoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoVoiceList(ctx, req.(*MovideoVoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoVoiceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoVoiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoVoiceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoVoiceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoVoiceGet(ctx, req.(*MovideoVoiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserListVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserListVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserListVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserListVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserListVideo(ctx, req.(*MovideoUserListVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserNewVideoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserNewVideoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserNewVideoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserNewVideoTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserNewVideoTask(ctx, req.(*MovideoUserNewVideoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserTaskStatusGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserTaskStatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserTaskStatusGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserTaskStatusGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserTaskStatusGet(ctx, req.(*MovideoUserTaskStatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserGetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserGetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserGetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserGetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserGetVideo(ctx, req.(*MovideoUserGetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserVideoExportTaskNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserVideoExportTaskNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserVideoExportTaskNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserVideoExportTaskNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserVideoExportTaskNew(ctx, req.(*MovideoUserVideoExportTaskNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserVideoExportTaskGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserVideoExportTaskGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserVideoExportTaskGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserVideoExportTaskGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserVideoExportTaskGet(ctx, req.(*MovideoUserVideoExportTaskGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserUpdateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserUpdateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserUpdateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserUpdateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserUpdateVideo(ctx, req.(*MovideoUserUpdateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoUserDeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoUserDeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoUserDeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoUserDeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoUserDeleteVideo(ctx, req.(*MovideoUserDeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerService_MovideoSendFeedBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovideoSendFeedBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerServiceServer).MovideoSendFeedBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerService_MovideoSendFeedBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerServiceServer).MovideoSendFeedBack(ctx, req.(*MovideoSendFeedBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentManagerService_ServiceDesc is the grpc.ServiceDesc for ContentManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wati.ai_platform.protocol.content_manager_service.ContentManagerService",
	HandlerType: (*ContentManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommiTemplateList",
			Handler:    _ContentManagerService_CommiTemplateList_Handler,
		},
		{
			MethodName: "CommiTemplateGet",
			Handler:    _ContentManagerService_CommiTemplateGet_Handler,
		},
		{
			MethodName: "CommiTemplateNew",
			Handler:    _ContentManagerService_CommiTemplateNew_Handler,
		},
		{
			MethodName: "CommiTemplateUpdate",
			Handler:    _ContentManagerService_CommiTemplateUpdate_Handler,
		},
		{
			MethodName: "CommiTemplateDelete",
			Handler:    _ContentManagerService_CommiTemplateDelete_Handler,
		},
		{
			MethodName: "CommiTemplateScriptList",
			Handler:    _ContentManagerService_CommiTemplateScriptList_Handler,
		},
		{
			MethodName: "CommiTemplateScriptGet",
			Handler:    _ContentManagerService_CommiTemplateScriptGet_Handler,
		},
		{
			MethodName: "CommiTemplateScriptNew",
			Handler:    _ContentManagerService_CommiTemplateScriptNew_Handler,
		},
		{
			MethodName: "CommiTemplateScriptUpdate",
			Handler:    _ContentManagerService_CommiTemplateScriptUpdate_Handler,
		},
		{
			MethodName: "CommiTemplateScriptDelete",
			Handler:    _ContentManagerService_CommiTemplateScriptDelete_Handler,
		},
		{
			MethodName: "CommiSpeakerList",
			Handler:    _ContentManagerService_CommiSpeakerList_Handler,
		},
		{
			MethodName: "CommiSpeakerGet",
			Handler:    _ContentManagerService_CommiSpeakerGet_Handler,
		},
		{
			MethodName: "CommiSpeakerNew",
			Handler:    _ContentManagerService_CommiSpeakerNew_Handler,
		},
		{
			MethodName: "CommiSpeakerUpdate",
			Handler:    _ContentManagerService_CommiSpeakerUpdate_Handler,
		},
		{
			MethodName: "CommiSpeakerDelete",
			Handler:    _ContentManagerService_CommiSpeakerDelete_Handler,
		},
		{
			MethodName: "CommiSpeakerSampleVideoGet",
			Handler:    _ContentManagerService_CommiSpeakerSampleVideoGet_Handler,
		},
		{
			MethodName: "CommiUserVideoList",
			Handler:    _ContentManagerService_CommiUserVideoList_Handler,
		},
		{
			MethodName: "CommiUserVideoGet",
			Handler:    _ContentManagerService_CommiUserVideoGet_Handler,
		},
		{
			MethodName: "CommiUserVideoTaskNew",
			Handler:    _ContentManagerService_CommiUserVideoTaskNew_Handler,
		},
		{
			MethodName: "CommiUserVideoTaskStatusGet",
			Handler:    _ContentManagerService_CommiUserVideoTaskStatusGet_Handler,
		},
		{
			MethodName: "CommiUserVideoUpdate",
			Handler:    _ContentManagerService_CommiUserVideoUpdate_Handler,
		},
		{
			MethodName: "CommiUserVideoDelete",
			Handler:    _ContentManagerService_CommiUserVideoDelete_Handler,
		},
		{
			MethodName: "CommiUserVideoGetShareUrl",
			Handler:    _ContentManagerService_CommiUserVideoGetShareUrl_Handler,
		},
		{
			MethodName: "CommiUserVideoGenerationUsageList",
			Handler:    _ContentManagerService_CommiUserVideoGenerationUsageList_Handler,
		},
		{
			MethodName: "CommiUserSendWATIMessage",
			Handler:    _ContentManagerService_CommiUserSendWATIMessage_Handler,
		},
		{
			MethodName: "MovideoVoiceList",
			Handler:    _ContentManagerService_MovideoVoiceList_Handler,
		},
		{
			MethodName: "MovideoVoiceGet",
			Handler:    _ContentManagerService_MovideoVoiceGet_Handler,
		},
		{
			MethodName: "MovideoUserListVideo",
			Handler:    _ContentManagerService_MovideoUserListVideo_Handler,
		},
		{
			MethodName: "MovideoUserNewVideoTask",
			Handler:    _ContentManagerService_MovideoUserNewVideoTask_Handler,
		},
		{
			MethodName: "MovideoUserTaskStatusGet",
			Handler:    _ContentManagerService_MovideoUserTaskStatusGet_Handler,
		},
		{
			MethodName: "MovideoUserGetVideo",
			Handler:    _ContentManagerService_MovideoUserGetVideo_Handler,
		},
		{
			MethodName: "MovideoUserVideoExportTaskNew",
			Handler:    _ContentManagerService_MovideoUserVideoExportTaskNew_Handler,
		},
		{
			MethodName: "MovideoUserVideoExportTaskGet",
			Handler:    _ContentManagerService_MovideoUserVideoExportTaskGet_Handler,
		},
		{
			MethodName: "MovideoUserUpdateVideo",
			Handler:    _ContentManagerService_MovideoUserUpdateVideo_Handler,
		},
		{
			MethodName: "MovideoUserDeleteVideo",
			Handler:    _ContentManagerService_MovideoUserDeleteVideo_Handler,
		},
		{
			MethodName: "MovideoSendFeedBack",
			Handler:    _ContentManagerService_MovideoSendFeedBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content-manager-service/api.proto",
}
