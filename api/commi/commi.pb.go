// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: commi.proto

package commi

import (
	common "github.com/ClareAI/ai-platform-protocol/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CATEGORY int32

const (
	CATEGORY_ALL              CATEGORY = 0
	CATEGORY_COMMERCE         CATEGORY = 1
	CATEGORY_MARKETING        CATEGORY = 2
	CATEGORY_PERSONAL_MESSAGE CATEGORY = 3
)

// Enum value maps for CATEGORY.
var (
	CATEGORY_name = map[int32]string{
		0: "ALL",
		1: "COMMERCE",
		2: "MARKETING",
		3: "PERSONAL_MESSAGE",
	}
	CATEGORY_value = map[string]int32{
		"ALL":              0,
		"COMMERCE":         1,
		"MARKETING":        2,
		"PERSONAL_MESSAGE": 3,
	}
)

func (x CATEGORY) Enum() *CATEGORY {
	p := new(CATEGORY)
	*p = x
	return p
}

func (x CATEGORY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CATEGORY) Descriptor() protoreflect.EnumDescriptor {
	return file_commi_proto_enumTypes[0].Descriptor()
}

func (CATEGORY) Type() protoreflect.EnumType {
	return &file_commi_proto_enumTypes[0]
}

func (x CATEGORY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CATEGORY.Descriptor instead.
func (CATEGORY) EnumDescriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{0}
}

type LANGUAGE int32

const (
	LANGUAGE_LANGUAGE_UNKNOWN LANGUAGE = 0
	LANGUAGE_EN_GB            LANGUAGE = 1
	LANGUAGE_EN_US            LANGUAGE = 2
	LANGUAGE_EN_IN            LANGUAGE = 3
)

// Enum value maps for LANGUAGE.
var (
	LANGUAGE_name = map[int32]string{
		0: "LANGUAGE_UNKNOWN",
		1: "EN_GB",
		2: "EN_US",
		3: "EN_IN",
	}
	LANGUAGE_value = map[string]int32{
		"LANGUAGE_UNKNOWN": 0,
		"EN_GB":            1,
		"EN_US":            2,
		"EN_IN":            3,
	}
)

func (x LANGUAGE) Enum() *LANGUAGE {
	p := new(LANGUAGE)
	*p = x
	return p
}

func (x LANGUAGE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LANGUAGE) Descriptor() protoreflect.EnumDescriptor {
	return file_commi_proto_enumTypes[1].Descriptor()
}

func (LANGUAGE) Type() protoreflect.EnumType {
	return &file_commi_proto_enumTypes[1]
}

func (x LANGUAGE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LANGUAGE.Descriptor instead.
func (LANGUAGE) EnumDescriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{1}
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the template.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Detailed description of the template.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Category of the template.
	Category CATEGORY `protobuf:"varint,4,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// Tags associated with the template.
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// URL of the thumbnail image, valid for 24 hours.
	ThumbnailUrl string `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// Template default speaker. Use to get speaker sample video.
	DefaultSpeaker string `protobuf:"bytes,8,opt,name=default_speaker,json=defaultSpeaker,proto3" json:"default_speaker,omitempty"`
	// Indicates whether the template is marked as a favourite by the user.
	Favourite common.USERFAVOURITE `protobuf:"varint,9,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
	// Timestamp when the template was created.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Timestamp when the template was last updated.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{0}
}

func (x *Template) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Template) GetCategory() CATEGORY {
	if x != nil {
		return x.Category
	}
	return CATEGORY_ALL
}

func (x *Template) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Template) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Template) GetDefaultSpeaker() string {
	if x != nil {
		return x.DefaultSpeaker
	}
	return ""
}

func (x *Template) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

func (x *Template) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Template) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

// Speaker represents a speaker's profile used in video templates.
type Speaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the speaker.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the speaker.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Language spoken by the speaker.
	Language LANGUAGE `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// Gender of the speaker.
	Gender common.GENDER `protobuf:"varint,4,opt,name=gender,proto3,enum=wati.ai_platform.protocol.common.GENDER" json:"gender,omitempty"`
	// Name of an audio sample file for the speaker.
	AudioSample string `protobuf:"bytes,5,opt,name=audio_sample,json=audioSample,proto3" json:"audio_sample,omitempty"`
	// Name of an image file used as the speaker's avatar.
	AvatarImage string `protobuf:"bytes,6,opt,name=avatar_image,json=avatarImage,proto3" json:"avatar_image,omitempty"`
	// Default tone used by the speaker.
	Tone common.TONE `protobuf:"varint,7,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// Indicates whether the speaker is marked as a favourite by the user.
	Favourite common.USERFAVOURITE `protobuf:"varint,8,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
	// Timestamp when the speaker profile was created.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Timestamp when the speaker profile was last updated.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Speaker) Reset() {
	*x = Speaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speaker) ProtoMessage() {}

func (x *Speaker) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speaker.ProtoReflect.Descriptor instead.
func (*Speaker) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{1}
}

func (x *Speaker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Speaker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Speaker) GetLanguage() LANGUAGE {
	if x != nil {
		return x.Language
	}
	return LANGUAGE_LANGUAGE_UNKNOWN
}

func (x *Speaker) GetGender() common.GENDER {
	if x != nil {
		return x.Gender
	}
	return common.GENDER(0)
}

func (x *Speaker) GetAudioSample() string {
	if x != nil {
		return x.AudioSample
	}
	return ""
}

func (x *Speaker) GetAvatarImage() string {
	if x != nil {
		return x.AvatarImage
	}
	return ""
}

func (x *Speaker) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *Speaker) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

func (x *Speaker) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Speaker) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

// Video represents a generated video with associated metadata.
type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the video.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Detailed description of the video.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// URL of the generated video, valid for 24 hours.
	VideoUrl string `protobuf:"bytes,4,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	// URL of the video thumbnail, valid for 24 hours. Defaults to the template's thumbnail if not specified.
	ThumbnailUrl string `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// Duration of the video in seconds.
	Duration int32 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// Video category, matching the template used.
	Category CATEGORY `protobuf:"varint,7,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// ID of the template used for generating the video.
	TemplateId string `protobuf:"bytes,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// ID of the speaker used in the video.
	SpeakerId string `protobuf:"bytes,9,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// ID of the script template used in the video.
	ScriptId string `protobuf:"bytes,10,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	// Key-value pairs for script parameters, where the key is the parameter name and the value is the content filled into the template.
	ScriptParameter map[string]string `protobuf:"bytes,11,rep,name=script_parameter,json=scriptParameter,proto3" json:"script_parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tone of the video, defaults to the speaker's tone if not specified.
	Tone common.TONE `protobuf:"varint,12,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// Current status of the video generation task.
	Status common.TASKSTATUS `protobuf:"varint,13,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// Timestamp when the video was created.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Timestamp when the video was last updated.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{2}
}

func (x *Video) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Video) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Video) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Video) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Video) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Video) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Video) GetCategory() CATEGORY {
	if x != nil {
		return x.Category
	}
	return CATEGORY_ALL
}

func (x *Video) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *Video) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *Video) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *Video) GetScriptParameter() map[string]string {
	if x != nil {
		return x.ScriptParameter
	}
	return nil
}

func (x *Video) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *Video) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *Video) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Video) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type TemplateScriptParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique key/name of the variable within the template.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Default value for the variable if no value is provided.
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Indicates whether this parameter is mandatory. If true, the default value is used if no value is provided. If false, the sentence containing the parameter will be omitted if no value is provided.
	IsRequired bool `protobuf:"varint,3,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
}

func (x *TemplateScriptParameter) Reset() {
	*x = TemplateScriptParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateScriptParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateScriptParameter) ProtoMessage() {}

func (x *TemplateScriptParameter) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateScriptParameter.ProtoReflect.Descriptor instead.
func (*TemplateScriptParameter) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{3}
}

func (x *TemplateScriptParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TemplateScriptParameter) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *TemplateScriptParameter) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

// TemplateScript represents a script template that contains text with placeholders for variable content.
type TemplateScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the script template.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the script template.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Content of the script template, which includes placeholders for parameters denoted by `{{key}}`.
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// Detailed definitions of parameters used within the script template content.
	Parameters []*TemplateScriptParameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Timestamp when the script template was created.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Timestamp when the script template was last updated.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *TemplateScript) Reset() {
	*x = TemplateScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateScript) ProtoMessage() {}

func (x *TemplateScript) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateScript.ProtoReflect.Descriptor instead.
func (*TemplateScript) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{4}
}

func (x *TemplateScript) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TemplateScript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateScript) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TemplateScript) GetParameters() []*TemplateScriptParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TemplateScript) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *TemplateScript) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type VideoGenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Script template content.
	Template string `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	// Parameter Key-value of script template.
	Values map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Speaker uuid
	SpeakerId string `protobuf:"bytes,4,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// Speaker using language. same string with LANGUAGE type.
	Language LANGUAGE `protobuf:"varint,5,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// Speaker tone. same string with tone type.
	Tone common.TONE `protobuf:"varint,6,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
}

func (x *VideoGenerateRequest) Reset() {
	*x = VideoGenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGenerateRequest) ProtoMessage() {}

func (x *VideoGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGenerateRequest.ProtoReflect.Descriptor instead.
func (*VideoGenerateRequest) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{5}
}

func (x *VideoGenerateRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoGenerateRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *VideoGenerateRequest) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *VideoGenerateRequest) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *VideoGenerateRequest) GetLanguage() LANGUAGE {
	if x != nil {
		return x.Language
	}
	return LANGUAGE_LANGUAGE_UNKNOWN
}

func (x *VideoGenerateRequest) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

type VideoGenerateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video ID.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// error_info
	ErrorInfo string `protobuf:"bytes,3,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	Eta       int32  `protobuf:"varint,4,opt,name=eta,proto3" json:"eta,omitempty"`
	// video object name in oss. Valid only if the task is successful..
	Object string `protobuf:"bytes,5,opt,name=object,proto3" json:"object,omitempty"`
	// video duration. Valid only if the task is successful. Unit: seconds.
	Duration int32 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// video word count.
	WordCount int32 `protobuf:"varint,7,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
}

func (x *VideoGenerateResult) Reset() {
	*x = VideoGenerateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGenerateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGenerateResult) ProtoMessage() {}

func (x *VideoGenerateResult) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGenerateResult.ProtoReflect.Descriptor instead.
func (*VideoGenerateResult) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{6}
}

func (x *VideoGenerateResult) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoGenerateResult) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *VideoGenerateResult) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *VideoGenerateResult) GetEta() int32 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *VideoGenerateResult) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *VideoGenerateResult) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoGenerateResult) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

type VideoGenerationUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Total  int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Fail   int32                  `protobuf:"varint,3,opt,name=fail,proto3" json:"fail,omitempty"`
	Source common.TASKSOURCE      `protobuf:"varint,4,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.TASKSOURCE" json:"source,omitempty"`
}

func (x *VideoGenerationUsage) Reset() {
	*x = VideoGenerationUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGenerationUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGenerationUsage) ProtoMessage() {}

func (x *VideoGenerationUsage) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGenerationUsage.ProtoReflect.Descriptor instead.
func (*VideoGenerationUsage) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{7}
}

func (x *VideoGenerationUsage) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *VideoGenerationUsage) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VideoGenerationUsage) GetFail() int32 {
	if x != nil {
		return x.Fail
	}
	return 0
}

func (x *VideoGenerationUsage) GetSource() common.TASKSOURCE {
	if x != nil {
		return x.Source
	}
	return common.TASKSOURCE(0)
}

type CreditInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 剩下的credit
	Credit float32 `protobuf:"fixed32,1,opt,name=credit,proto3" json:"credit,omitempty"`
}

func (x *CreditInfo) Reset() {
	*x = CreditInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditInfo) ProtoMessage() {}

func (x *CreditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditInfo.ProtoReflect.Descriptor instead.
func (*CreditInfo) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{8}
}

func (x *CreditInfo) GetCredit() float32 {
	if x != nil {
		return x.Credit
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 用户email
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// 用户电话
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// 用户地址
	Location string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// 用户使用语言
	Language string `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	// 用户来源
	Source common.USERSOURCE `protobuf:"varint,8,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.USERSOURCE" json:"source,omitempty"`
	// 用户类型
	Type common.USERTYPE `protobuf:"varint,9,opt,name=type,proto3,enum=wati.ai_platform.protocol.common.USERTYPE" json:"type,omitempty"`
	// 用户基本信息。前端传入json(industry company, perfer content, etc). 后端不验证直接存。
	Information string `protobuf:"bytes,10,opt,name=information,proto3" json:"information,omitempty"`
	// 用户使用情况以及限制.
	Credits *CreditInfo `protobuf:"bytes,11,opt,name=credits,proto3" json:"credits,omitempty"`
	// 创建时间
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 更新时间
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{9}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *UserInfo) GetSource() common.USERSOURCE {
	if x != nil {
		return x.Source
	}
	return common.USERSOURCE(0)
}

func (x *UserInfo) GetType() common.USERTYPE {
	if x != nil {
		return x.Type
	}
	return common.USERTYPE(0)
}

func (x *UserInfo) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *UserInfo) GetCredits() *CreditInfo {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *UserInfo) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *UserInfo) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type APIKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key 唯一标识
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// create 完整
	// list 模糊: sk-前5位********
	SensitiveId string `protobuf:"bytes,2,opt,name=sensitive_id,json=sensitiveId,proto3" json:"sensitive_id,omitempty"`
	// key名字
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 上一次使用时间
	LastUsedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
}

func (x *APIKeyInfo) Reset() {
	*x = APIKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKeyInfo) ProtoMessage() {}

func (x *APIKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKeyInfo.ProtoReflect.Descriptor instead.
func (*APIKeyInfo) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{10}
}

func (x *APIKeyInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIKeyInfo) GetSensitiveId() string {
	if x != nil {
		return x.SensitiveId
	}
	return ""
}

func (x *APIKeyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIKeyInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *APIKeyInfo) GetLastUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedAt
	}
	return nil
}

type CreditUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalCredits float32                `protobuf:"fixed32,2,opt,name=total_credits,json=totalCredits,proto3" json:"total_credits,omitempty"`
	FailCredits  float32                `protobuf:"fixed32,3,opt,name=fail_credits,json=failCredits,proto3" json:"fail_credits,omitempty"`
	Source       common.TASKSOURCE      `protobuf:"varint,4,opt,name=source,proto3,enum=wati.ai_platform.protocol.common.TASKSOURCE" json:"source,omitempty"`
}

func (x *CreditUsage) Reset() {
	*x = CreditUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditUsage) ProtoMessage() {}

func (x *CreditUsage) ProtoReflect() protoreflect.Message {
	mi := &file_commi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditUsage.ProtoReflect.Descriptor instead.
func (*CreditUsage) Descriptor() ([]byte, []int) {
	return file_commi_proto_rawDescGZIP(), []int{11}
}

func (x *CreditUsage) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CreditUsage) GetTotalCredits() float32 {
	if x != nil {
		return x.TotalCredits
	}
	return 0
}

func (x *CreditUsage) GetFailCredits() float32 {
	if x != nil {
		return x.FailCredits
	}
	return 0
}

func (x *CreditUsage) GetSource() common.TASKSOURCE {
	if x != nil {
		return x.Source
	}
	return common.TASKSOURCE(0)
}

var File_commi_proto protoreflect.FileDescriptor

var file_commi_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x03,
	0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x07, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e, 0x45, 0x52,
	0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52,
	0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x1e,
	0x10, 0x1f, 0x22, 0xfb, 0x05, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f,
	0x4e, 0x45, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x1a, 0x42, 0x0a, 0x14, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f,
	0x22, 0x71, 0x0a, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x22, 0x85, 0x03, 0x0a,
	0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x22, 0xf3, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2a, 0x46, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x08, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4e, 0x5f, 0x47, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x5f, 0x55,
	0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x03, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61,
	0x72, 0x65, 0x41, 0x49, 0x2f, 0x61, 0x69, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commi_proto_rawDescOnce sync.Once
	file_commi_proto_rawDescData = file_commi_proto_rawDesc
)

func file_commi_proto_rawDescGZIP() []byte {
	file_commi_proto_rawDescOnce.Do(func() {
		file_commi_proto_rawDescData = protoimpl.X.CompressGZIP(file_commi_proto_rawDescData)
	})
	return file_commi_proto_rawDescData
}

var file_commi_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_commi_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_commi_proto_goTypes = []interface{}{
	(CATEGORY)(0),                   // 0: wati.ai_platform.protocol.commi.CATEGORY
	(LANGUAGE)(0),                   // 1: wati.ai_platform.protocol.commi.LANGUAGE
	(*Template)(nil),                // 2: wati.ai_platform.protocol.commi.Template
	(*Speaker)(nil),                 // 3: wati.ai_platform.protocol.commi.Speaker
	(*Video)(nil),                   // 4: wati.ai_platform.protocol.commi.Video
	(*TemplateScriptParameter)(nil), // 5: wati.ai_platform.protocol.commi.TemplateScriptParameter
	(*TemplateScript)(nil),          // 6: wati.ai_platform.protocol.commi.TemplateScript
	(*VideoGenerateRequest)(nil),    // 7: wati.ai_platform.protocol.commi.VideoGenerateRequest
	(*VideoGenerateResult)(nil),     // 8: wati.ai_platform.protocol.commi.VideoGenerateResult
	(*VideoGenerationUsage)(nil),    // 9: wati.ai_platform.protocol.commi.VideoGenerationUsage
	(*CreditInfo)(nil),              // 10: wati.ai_platform.protocol.commi.CreditInfo
	(*UserInfo)(nil),                // 11: wati.ai_platform.protocol.commi.UserInfo
	(*APIKeyInfo)(nil),              // 12: wati.ai_platform.protocol.commi.APIKeyInfo
	(*CreditUsage)(nil),             // 13: wati.ai_platform.protocol.commi.CreditUsage
	nil,                             // 14: wati.ai_platform.protocol.commi.Video.ScriptParameterEntry
	nil,                             // 15: wati.ai_platform.protocol.commi.VideoGenerateRequest.ValuesEntry
	(common.USERFAVOURITE)(0),       // 16: wati.ai_platform.protocol.common.USERFAVOURITE
	(*timestamppb.Timestamp)(nil),   // 17: google.protobuf.Timestamp
	(common.GENDER)(0),              // 18: wati.ai_platform.protocol.common.GENDER
	(common.TONE)(0),                // 19: wati.ai_platform.protocol.common.TONE
	(common.TASKSTATUS)(0),          // 20: wati.ai_platform.protocol.common.TASKSTATUS
	(common.TASKSOURCE)(0),          // 21: wati.ai_platform.protocol.common.TASKSOURCE
	(common.USERSOURCE)(0),          // 22: wati.ai_platform.protocol.common.USERSOURCE
	(common.USERTYPE)(0),            // 23: wati.ai_platform.protocol.common.USERTYPE
}
var file_commi_proto_depIdxs = []int32{
	0,  // 0: wati.ai_platform.protocol.commi.Template.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	16, // 1: wati.ai_platform.protocol.commi.Template.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	17, // 2: wati.ai_platform.protocol.commi.Template.create_at:type_name -> google.protobuf.Timestamp
	17, // 3: wati.ai_platform.protocol.commi.Template.update_at:type_name -> google.protobuf.Timestamp
	1,  // 4: wati.ai_platform.protocol.commi.Speaker.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	18, // 5: wati.ai_platform.protocol.commi.Speaker.gender:type_name -> wati.ai_platform.protocol.common.GENDER
	19, // 6: wati.ai_platform.protocol.commi.Speaker.tone:type_name -> wati.ai_platform.protocol.common.TONE
	16, // 7: wati.ai_platform.protocol.commi.Speaker.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	17, // 8: wati.ai_platform.protocol.commi.Speaker.create_at:type_name -> google.protobuf.Timestamp
	17, // 9: wati.ai_platform.protocol.commi.Speaker.update_at:type_name -> google.protobuf.Timestamp
	0,  // 10: wati.ai_platform.protocol.commi.Video.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	14, // 11: wati.ai_platform.protocol.commi.Video.script_parameter:type_name -> wati.ai_platform.protocol.commi.Video.ScriptParameterEntry
	19, // 12: wati.ai_platform.protocol.commi.Video.tone:type_name -> wati.ai_platform.protocol.common.TONE
	20, // 13: wati.ai_platform.protocol.commi.Video.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	17, // 14: wati.ai_platform.protocol.commi.Video.create_at:type_name -> google.protobuf.Timestamp
	17, // 15: wati.ai_platform.protocol.commi.Video.update_at:type_name -> google.protobuf.Timestamp
	5,  // 16: wati.ai_platform.protocol.commi.TemplateScript.parameters:type_name -> wati.ai_platform.protocol.commi.TemplateScriptParameter
	17, // 17: wati.ai_platform.protocol.commi.TemplateScript.create_at:type_name -> google.protobuf.Timestamp
	17, // 18: wati.ai_platform.protocol.commi.TemplateScript.update_at:type_name -> google.protobuf.Timestamp
	15, // 19: wati.ai_platform.protocol.commi.VideoGenerateRequest.values:type_name -> wati.ai_platform.protocol.commi.VideoGenerateRequest.ValuesEntry
	1,  // 20: wati.ai_platform.protocol.commi.VideoGenerateRequest.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	19, // 21: wati.ai_platform.protocol.commi.VideoGenerateRequest.tone:type_name -> wati.ai_platform.protocol.common.TONE
	20, // 22: wati.ai_platform.protocol.commi.VideoGenerateResult.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	17, // 23: wati.ai_platform.protocol.commi.VideoGenerationUsage.date:type_name -> google.protobuf.Timestamp
	21, // 24: wati.ai_platform.protocol.commi.VideoGenerationUsage.source:type_name -> wati.ai_platform.protocol.common.TASKSOURCE
	22, // 25: wati.ai_platform.protocol.commi.UserInfo.source:type_name -> wati.ai_platform.protocol.common.USERSOURCE
	23, // 26: wati.ai_platform.protocol.commi.UserInfo.type:type_name -> wati.ai_platform.protocol.common.USERTYPE
	10, // 27: wati.ai_platform.protocol.commi.UserInfo.credits:type_name -> wati.ai_platform.protocol.commi.CreditInfo
	17, // 28: wati.ai_platform.protocol.commi.UserInfo.create_at:type_name -> google.protobuf.Timestamp
	17, // 29: wati.ai_platform.protocol.commi.UserInfo.update_at:type_name -> google.protobuf.Timestamp
	17, // 30: wati.ai_platform.protocol.commi.APIKeyInfo.created_at:type_name -> google.protobuf.Timestamp
	17, // 31: wati.ai_platform.protocol.commi.APIKeyInfo.last_used_at:type_name -> google.protobuf.Timestamp
	17, // 32: wati.ai_platform.protocol.commi.CreditUsage.date:type_name -> google.protobuf.Timestamp
	21, // 33: wati.ai_platform.protocol.commi.CreditUsage.source:type_name -> wati.ai_platform.protocol.common.TASKSOURCE
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_commi_proto_init() }
func file_commi_proto_init() {
	if File_commi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateScriptParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGenerateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGenerationUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commi_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commi_proto_goTypes,
		DependencyIndexes: file_commi_proto_depIdxs,
		EnumInfos:         file_commi_proto_enumTypes,
		MessageInfos:      file_commi_proto_msgTypes,
	}.Build()
	File_commi_proto = out.File
	file_commi_proto_rawDesc = nil
	file_commi_proto_goTypes = nil
	file_commi_proto_depIdxs = nil
}
