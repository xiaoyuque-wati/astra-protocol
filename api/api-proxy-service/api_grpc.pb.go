// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: api-proxy-service/api.proto

package api_proxy_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	APIProxyService_VideoTemplateList_FullMethodName  = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoTemplateList"
	APIProxyService_VideoTemplateGet_FullMethodName   = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoTemplateGet"
	APIProxyService_SpeakerList_FullMethodName        = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/SpeakerList"
	APIProxyService_SpeakerGet_FullMethodName         = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/SpeakerGet"
	APIProxyService_VideoList_FullMethodName          = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoList"
	APIProxyService_VideoGet_FullMethodName           = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoGet"
	APIProxyService_VideoTaskNew_FullMethodName       = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoTaskNew"
	APIProxyService_VideoTaskStatusGet_FullMethodName = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoTaskStatusGet"
	APIProxyService_VideoUpdate_FullMethodName        = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoUpdate"
	APIProxyService_VideoDelete_FullMethodName        = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/VideoDelete"
	APIProxyService_SendWATIMessage_FullMethodName    = "/wati.ai_platform.protocol.api_proxy_service.APIProxyService/SendWATIMessage"
)

// APIProxyServiceClient is the client API for APIProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIProxyServiceClient interface {
	// List video templates.
	VideoTemplateList(ctx context.Context, in *VideoTemplateListRequest, opts ...grpc.CallOption) (*VideoTemplateListResponse, error)
	// Get the specified template by ID.
	VideoTemplateGet(ctx context.Context, in *VideoTemplateGetRequest, opts ...grpc.CallOption) (*VideoTemplateGetResponse, error)
	// List all speakers.
	SpeakerList(ctx context.Context, in *SpeakerListRequest, opts ...grpc.CallOption) (*SpeakerListResponse, error)
	// Get the specified speaker by ID.
	SpeakerGet(ctx context.Context, in *SpeakerGetRequest, opts ...grpc.CallOption) (*SpeakerGetResponse, error)
	// List all videos generated by the specified user.
	VideoList(ctx context.Context, in *VideoListRequest, opts ...grpc.CallOption) (*VideoListResponse, error)
	// Get the specified video by video ID.
	VideoGet(ctx context.Context, in *VideoGetRequest, opts ...grpc.CallOption) (*VideoGetResponse, error)
	// Create a video generation task.
	VideoTaskNew(ctx context.Context, in *VideoNewTaskRequest, opts ...grpc.CallOption) (*VideoNewTaskResponse, error)
	// Check a video generation task status by video ID.
	VideoTaskStatusGet(ctx context.Context, in *VideoTaskStatusGetRequest, opts ...grpc.CallOption) (*VideoTaskStatusGetResponse, error)
	VideoUpdate(ctx context.Context, in *VideoUpdateRequest, opts ...grpc.CallOption) (*VideoUpdateResponse, error)
	VideoDelete(ctx context.Context, in *VideoDeleteRequest, opts ...grpc.CallOption) (*VideoDeleteResponse, error)
	SendWATIMessage(ctx context.Context, in *SendWATIMessageRequest, opts ...grpc.CallOption) (*SendWATIMessageResponse, error)
}

type aPIProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIProxyServiceClient(cc grpc.ClientConnInterface) APIProxyServiceClient {
	return &aPIProxyServiceClient{cc}
}

func (c *aPIProxyServiceClient) VideoTemplateList(ctx context.Context, in *VideoTemplateListRequest, opts ...grpc.CallOption) (*VideoTemplateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoTemplateListResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoTemplateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoTemplateGet(ctx context.Context, in *VideoTemplateGetRequest, opts ...grpc.CallOption) (*VideoTemplateGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoTemplateGetResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoTemplateGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) SpeakerList(ctx context.Context, in *SpeakerListRequest, opts ...grpc.CallOption) (*SpeakerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerListResponse)
	err := c.cc.Invoke(ctx, APIProxyService_SpeakerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) SpeakerGet(ctx context.Context, in *SpeakerGetRequest, opts ...grpc.CallOption) (*SpeakerGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeakerGetResponse)
	err := c.cc.Invoke(ctx, APIProxyService_SpeakerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoList(ctx context.Context, in *VideoListRequest, opts ...grpc.CallOption) (*VideoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoListResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoGet(ctx context.Context, in *VideoGetRequest, opts ...grpc.CallOption) (*VideoGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoGetResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoTaskNew(ctx context.Context, in *VideoNewTaskRequest, opts ...grpc.CallOption) (*VideoNewTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoNewTaskResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoTaskNew_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoTaskStatusGet(ctx context.Context, in *VideoTaskStatusGetRequest, opts ...grpc.CallOption) (*VideoTaskStatusGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoTaskStatusGetResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoTaskStatusGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoUpdate(ctx context.Context, in *VideoUpdateRequest, opts ...grpc.CallOption) (*VideoUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoUpdateResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) VideoDelete(ctx context.Context, in *VideoDeleteRequest, opts ...grpc.CallOption) (*VideoDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoDeleteResponse)
	err := c.cc.Invoke(ctx, APIProxyService_VideoDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIProxyServiceClient) SendWATIMessage(ctx context.Context, in *SendWATIMessageRequest, opts ...grpc.CallOption) (*SendWATIMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWATIMessageResponse)
	err := c.cc.Invoke(ctx, APIProxyService_SendWATIMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIProxyServiceServer is the server API for APIProxyService service.
// All implementations must embed UnimplementedAPIProxyServiceServer
// for forward compatibility
type APIProxyServiceServer interface {
	// List video templates.
	VideoTemplateList(context.Context, *VideoTemplateListRequest) (*VideoTemplateListResponse, error)
	// Get the specified template by ID.
	VideoTemplateGet(context.Context, *VideoTemplateGetRequest) (*VideoTemplateGetResponse, error)
	// List all speakers.
	SpeakerList(context.Context, *SpeakerListRequest) (*SpeakerListResponse, error)
	// Get the specified speaker by ID.
	SpeakerGet(context.Context, *SpeakerGetRequest) (*SpeakerGetResponse, error)
	// List all videos generated by the specified user.
	VideoList(context.Context, *VideoListRequest) (*VideoListResponse, error)
	// Get the specified video by video ID.
	VideoGet(context.Context, *VideoGetRequest) (*VideoGetResponse, error)
	// Create a video generation task.
	VideoTaskNew(context.Context, *VideoNewTaskRequest) (*VideoNewTaskResponse, error)
	// Check a video generation task status by video ID.
	VideoTaskStatusGet(context.Context, *VideoTaskStatusGetRequest) (*VideoTaskStatusGetResponse, error)
	VideoUpdate(context.Context, *VideoUpdateRequest) (*VideoUpdateResponse, error)
	VideoDelete(context.Context, *VideoDeleteRequest) (*VideoDeleteResponse, error)
	SendWATIMessage(context.Context, *SendWATIMessageRequest) (*SendWATIMessageResponse, error)
	mustEmbedUnimplementedAPIProxyServiceServer()
}

// UnimplementedAPIProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIProxyServiceServer struct {
}

func (UnimplementedAPIProxyServiceServer) VideoTemplateList(context.Context, *VideoTemplateListRequest) (*VideoTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoTemplateList not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoTemplateGet(context.Context, *VideoTemplateGetRequest) (*VideoTemplateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoTemplateGet not implemented")
}
func (UnimplementedAPIProxyServiceServer) SpeakerList(context.Context, *SpeakerListRequest) (*SpeakerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeakerList not implemented")
}
func (UnimplementedAPIProxyServiceServer) SpeakerGet(context.Context, *SpeakerGetRequest) (*SpeakerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeakerGet not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoList(context.Context, *VideoListRequest) (*VideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoList not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoGet(context.Context, *VideoGetRequest) (*VideoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoGet not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoTaskNew(context.Context, *VideoNewTaskRequest) (*VideoNewTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoTaskNew not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoTaskStatusGet(context.Context, *VideoTaskStatusGetRequest) (*VideoTaskStatusGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoTaskStatusGet not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoUpdate(context.Context, *VideoUpdateRequest) (*VideoUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoUpdate not implemented")
}
func (UnimplementedAPIProxyServiceServer) VideoDelete(context.Context, *VideoDeleteRequest) (*VideoDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoDelete not implemented")
}
func (UnimplementedAPIProxyServiceServer) SendWATIMessage(context.Context, *SendWATIMessageRequest) (*SendWATIMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWATIMessage not implemented")
}
func (UnimplementedAPIProxyServiceServer) mustEmbedUnimplementedAPIProxyServiceServer() {}

// UnsafeAPIProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIProxyServiceServer will
// result in compilation errors.
type UnsafeAPIProxyServiceServer interface {
	mustEmbedUnimplementedAPIProxyServiceServer()
}

func RegisterAPIProxyServiceServer(s grpc.ServiceRegistrar, srv APIProxyServiceServer) {
	s.RegisterService(&APIProxyService_ServiceDesc, srv)
}

func _APIProxyService_VideoTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoTemplateList(ctx, req.(*VideoTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoTemplateGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoTemplateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoTemplateGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoTemplateGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoTemplateGet(ctx, req.(*VideoTemplateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_SpeakerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).SpeakerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_SpeakerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).SpeakerList(ctx, req.(*SpeakerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_SpeakerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).SpeakerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_SpeakerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).SpeakerGet(ctx, req.(*SpeakerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoList(ctx, req.(*VideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoGet(ctx, req.(*VideoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoTaskNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoNewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoTaskNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoTaskNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoTaskNew(ctx, req.(*VideoNewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoTaskStatusGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoTaskStatusGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoTaskStatusGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoTaskStatusGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoTaskStatusGet(ctx, req.(*VideoTaskStatusGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoUpdate(ctx, req.(*VideoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_VideoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).VideoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_VideoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).VideoDelete(ctx, req.(*VideoDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIProxyService_SendWATIMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWATIMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIProxyServiceServer).SendWATIMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIProxyService_SendWATIMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIProxyServiceServer).SendWATIMessage(ctx, req.(*SendWATIMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIProxyService_ServiceDesc is the grpc.ServiceDesc for APIProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wati.ai_platform.protocol.api_proxy_service.APIProxyService",
	HandlerType: (*APIProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoTemplateList",
			Handler:    _APIProxyService_VideoTemplateList_Handler,
		},
		{
			MethodName: "VideoTemplateGet",
			Handler:    _APIProxyService_VideoTemplateGet_Handler,
		},
		{
			MethodName: "SpeakerList",
			Handler:    _APIProxyService_SpeakerList_Handler,
		},
		{
			MethodName: "SpeakerGet",
			Handler:    _APIProxyService_SpeakerGet_Handler,
		},
		{
			MethodName: "VideoList",
			Handler:    _APIProxyService_VideoList_Handler,
		},
		{
			MethodName: "VideoGet",
			Handler:    _APIProxyService_VideoGet_Handler,
		},
		{
			MethodName: "VideoTaskNew",
			Handler:    _APIProxyService_VideoTaskNew_Handler,
		},
		{
			MethodName: "VideoTaskStatusGet",
			Handler:    _APIProxyService_VideoTaskStatusGet_Handler,
		},
		{
			MethodName: "VideoUpdate",
			Handler:    _APIProxyService_VideoUpdate_Handler,
		},
		{
			MethodName: "VideoDelete",
			Handler:    _APIProxyService_VideoDelete_Handler,
		},
		{
			MethodName: "SendWATIMessage",
			Handler:    _APIProxyService_SendWATIMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-proxy-service/api.proto",
}
