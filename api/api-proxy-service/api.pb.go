// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.19.4
// source: api-proxy-service/api.proto

package api_proxy_service

import (
	commi "github.com/ClareAI/ai-platform-protocol/api/commi"
	common "github.com/ClareAI/ai-platform-protocol/api/common"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoTemplateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging.
	Paging *common.RequestPaging `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	// [OPTIONAL] specific category .
	Category commi.CATEGORY `protobuf:"varint,2,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// [OPTIONAL] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,4,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *VideoTemplateListRequest) Reset() {
	*x = VideoTemplateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateListRequest) ProtoMessage() {}

func (x *VideoTemplateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateListRequest.ProtoReflect.Descriptor instead.
func (*VideoTemplateListRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{0}
}

func (x *VideoTemplateListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *VideoTemplateListRequest) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *VideoTemplateListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoTemplateListRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content of script. The {{`key`}} means variables in the template.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Details of parameters defined in the script content.
	Parameters []*commi.TemplateScriptParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{1}
}

func (x *Script) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Script) GetParameters() []*commi.TemplateScriptParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of template.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Template name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Template description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Template category.
	Category commi.CATEGORY `protobuf:"varint,4,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// Template tags.
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,7,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
	// script of this template
	Script *Script `protobuf:"bytes,8,opt,name=script,proto3" json:"script,omitempty"`
	// Create time.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Update time.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{2}
}

func (x *Template) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Template) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Template) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *Template) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Template) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

func (x *Template) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Template) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Template) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type VideoTemplateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template objects.
	Templates []*Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	// Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *VideoTemplateListResponse) Reset() {
	*x = VideoTemplateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateListResponse) ProtoMessage() {}

func (x *VideoTemplateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateListResponse.ProtoReflect.Descriptor instead.
func (*VideoTemplateListResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{3}
}

func (x *VideoTemplateListResponse) GetTemplates() []*Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *VideoTemplateListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VideoTemplateGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of template.
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
}

func (x *VideoTemplateGetRequest) Reset() {
	*x = VideoTemplateGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateGetRequest) ProtoMessage() {}

func (x *VideoTemplateGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateGetRequest.ProtoReflect.Descriptor instead.
func (*VideoTemplateGetRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{4}
}

func (x *VideoTemplateGetRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

type VideoTemplateGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template object.
	Template *Template `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *VideoTemplateGetResponse) Reset() {
	*x = VideoTemplateGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateGetResponse) ProtoMessage() {}

func (x *VideoTemplateGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateGetResponse.ProtoReflect.Descriptor instead.
func (*VideoTemplateGetResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{5}
}

func (x *VideoTemplateGetResponse) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type VideoTemplateScriptListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of template.
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// Paging.
	Paging *common.RequestPaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *VideoTemplateScriptListRequest) Reset() {
	*x = VideoTemplateScriptListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateScriptListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateScriptListRequest) ProtoMessage() {}

func (x *VideoTemplateScriptListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateScriptListRequest.ProtoReflect.Descriptor instead.
func (*VideoTemplateScriptListRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{6}
}

func (x *VideoTemplateScriptListRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VideoTemplateScriptListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VideoTemplateScriptListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Script template objects.
	Scripts []*commi.TemplateScript `protobuf:"bytes,1,rep,name=scripts,proto3" json:"scripts,omitempty"`
	// Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *VideoTemplateScriptListResponse) Reset() {
	*x = VideoTemplateScriptListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateScriptListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateScriptListResponse) ProtoMessage() {}

func (x *VideoTemplateScriptListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateScriptListResponse.ProtoReflect.Descriptor instead.
func (*VideoTemplateScriptListResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{7}
}

func (x *VideoTemplateScriptListResponse) GetScripts() []*commi.TemplateScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

func (x *VideoTemplateScriptListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VideoTemplateScriptGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of template.
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// UUID of script template.
	ScriptId string `protobuf:"bytes,2,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
}

func (x *VideoTemplateScriptGetRequest) Reset() {
	*x = VideoTemplateScriptGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateScriptGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateScriptGetRequest) ProtoMessage() {}

func (x *VideoTemplateScriptGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateScriptGetRequest.ProtoReflect.Descriptor instead.
func (*VideoTemplateScriptGetRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{8}
}

func (x *VideoTemplateScriptGetRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VideoTemplateScriptGetRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

type VideoTemplateScriptGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Script template object.
	Script *commi.TemplateScript `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *VideoTemplateScriptGetResponse) Reset() {
	*x = VideoTemplateScriptGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTemplateScriptGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTemplateScriptGetResponse) ProtoMessage() {}

func (x *VideoTemplateScriptGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTemplateScriptGetResponse.ProtoReflect.Descriptor instead.
func (*VideoTemplateScriptGetResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{9}
}

func (x *VideoTemplateScriptGetResponse) GetScript() *commi.TemplateScript {
	if x != nil {
		return x.Script
	}
	return nil
}

type SpeakerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging.
	Paging *common.RequestPaging `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	// [OPTIONAL] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] Language.
	Language commi.LANGUAGE `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// [OPTIONAL] User favourite or not.
	Favourite common.USERFAVOURITE `protobuf:"varint,4,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
}

func (x *SpeakerListRequest) Reset() {
	*x = SpeakerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerListRequest) ProtoMessage() {}

func (x *SpeakerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerListRequest.ProtoReflect.Descriptor instead.
func (*SpeakerListRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{10}
}

func (x *SpeakerListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *SpeakerListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SpeakerListRequest) GetLanguage() commi.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return commi.LANGUAGE(0)
}

func (x *SpeakerListRequest) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

// Speaker represents a speaker's profile used in video templates.
type Speaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the speaker.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the speaker.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Language spoken by the speaker.
	Language commi.LANGUAGE `protobuf:"varint,3,opt,name=language,proto3,enum=wati.ai_platform.protocol.commi.LANGUAGE" json:"language,omitempty"`
	// Gender of the speaker.
	Gender common.GENDER `protobuf:"varint,4,opt,name=gender,proto3,enum=wati.ai_platform.protocol.common.GENDER" json:"gender,omitempty"`
	// Name of an audio sample file for the speaker.
	AudioSampleName string `protobuf:"bytes,5,opt,name=audio_sample_name,json=audioSampleName,proto3" json:"audio_sample_name,omitempty"`
	// Default tone used by the speaker.
	Tone common.TONE `protobuf:"varint,6,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// Indicates whether the speaker is marked as a favourite by the user.
	Favourite common.USERFAVOURITE `protobuf:"varint,7,opt,name=favourite,proto3,enum=wati.ai_platform.protocol.common.USERFAVOURITE" json:"favourite,omitempty"`
	// Timestamp when the speaker profile was created.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Timestamp when the speaker profile was last updated.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Speaker) Reset() {
	*x = Speaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speaker) ProtoMessage() {}

func (x *Speaker) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speaker.ProtoReflect.Descriptor instead.
func (*Speaker) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{11}
}

func (x *Speaker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Speaker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Speaker) GetLanguage() commi.LANGUAGE {
	if x != nil {
		return x.Language
	}
	return commi.LANGUAGE(0)
}

func (x *Speaker) GetGender() common.GENDER {
	if x != nil {
		return x.Gender
	}
	return common.GENDER(0)
}

func (x *Speaker) GetAudioSampleName() string {
	if x != nil {
		return x.AudioSampleName
	}
	return ""
}

func (x *Speaker) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *Speaker) GetFavourite() common.USERFAVOURITE {
	if x != nil {
		return x.Favourite
	}
	return common.USERFAVOURITE(0)
}

func (x *Speaker) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Speaker) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type SpeakerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Speaker objects.
	Speakers []*Speaker `protobuf:"bytes,1,rep,name=speakers,proto3" json:"speakers,omitempty"`
	// Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *SpeakerListResponse) Reset() {
	*x = SpeakerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerListResponse) ProtoMessage() {}

func (x *SpeakerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerListResponse.ProtoReflect.Descriptor instead.
func (*SpeakerListResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{12}
}

func (x *SpeakerListResponse) GetSpeakers() []*Speaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

func (x *SpeakerListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type SpeakerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Speaker id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpeakerGetRequest) Reset() {
	*x = SpeakerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerGetRequest) ProtoMessage() {}

func (x *SpeakerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerGetRequest.ProtoReflect.Descriptor instead.
func (*SpeakerGetRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{13}
}

func (x *SpeakerGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SpeakerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Speaker object.
	Speaker *Speaker `protobuf:"bytes,1,opt,name=speaker,proto3" json:"speaker,omitempty"`
}

func (x *SpeakerGetResponse) Reset() {
	*x = SpeakerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeakerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerGetResponse) ProtoMessage() {}

func (x *SpeakerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerGetResponse.ProtoReflect.Descriptor instead.
func (*SpeakerGetResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{14}
}

func (x *SpeakerGetResponse) GetSpeaker() *Speaker {
	if x != nil {
		return x.Speaker
	}
	return nil
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Video address. This address is valid for 30 days.
	VideoUrl string `protobuf:"bytes,4,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	// Video duration. Unit: Seconds.
	Duration int32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// Video category. Same as template.
	Category commi.CATEGORY `protobuf:"varint,6,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// The template id that video use.
	TemplateId string `protobuf:"bytes,7,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// The speaker id that video use.
	SpeakerId string `protobuf:"bytes,8,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// The script template id that video use.
	// string script_id = 10;
	// Script parameter key-value pairs. The key is the name of the parameter defined by the script template.
	// The value is the value of the parameter to be filled into the template.
	ScriptParameter map[string]string `protobuf:"bytes,11,rep,name=script_parameter,json=scriptParameter,proto3" json:"script_parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Video speaker tone. Use same tone as speaker if not specified.
	Tone common.TONE `protobuf:"varint,12,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// task status.
	Status common.TASKSTATUS `protobuf:"varint,13,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// Create time.
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// Update time.
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{15}
}

func (x *Video) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Video) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Video) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Video) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Video) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Video) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *Video) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *Video) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *Video) GetScriptParameter() map[string]string {
	if x != nil {
		return x.ScriptParameter
	}
	return nil
}

func (x *Video) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *Video) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *Video) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

func (x *Video) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

type VideoListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [OPTIONAL] task status
	Status common.TASKSTATUS `protobuf:"varint,1,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// [OPTIONAL] is asc(查单词)
	IsAscending bool `protobuf:"varint,2,opt,name=is_ascending,json=isAscending,proto3" json:"is_ascending,omitempty"`
	// [OPTIONAL] category.
	Category commi.CATEGORY `protobuf:"varint,3,opt,name=category,proto3,enum=wati.ai_platform.protocol.commi.CATEGORY" json:"category,omitempty"`
	// [OPTIONAL] Query name filter.
	Name *common.NameQuery `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Paging.
	Paging *common.RequestPaging `protobuf:"bytes,21,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *VideoListRequest) Reset() {
	*x = VideoListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoListRequest) ProtoMessage() {}

func (x *VideoListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoListRequest.ProtoReflect.Descriptor instead.
func (*VideoListRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{16}
}

func (x *VideoListRequest) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *VideoListRequest) GetIsAscending() bool {
	if x != nil {
		return x.IsAscending
	}
	return false
}

func (x *VideoListRequest) GetCategory() commi.CATEGORY {
	if x != nil {
		return x.Category
	}
	return commi.CATEGORY(0)
}

func (x *VideoListRequest) GetName() *common.NameQuery {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VideoListRequest) GetPaging() *common.RequestPaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VideoListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Videos.
	Videos []*Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	// Paging.
	Paging *common.ResponsePaging `protobuf:"bytes,2,opt,name=paging,proto3" json:"paging,omitempty"`
}

func (x *VideoListResponse) Reset() {
	*x = VideoListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoListResponse) ProtoMessage() {}

func (x *VideoListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoListResponse.ProtoReflect.Descriptor instead.
func (*VideoListResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{17}
}

func (x *VideoListResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *VideoListResponse) GetPaging() *common.ResponsePaging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type VideoNewTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [OPTIONAL] Video name.
	// [OPTIONAL] If not specified, it will be generated based on the template name + current timestamp.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] The description of commi.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The template id to use when generating the commi.
	TemplateId string `protobuf:"bytes,3,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	// The key-value pairs of the using script template. Keep null if the script template has no variables.
	ScriptParameter map[string]string `protobuf:"bytes,5,rep,name=script_parameter,json=scriptParameter,proto3" json:"script_parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional speaker id.
	// Use template's default speaker id if null.
	SpeakerId string `protobuf:"bytes,6,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	// [OPTIONAL] Additional tone.
	// [OPTIONAL] Use speaker's default tone if null.
	Tone common.TONE `protobuf:"varint,7,opt,name=tone,proto3,enum=wati.ai_platform.protocol.common.TONE" json:"tone,omitempty"`
	// [OPTIONAL] The callback URL for the video generation result.
	// [OPTIONAL] Can also use the VideoGet API to get the generated commi.
	ResultCallbackUrl string `protobuf:"bytes,8,opt,name=result_callback_url,json=resultCallbackUrl,proto3" json:"result_callback_url,omitempty"`
}

func (x *VideoNewTaskRequest) Reset() {
	*x = VideoNewTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoNewTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoNewTaskRequest) ProtoMessage() {}

func (x *VideoNewTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoNewTaskRequest.ProtoReflect.Descriptor instead.
func (*VideoNewTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{18}
}

func (x *VideoNewTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoNewTaskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VideoNewTaskRequest) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *VideoNewTaskRequest) GetScriptParameter() map[string]string {
	if x != nil {
		return x.ScriptParameter
	}
	return nil
}

func (x *VideoNewTaskRequest) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *VideoNewTaskRequest) GetTone() common.TONE {
	if x != nil {
		return x.Tone
	}
	return common.TONE(0)
}

func (x *VideoNewTaskRequest) GetResultCallbackUrl() string {
	if x != nil {
		return x.ResultCallbackUrl
	}
	return ""
}

type VideoNewTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status
	Status common.TASKSTATUS `protobuf:"varint,2,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
}

func (x *VideoNewTaskResponse) Reset() {
	*x = VideoNewTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoNewTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoNewTaskResponse) ProtoMessage() {}

func (x *VideoNewTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoNewTaskResponse.ProtoReflect.Descriptor instead.
func (*VideoNewTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{19}
}

func (x *VideoNewTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VideoNewTaskResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

type VideoTaskStatusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video id
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *VideoTaskStatusGetRequest) Reset() {
	*x = VideoTaskStatusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTaskStatusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTaskStatusGetRequest) ProtoMessage() {}

func (x *VideoTaskStatusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTaskStatusGetRequest.ProtoReflect.Descriptor instead.
func (*VideoTaskStatusGetRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{20}
}

func (x *VideoTaskStatusGetRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type VideoTaskStatusGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task status.
	Status common.TASKSTATUS `protobuf:"varint,1,opt,name=status,proto3,enum=wati.ai_platform.protocol.common.TASKSTATUS" json:"status,omitempty"`
	// Task status message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// estimated time of video generation end.
	EstimatedTime int64 `protobuf:"varint,3,opt,name=estimated_time,json=estimatedTime,proto3" json:"estimated_time,omitempty"`
}

func (x *VideoTaskStatusGetResponse) Reset() {
	*x = VideoTaskStatusGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTaskStatusGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTaskStatusGetResponse) ProtoMessage() {}

func (x *VideoTaskStatusGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTaskStatusGetResponse.ProtoReflect.Descriptor instead.
func (*VideoTaskStatusGetResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{21}
}

func (x *VideoTaskStatusGetResponse) GetStatus() common.TASKSTATUS {
	if x != nil {
		return x.Status
	}
	return common.TASKSTATUS(0)
}

func (x *VideoTaskStatusGetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VideoTaskStatusGetResponse) GetEstimatedTime() int64 {
	if x != nil {
		return x.EstimatedTime
	}
	return 0
}

type VideoGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video id
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *VideoGetRequest) Reset() {
	*x = VideoGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGetRequest) ProtoMessage() {}

func (x *VideoGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGetRequest.ProtoReflect.Descriptor instead.
func (*VideoGetRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{22}
}

func (x *VideoGetRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type VideoGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video object.
	Video *Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *VideoGetResponse) Reset() {
	*x = VideoGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoGetResponse) ProtoMessage() {}

func (x *VideoGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoGetResponse.ProtoReflect.Descriptor instead.
func (*VideoGetResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{23}
}

func (x *VideoGetResponse) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type VideoUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the video need to update.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// [OPTIONAL] New name. Unchanged if empty.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// [OPTIONAL] New description. Unchanged if empty.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VideoUpdateRequest) Reset() {
	*x = VideoUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpdateRequest) ProtoMessage() {}

func (x *VideoUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoUpdateRequest.ProtoReflect.Descriptor instead.
func (*VideoUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{24}
}

func (x *VideoUpdateRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type VideoUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Video object.
	Video *Video `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *VideoUpdateResponse) Reset() {
	*x = VideoUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpdateResponse) ProtoMessage() {}

func (x *VideoUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoUpdateResponse.ProtoReflect.Descriptor instead.
func (*VideoUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{25}
}

func (x *VideoUpdateResponse) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

type VideoDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The video id needs to be deleted.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *VideoDeleteRequest) Reset() {
	*x = VideoDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDeleteRequest) ProtoMessage() {}

func (x *VideoDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDeleteRequest.ProtoReflect.Descriptor instead.
func (*VideoDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{26}
}

func (x *VideoDeleteRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type VideoDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VideoDeleteResponse) Reset() {
	*x = VideoDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDeleteResponse) ProtoMessage() {}

func (x *VideoDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDeleteResponse.ProtoReflect.Descriptor instead.
func (*VideoDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{27}
}

type WatiCustomParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// variable name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// variable value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WatiCustomParam) Reset() {
	*x = WatiCustomParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatiCustomParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatiCustomParam) ProtoMessage() {}

func (x *WatiCustomParam) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatiCustomParam.ProtoReflect.Descriptor instead.
func (*WatiCustomParam) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{28}
}

func (x *WatiCustomParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WatiCustomParam) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SendWATIMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WATI API Endpoint
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// WATI Access Token
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// WATI broadcast name
	BroadcastName string `protobuf:"bytes,3,opt,name=broadcast_name,json=broadcastName,proto3" json:"broadcast_name,omitempty"`
	// WATI template name
	TemplateName string `protobuf:"bytes,4,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	// The variable name defined in the WATI template for placing share video address.
	VariableName string `protobuf:"bytes,5,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"`
	// receiver message
	Receivers []*common.WatiReceiver `protobuf:"bytes,6,rep,name=receivers,proto3" json:"receivers,omitempty"`
}

func (x *SendWATIMessageRequest) Reset() {
	*x = SendWATIMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWATIMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWATIMessageRequest) ProtoMessage() {}

func (x *SendWATIMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWATIMessageRequest.ProtoReflect.Descriptor instead.
func (*SendWATIMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{29}
}

func (x *SendWATIMessageRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SendWATIMessageRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *SendWATIMessageRequest) GetBroadcastName() string {
	if x != nil {
		return x.BroadcastName
	}
	return ""
}

func (x *SendWATIMessageRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *SendWATIMessageRequest) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *SendWATIMessageRequest) GetReceivers() []*common.WatiReceiver {
	if x != nil {
		return x.Receivers
	}
	return nil
}

type SendWATIMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rets []*common.Result `protobuf:"bytes,1,rep,name=rets,proto3" json:"rets,omitempty"`
}

func (x *SendWATIMessageResponse) Reset() {
	*x = SendWATIMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proxy_service_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWATIMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWATIMessageResponse) ProtoMessage() {}

func (x *SendWATIMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proxy_service_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWATIMessageResponse.ProtoReflect.Descriptor instead.
func (*SendWATIMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proxy_service_api_proto_rawDescGZIP(), []int{30}
}

func (x *SendWATIMessageResponse) GetRets() []*common.Result {
	if x != nil {
		return x.Rets
	}
	return nil
}

var File_api_proxy_service_api_proto protoreflect.FileDescriptor

var file_api_proxy_service_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56,
	0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x22, 0x7c, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xc5, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x09, 0x10,
	0x0a, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x1e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xb6, 0x01, 0x0a,
	0x1f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x61,
	0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x1d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22,
	0xb4, 0x02, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53,
	0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x4c, 0x41, 0x4e, 0x47, 0x55,
	0x41, 0x47, 0x45, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e,
	0x45, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74,
	0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x53,
	0x45, 0x52, 0x46, 0x41, 0x56, 0x4f, 0x55, 0x52, 0x49, 0x54, 0x45, 0x52, 0x09, 0x66, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04,
	0x08, 0x1e, 0x10, 0x1f, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x48,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x23, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x22, 0xdc, 0x05, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0e, 0x10,
	0x0f, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x2e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x22, 0xa9, 0x01,
	0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12,
	0x48, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x03, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x4f, 0x4e, 0x45,
	0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x14, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x19, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e,
	0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x22, 0x65, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x2f, 0x0a, 0x12, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x69, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x96, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x57, 0x61, 0x74, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x72, 0x65,
	0x74, 0x73, 0x32, 0xd9, 0x0f, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x2e, 0x77,
	0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x12, 0x44, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e,
	0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0xa8,
	0x01, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x3e, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x08, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x12, 0x3c, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x65, 0x77, 0x12, 0x40, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x12, 0xcb, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x12, 0x46, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61,
	0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb2,
	0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x32, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41,
	0x54, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x2e, 0x77, 0x61, 0x74, 0x69,
	0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x41, 0x54, 0x49,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x77, 0x61, 0x74, 0x69, 0x2e, 0x61, 0x69, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x57, 0x41, 0x54, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x2f, 0x77, 0x61, 0x74, 0x69, 0x42, 0x5e,
	0x92, 0x41, 0x1c, 0x12, 0x1a, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x20, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x61, 0x72,
	0x65, 0x41, 0x49, 0x2f, 0x61, 0x69, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proxy_service_api_proto_rawDescOnce sync.Once
	file_api_proxy_service_api_proto_rawDescData = file_api_proxy_service_api_proto_rawDesc
)

func file_api_proxy_service_api_proto_rawDescGZIP() []byte {
	file_api_proxy_service_api_proto_rawDescOnce.Do(func() {
		file_api_proxy_service_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proxy_service_api_proto_rawDescData)
	})
	return file_api_proxy_service_api_proto_rawDescData
}

var file_api_proxy_service_api_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_proxy_service_api_proto_goTypes = []interface{}{
	(*VideoTemplateListRequest)(nil),        // 0: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest
	(*Script)(nil),                          // 1: wati.ai_platform.protocol.api_proxy_service.Script
	(*Template)(nil),                        // 2: wati.ai_platform.protocol.api_proxy_service.Template
	(*VideoTemplateListResponse)(nil),       // 3: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListResponse
	(*VideoTemplateGetRequest)(nil),         // 4: wati.ai_platform.protocol.api_proxy_service.VideoTemplateGetRequest
	(*VideoTemplateGetResponse)(nil),        // 5: wati.ai_platform.protocol.api_proxy_service.VideoTemplateGetResponse
	(*VideoTemplateScriptListRequest)(nil),  // 6: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptListRequest
	(*VideoTemplateScriptListResponse)(nil), // 7: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptListResponse
	(*VideoTemplateScriptGetRequest)(nil),   // 8: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptGetRequest
	(*VideoTemplateScriptGetResponse)(nil),  // 9: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptGetResponse
	(*SpeakerListRequest)(nil),              // 10: wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest
	(*Speaker)(nil),                         // 11: wati.ai_platform.protocol.api_proxy_service.Speaker
	(*SpeakerListResponse)(nil),             // 12: wati.ai_platform.protocol.api_proxy_service.SpeakerListResponse
	(*SpeakerGetRequest)(nil),               // 13: wati.ai_platform.protocol.api_proxy_service.SpeakerGetRequest
	(*SpeakerGetResponse)(nil),              // 14: wati.ai_platform.protocol.api_proxy_service.SpeakerGetResponse
	(*Video)(nil),                           // 15: wati.ai_platform.protocol.api_proxy_service.Video
	(*VideoListRequest)(nil),                // 16: wati.ai_platform.protocol.api_proxy_service.VideoListRequest
	(*VideoListResponse)(nil),               // 17: wati.ai_platform.protocol.api_proxy_service.VideoListResponse
	(*VideoNewTaskRequest)(nil),             // 18: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest
	(*VideoNewTaskResponse)(nil),            // 19: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskResponse
	(*VideoTaskStatusGetRequest)(nil),       // 20: wati.ai_platform.protocol.api_proxy_service.VideoTaskStatusGetRequest
	(*VideoTaskStatusGetResponse)(nil),      // 21: wati.ai_platform.protocol.api_proxy_service.VideoTaskStatusGetResponse
	(*VideoGetRequest)(nil),                 // 22: wati.ai_platform.protocol.api_proxy_service.VideoGetRequest
	(*VideoGetResponse)(nil),                // 23: wati.ai_platform.protocol.api_proxy_service.VideoGetResponse
	(*VideoUpdateRequest)(nil),              // 24: wati.ai_platform.protocol.api_proxy_service.VideoUpdateRequest
	(*VideoUpdateResponse)(nil),             // 25: wati.ai_platform.protocol.api_proxy_service.VideoUpdateResponse
	(*VideoDeleteRequest)(nil),              // 26: wati.ai_platform.protocol.api_proxy_service.VideoDeleteRequest
	(*VideoDeleteResponse)(nil),             // 27: wati.ai_platform.protocol.api_proxy_service.VideoDeleteResponse
	(*WatiCustomParam)(nil),                 // 28: wati.ai_platform.protocol.api_proxy_service.WatiCustomParam
	(*SendWATIMessageRequest)(nil),          // 29: wati.ai_platform.protocol.api_proxy_service.SendWATIMessageRequest
	(*SendWATIMessageResponse)(nil),         // 30: wati.ai_platform.protocol.api_proxy_service.SendWATIMessageResponse
	nil,                                     // 31: wati.ai_platform.protocol.api_proxy_service.Video.ScriptParameterEntry
	nil,                                     // 32: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest.ScriptParameterEntry
	(*common.RequestPaging)(nil),            // 33: wati.ai_platform.protocol.common.RequestPaging
	(commi.CATEGORY)(0),                     // 34: wati.ai_platform.protocol.commi.CATEGORY
	(*common.NameQuery)(nil),                // 35: wati.ai_platform.protocol.common.NameQuery
	(common.USERFAVOURITE)(0),               // 36: wati.ai_platform.protocol.common.USERFAVOURITE
	(*commi.TemplateScriptParameter)(nil),   // 37: wati.ai_platform.protocol.commi.TemplateScriptParameter
	(*timestamppb.Timestamp)(nil),           // 38: google.protobuf.Timestamp
	(*common.ResponsePaging)(nil),           // 39: wati.ai_platform.protocol.common.ResponsePaging
	(*commi.TemplateScript)(nil),            // 40: wati.ai_platform.protocol.commi.TemplateScript
	(commi.LANGUAGE)(0),                     // 41: wati.ai_platform.protocol.commi.LANGUAGE
	(common.GENDER)(0),                      // 42: wati.ai_platform.protocol.common.GENDER
	(common.TONE)(0),                        // 43: wati.ai_platform.protocol.common.TONE
	(common.TASKSTATUS)(0),                  // 44: wati.ai_platform.protocol.common.TASKSTATUS
	(*common.WatiReceiver)(nil),             // 45: wati.ai_platform.protocol.common.WatiReceiver
	(*common.Result)(nil),                   // 46: wati.ai_platform.protocol.common.Result
}
var file_api_proxy_service_api_proto_depIdxs = []int32{
	33, // 0: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	34, // 1: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	35, // 2: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	36, // 3: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	37, // 4: wati.ai_platform.protocol.api_proxy_service.Script.parameters:type_name -> wati.ai_platform.protocol.commi.TemplateScriptParameter
	34, // 5: wati.ai_platform.protocol.api_proxy_service.Template.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	36, // 6: wati.ai_platform.protocol.api_proxy_service.Template.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	1,  // 7: wati.ai_platform.protocol.api_proxy_service.Template.script:type_name -> wati.ai_platform.protocol.api_proxy_service.Script
	38, // 8: wati.ai_platform.protocol.api_proxy_service.Template.create_at:type_name -> google.protobuf.Timestamp
	38, // 9: wati.ai_platform.protocol.api_proxy_service.Template.update_at:type_name -> google.protobuf.Timestamp
	2,  // 10: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListResponse.templates:type_name -> wati.ai_platform.protocol.api_proxy_service.Template
	39, // 11: wati.ai_platform.protocol.api_proxy_service.VideoTemplateListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	2,  // 12: wati.ai_platform.protocol.api_proxy_service.VideoTemplateGetResponse.template:type_name -> wati.ai_platform.protocol.api_proxy_service.Template
	33, // 13: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	40, // 14: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptListResponse.scripts:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	39, // 15: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	40, // 16: wati.ai_platform.protocol.api_proxy_service.VideoTemplateScriptGetResponse.script:type_name -> wati.ai_platform.protocol.commi.TemplateScript
	33, // 17: wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	35, // 18: wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	41, // 19: wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	36, // 20: wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	41, // 21: wati.ai_platform.protocol.api_proxy_service.Speaker.language:type_name -> wati.ai_platform.protocol.commi.LANGUAGE
	42, // 22: wati.ai_platform.protocol.api_proxy_service.Speaker.gender:type_name -> wati.ai_platform.protocol.common.GENDER
	43, // 23: wati.ai_platform.protocol.api_proxy_service.Speaker.tone:type_name -> wati.ai_platform.protocol.common.TONE
	36, // 24: wati.ai_platform.protocol.api_proxy_service.Speaker.favourite:type_name -> wati.ai_platform.protocol.common.USERFAVOURITE
	38, // 25: wati.ai_platform.protocol.api_proxy_service.Speaker.create_at:type_name -> google.protobuf.Timestamp
	38, // 26: wati.ai_platform.protocol.api_proxy_service.Speaker.update_at:type_name -> google.protobuf.Timestamp
	11, // 27: wati.ai_platform.protocol.api_proxy_service.SpeakerListResponse.speakers:type_name -> wati.ai_platform.protocol.api_proxy_service.Speaker
	39, // 28: wati.ai_platform.protocol.api_proxy_service.SpeakerListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	11, // 29: wati.ai_platform.protocol.api_proxy_service.SpeakerGetResponse.speaker:type_name -> wati.ai_platform.protocol.api_proxy_service.Speaker
	34, // 30: wati.ai_platform.protocol.api_proxy_service.Video.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	31, // 31: wati.ai_platform.protocol.api_proxy_service.Video.script_parameter:type_name -> wati.ai_platform.protocol.api_proxy_service.Video.ScriptParameterEntry
	43, // 32: wati.ai_platform.protocol.api_proxy_service.Video.tone:type_name -> wati.ai_platform.protocol.common.TONE
	44, // 33: wati.ai_platform.protocol.api_proxy_service.Video.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	38, // 34: wati.ai_platform.protocol.api_proxy_service.Video.create_at:type_name -> google.protobuf.Timestamp
	38, // 35: wati.ai_platform.protocol.api_proxy_service.Video.update_at:type_name -> google.protobuf.Timestamp
	44, // 36: wati.ai_platform.protocol.api_proxy_service.VideoListRequest.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	34, // 37: wati.ai_platform.protocol.api_proxy_service.VideoListRequest.category:type_name -> wati.ai_platform.protocol.commi.CATEGORY
	35, // 38: wati.ai_platform.protocol.api_proxy_service.VideoListRequest.name:type_name -> wati.ai_platform.protocol.common.NameQuery
	33, // 39: wati.ai_platform.protocol.api_proxy_service.VideoListRequest.paging:type_name -> wati.ai_platform.protocol.common.RequestPaging
	15, // 40: wati.ai_platform.protocol.api_proxy_service.VideoListResponse.videos:type_name -> wati.ai_platform.protocol.api_proxy_service.Video
	39, // 41: wati.ai_platform.protocol.api_proxy_service.VideoListResponse.paging:type_name -> wati.ai_platform.protocol.common.ResponsePaging
	32, // 42: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest.script_parameter:type_name -> wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest.ScriptParameterEntry
	43, // 43: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest.tone:type_name -> wati.ai_platform.protocol.common.TONE
	44, // 44: wati.ai_platform.protocol.api_proxy_service.VideoNewTaskResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	44, // 45: wati.ai_platform.protocol.api_proxy_service.VideoTaskStatusGetResponse.status:type_name -> wati.ai_platform.protocol.common.TASKSTATUS
	15, // 46: wati.ai_platform.protocol.api_proxy_service.VideoGetResponse.video:type_name -> wati.ai_platform.protocol.api_proxy_service.Video
	15, // 47: wati.ai_platform.protocol.api_proxy_service.VideoUpdateResponse.video:type_name -> wati.ai_platform.protocol.api_proxy_service.Video
	45, // 48: wati.ai_platform.protocol.api_proxy_service.SendWATIMessageRequest.receivers:type_name -> wati.ai_platform.protocol.common.WatiReceiver
	46, // 49: wati.ai_platform.protocol.api_proxy_service.SendWATIMessageResponse.rets:type_name -> wati.ai_platform.protocol.common.Result
	0,  // 50: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTemplateList:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoTemplateListRequest
	4,  // 51: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTemplateGet:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoTemplateGetRequest
	10, // 52: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SpeakerList:input_type -> wati.ai_platform.protocol.api_proxy_service.SpeakerListRequest
	13, // 53: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SpeakerGet:input_type -> wati.ai_platform.protocol.api_proxy_service.SpeakerGetRequest
	16, // 54: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoList:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoListRequest
	22, // 55: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoGet:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoGetRequest
	18, // 56: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTaskNew:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoNewTaskRequest
	20, // 57: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTaskStatusGet:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoTaskStatusGetRequest
	24, // 58: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoUpdate:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoUpdateRequest
	26, // 59: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoDelete:input_type -> wati.ai_platform.protocol.api_proxy_service.VideoDeleteRequest
	29, // 60: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SendWATIMessage:input_type -> wati.ai_platform.protocol.api_proxy_service.SendWATIMessageRequest
	3,  // 61: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTemplateList:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoTemplateListResponse
	5,  // 62: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTemplateGet:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoTemplateGetResponse
	12, // 63: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SpeakerList:output_type -> wati.ai_platform.protocol.api_proxy_service.SpeakerListResponse
	14, // 64: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SpeakerGet:output_type -> wati.ai_platform.protocol.api_proxy_service.SpeakerGetResponse
	17, // 65: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoList:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoListResponse
	23, // 66: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoGet:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoGetResponse
	19, // 67: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTaskNew:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoNewTaskResponse
	21, // 68: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoTaskStatusGet:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoTaskStatusGetResponse
	25, // 69: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoUpdate:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoUpdateResponse
	27, // 70: wati.ai_platform.protocol.api_proxy_service.APIProxyService.VideoDelete:output_type -> wati.ai_platform.protocol.api_proxy_service.VideoDeleteResponse
	30, // 71: wati.ai_platform.protocol.api_proxy_service.APIProxyService.SendWATIMessage:output_type -> wati.ai_platform.protocol.api_proxy_service.SendWATIMessageResponse
	61, // [61:72] is the sub-list for method output_type
	50, // [50:61] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_api_proxy_service_api_proto_init() }
func file_api_proxy_service_api_proto_init() {
	if File_api_proxy_service_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proxy_service_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateScriptListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateScriptListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateScriptGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTemplateScriptGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeakerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoNewTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoNewTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTaskStatusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTaskStatusGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatiCustomParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWATIMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proxy_service_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWATIMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proxy_service_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proxy_service_api_proto_goTypes,
		DependencyIndexes: file_api_proxy_service_api_proto_depIdxs,
		MessageInfos:      file_api_proxy_service_api_proto_msgTypes,
	}.Build()
	File_api_proxy_service_api_proto = out.File
	file_api_proxy_service_api_proto_rawDesc = nil
	file_api_proxy_service_api_proto_goTypes = nil
	file_api_proxy_service_api_proto_depIdxs = nil
}
